// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: rpc.proto

package rpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IPType int32

const (
	IPType_TypeVPCIP      IPType = 0
	IPType_TypeVPCENI     IPType = 1
	IPType_TypeENIMultiIP IPType = 2
)

// Enum value maps for IPType.
var (
	IPType_name = map[int32]string{
		0: "TypeVPCIP",
		1: "TypeVPCENI",
		2: "TypeENIMultiIP",
	}
	IPType_value = map[string]int32{
		"TypeVPCIP":      0,
		"TypeVPCENI":     1,
		"TypeENIMultiIP": 2,
	}
)

func (x IPType) Enum() *IPType {
	p := new(IPType)
	*p = x
	return p
}

func (x IPType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IPType) Descriptor() protoreflect.EnumDescriptor {
	return file_rpc_proto_enumTypes[0].Descriptor()
}

func (IPType) Type() protoreflect.EnumType {
	return &file_rpc_proto_enumTypes[0]
}

func (x IPType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IPType.Descriptor instead.
func (IPType) EnumDescriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{0}
}

type EventTarget int32

const (
	EventTarget_EventTargetNode EventTarget = 0
	EventTarget_EventTargetPod  EventTarget = 1
)

// Enum value maps for EventTarget.
var (
	EventTarget_name = map[int32]string{
		0: "EventTargetNode",
		1: "EventTargetPod",
	}
	EventTarget_value = map[string]int32{
		"EventTargetNode": 0,
		"EventTargetPod":  1,
	}
)

func (x EventTarget) Enum() *EventTarget {
	p := new(EventTarget)
	*p = x
	return p
}

func (x EventTarget) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventTarget) Descriptor() protoreflect.EnumDescriptor {
	return file_rpc_proto_enumTypes[1].Descriptor()
}

func (EventTarget) Type() protoreflect.EnumType {
	return &file_rpc_proto_enumTypes[1]
}

func (x EventTarget) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventTarget.Descriptor instead.
func (EventTarget) EnumDescriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{1}
}

type EventType int32

const (
	EventType_EventTypeNormal  EventType = 0
	EventType_EventTypeWarning EventType = 1
)

// Enum value maps for EventType.
var (
	EventType_name = map[int32]string{
		0: "EventTypeNormal",
		1: "EventTypeWarning",
	}
	EventType_value = map[string]int32{
		"EventTypeNormal":  0,
		"EventTypeWarning": 1,
	}
)

func (x EventType) Enum() *EventType {
	p := new(EventType)
	*p = x
	return p
}

func (x EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_rpc_proto_enumTypes[2].Descriptor()
}

func (EventType) Type() protoreflect.EnumType {
	return &file_rpc_proto_enumTypes[2]
}

func (x EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventType.Descriptor instead.
func (EventType) EnumDescriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{2}
}

// IPSet declare a string set contain v4 v6 info
type IPSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IPv4 string `protobuf:"bytes,1,opt,name=IPv4,proto3" json:"IPv4,omitempty"`
	IPv6 string `protobuf:"bytes,2,opt,name=IPv6,proto3" json:"IPv6,omitempty"`
}

func (x *IPSet) Reset() {
	*x = IPSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPSet) ProtoMessage() {}

func (x *IPSet) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPSet.ProtoReflect.Descriptor instead.
func (*IPSet) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{0}
}

func (x *IPSet) GetIPv4() string {
	if x != nil {
		return x.IPv4
	}
	return ""
}

func (x *IPSet) GetIPv6() string {
	if x != nil {
		return x.IPv6
	}
	return ""
}

type AllocIPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	K8SPodName             string `protobuf:"bytes,1,opt,name=K8sPodName,proto3" json:"K8sPodName,omitempty"`
	K8SPodNamespace        string `protobuf:"bytes,2,opt,name=K8sPodNamespace,proto3" json:"K8sPodNamespace,omitempty"`
	K8SPodInfraContainerId string `protobuf:"bytes,3,opt,name=K8sPodInfraContainerId,proto3" json:"K8sPodInfraContainerId,omitempty"`
	Netns                  string `protobuf:"bytes,4,opt,name=Netns,proto3" json:"Netns,omitempty"`
	IfName                 string `protobuf:"bytes,5,opt,name=IfName,proto3" json:"IfName,omitempty"`
}

func (x *AllocIPRequest) Reset() {
	*x = AllocIPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllocIPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocIPRequest) ProtoMessage() {}

func (x *AllocIPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocIPRequest.ProtoReflect.Descriptor instead.
func (*AllocIPRequest) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{1}
}

func (x *AllocIPRequest) GetK8SPodName() string {
	if x != nil {
		return x.K8SPodName
	}
	return ""
}

func (x *AllocIPRequest) GetK8SPodNamespace() string {
	if x != nil {
		return x.K8SPodNamespace
	}
	return ""
}

func (x *AllocIPRequest) GetK8SPodInfraContainerId() string {
	if x != nil {
		return x.K8SPodInfraContainerId
	}
	return ""
}

func (x *AllocIPRequest) GetNetns() string {
	if x != nil {
		return x.Netns
	}
	return ""
}

func (x *AllocIPRequest) GetIfName() string {
	if x != nil {
		return x.IfName
	}
	return ""
}

type AllocIPReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success   bool       `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	IPType    IPType     `protobuf:"varint,2,opt,name=AllocationType,proto3,enum=rpc.AllocationType" json:"AllocationType,omitempty"`
	BasicInfo *BasicInfo `protobuf:"bytes,3,opt,name=BasicInfo,proto3" json:"BasicInfo,omitempty"`
	ENIInfo   *ENIInfo   `protobuf:"bytes,4,opt,name=ENIInfo,proto3" json:"ENIInfo,omitempty"`
	Pod       *Pod       `protobuf:"bytes,5,opt,name=Pod,proto3" json:"Pod,omitempty"`
	IPv4      bool       `protobuf:"varint,6,opt,name=IPv4,proto3" json:"IPv4,omitempty"`
	IPv6      bool       `protobuf:"varint,7,opt,name=IPv6,proto3" json:"IPv6,omitempty"`
}

func (x *AllocIPReply) Reset() {
	*x = AllocIPReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllocIPReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocIPReply) ProtoMessage() {}

func (x *AllocIPReply) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocIPReply.ProtoReflect.Descriptor instead.
func (*AllocIPReply) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{2}
}

func (x *AllocIPReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *AllocIPReply) GetIPType() IPType {
	if x != nil {
		return x.IPType
	}
	return IPType_TypeVPCIP
}

func (x *AllocIPReply) GetBasicInfo() *BasicInfo {
	if x != nil {
		return x.BasicInfo
	}
	return nil
}

func (x *AllocIPReply) GetENIInfo() *ENIInfo {
	if x != nil {
		return x.ENIInfo
	}
	return nil
}

func (x *AllocIPReply) GetPod() *Pod {
	if x != nil {
		return x.Pod
	}
	return nil
}

func (x *AllocIPReply) GetIPv4() bool {
	if x != nil {
		return x.IPv4
	}
	return false
}

func (x *AllocIPReply) GetIPv6() bool {
	if x != nil {
		return x.IPv6
	}
	return false
}

type BasicInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PodIP       *IPSet `protobuf:"bytes,1,opt,name=PodIP,proto3" json:"PodIP,omitempty"`
	PodCIDR     *IPSet `protobuf:"bytes,2,opt,name=PodCIDR,proto3" json:"PodCIDR,omitempty"`     // subnet for pod, value form vSwitch CIDR or podCIDR
	GatewayIP   *IPSet `protobuf:"bytes,3,opt,name=GatewayIP,proto3" json:"GatewayIP,omitempty"` // gw for the subnet
	ServiceCIDR *IPSet `protobuf:"bytes,4,opt,name=ServiceCIDR,proto3" json:"ServiceCIDR,omitempty"`
}

func (x *BasicInfo) Reset() {
	*x = BasicInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasicInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicInfo) ProtoMessage() {}

func (x *BasicInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicInfo.ProtoReflect.Descriptor instead.
func (*BasicInfo) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{3}
}

func (x *BasicInfo) GetPodIP() *IPSet {
	if x != nil {
		return x.PodIP
	}
	return nil
}

func (x *BasicInfo) GetPodCIDR() *IPSet {
	if x != nil {
		return x.PodCIDR
	}
	return nil
}

func (x *BasicInfo) GetGatewayIP() *IPSet {
	if x != nil {
		return x.GatewayIP
	}
	return nil
}

func (x *BasicInfo) GetServiceCIDR() *IPSet {
	if x != nil {
		return x.ServiceCIDR
	}
	return nil
}

type ENIInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MAC   string `protobuf:"bytes,1,opt,name=MAC,proto3" json:"MAC,omitempty"`
	Trunk bool   `protobuf:"varint,2,opt,name=Trunk,proto3" json:"Trunk,omitempty"` // eni is trunk
}

func (x *ENIInfo) Reset() {
	*x = ENIInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ENIInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ENIInfo) ProtoMessage() {}

func (x *ENIInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ENIInfo.ProtoReflect.Descriptor instead.
func (*ENIInfo) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{4}
}

func (x *ENIInfo) GetMAC() string {
	if x != nil {
		return x.MAC
	}
	return ""
}

func (x *ENIInfo) GetTrunk() bool {
	if x != nil {
		return x.Trunk
	}
	return false
}

// VETH Basic
type Pod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ingress uint64 `protobuf:"varint,1,opt,name=Ingress,proto3" json:"Ingress,omitempty"`
	Egress  uint64 `protobuf:"varint,2,opt,name=Egress,proto3" json:"Egress,omitempty"`
}

func (x *Pod) Reset() {
	*x = Pod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pod) ProtoMessage() {}

func (x *Pod) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pod.ProtoReflect.Descriptor instead.
func (*Pod) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{5}
}

func (x *Pod) GetIngress() uint64 {
	if x != nil {
		return x.Ingress
	}
	return 0
}

func (x *Pod) GetEgress() uint64 {
	if x != nil {
		return x.Egress
	}
	return 0
}

type ReleaseIPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	K8SPodName             string `protobuf:"bytes,1,opt,name=K8sPodName,proto3" json:"K8sPodName,omitempty"`
	K8SPodNamespace        string `protobuf:"bytes,2,opt,name=K8sPodNamespace,proto3" json:"K8sPodNamespace,omitempty"`
	K8SPodInfraContainerId string `protobuf:"bytes,3,opt,name=K8sPodInfraContainerId,proto3" json:"K8sPodInfraContainerId,omitempty"`
	IPType                 IPType `protobuf:"varint,4,opt,name=AllocationType,proto3,enum=rpc.AllocationType" json:"AllocationType,omitempty"`
	IPv4Addr               *IPSet `protobuf:"bytes,5,opt,name=IPv4Addr,proto3" json:"IPv4Addr,omitempty"`
	MacAddr                string `protobuf:"bytes,6,opt,name=MacAddr,proto3" json:"MacAddr,omitempty"`
	Reason                 string `protobuf:"bytes,7,opt,name=Reason,proto3" json:"Reason,omitempty"`
}

func (x *ReleaseIPRequest) Reset() {
	*x = ReleaseIPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseIPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseIPRequest) ProtoMessage() {}

func (x *ReleaseIPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseIPRequest.ProtoReflect.Descriptor instead.
func (*ReleaseIPRequest) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{6}
}

func (x *ReleaseIPRequest) GetK8SPodName() string {
	if x != nil {
		return x.K8SPodName
	}
	return ""
}

func (x *ReleaseIPRequest) GetK8SPodNamespace() string {
	if x != nil {
		return x.K8SPodNamespace
	}
	return ""
}

func (x *ReleaseIPRequest) GetK8SPodInfraContainerId() string {
	if x != nil {
		return x.K8SPodInfraContainerId
	}
	return ""
}

func (x *ReleaseIPRequest) GetIPType() IPType {
	if x != nil {
		return x.IPType
	}
	return IPType_TypeVPCIP
}

func (x *ReleaseIPRequest) GetIPv4Addr() *IPSet {
	if x != nil {
		return x.IPv4Addr
	}
	return nil
}

func (x *ReleaseIPRequest) GetMacAddr() string {
	if x != nil {
		return x.MacAddr
	}
	return ""
}

func (x *ReleaseIPRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type ReleaseIPReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success      bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	IPv4Addr     *IPSet `protobuf:"bytes,2,opt,name=IPv4Addr,proto3" json:"IPv4Addr,omitempty"`
	DeviceNumber int32  `protobuf:"varint,3,opt,name=DeviceNumber,proto3" json:"DeviceNumber,omitempty"`
	IPv4         bool   `protobuf:"varint,4,opt,name=IPv4,proto3" json:"IPv4,omitempty"`
	IPv6         bool   `protobuf:"varint,5,opt,name=IPv6,proto3" json:"IPv6,omitempty"`
}

func (x *ReleaseIPReply) Reset() {
	*x = ReleaseIPReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseIPReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseIPReply) ProtoMessage() {}

func (x *ReleaseIPReply) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseIPReply.ProtoReflect.Descriptor instead.
func (*ReleaseIPReply) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{7}
}

func (x *ReleaseIPReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ReleaseIPReply) GetIPv4Addr() *IPSet {
	if x != nil {
		return x.IPv4Addr
	}
	return nil
}

func (x *ReleaseIPReply) GetDeviceNumber() int32 {
	if x != nil {
		return x.DeviceNumber
	}
	return 0
}

func (x *ReleaseIPReply) GetIPv4() bool {
	if x != nil {
		return x.IPv4
	}
	return false
}

func (x *ReleaseIPReply) GetIPv6() bool {
	if x != nil {
		return x.IPv6
	}
	return false
}

type GetInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	K8SPodName             string `protobuf:"bytes,1,opt,name=K8sPodName,proto3" json:"K8sPodName,omitempty"`
	K8SPodNamespace        string `protobuf:"bytes,2,opt,name=K8sPodNamespace,proto3" json:"K8sPodNamespace,omitempty"`
	K8SPodInfraContainerId string `protobuf:"bytes,3,opt,name=K8sPodInfraContainerId,proto3" json:"K8sPodInfraContainerId,omitempty"`
}

func (x *GetInfoRequest) Reset() {
	*x = GetInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInfoRequest) ProtoMessage() {}

func (x *GetInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInfoRequest.ProtoReflect.Descriptor instead.
func (*GetInfoRequest) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{8}
}

func (x *GetInfoRequest) GetK8SPodName() string {
	if x != nil {
		return x.K8SPodName
	}
	return ""
}

func (x *GetInfoRequest) GetK8SPodNamespace() string {
	if x != nil {
		return x.K8SPodNamespace
	}
	return ""
}

func (x *GetInfoRequest) GetK8SPodInfraContainerId() string {
	if x != nil {
		return x.K8SPodInfraContainerId
	}
	return ""
}

type GetInfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IPType    IPType     `protobuf:"varint,1,opt,name=AllocationType,proto3,enum=rpc.AllocationType" json:"AllocationType,omitempty"`
	BasicInfo *BasicInfo `protobuf:"bytes,2,opt,name=BasicInfo,proto3" json:"BasicInfo,omitempty"`
	ENIInfo   *ENIInfo   `protobuf:"bytes,3,opt,name=ENIInfo,proto3" json:"ENIInfo,omitempty"`
	Pod       *Pod       `protobuf:"bytes,4,opt,name=Pod,proto3" json:"Pod,omitempty"`
	IPv4      bool       `protobuf:"varint,5,opt,name=IPv4,proto3" json:"IPv4,omitempty"`
	IPv6      bool       `protobuf:"varint,6,opt,name=IPv6,proto3" json:"IPv6,omitempty"`
}

func (x *GetInfoReply) Reset() {
	*x = GetInfoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInfoReply) ProtoMessage() {}

func (x *GetInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInfoReply.ProtoReflect.Descriptor instead.
func (*GetInfoReply) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{9}
}

func (x *GetInfoReply) GetIPType() IPType {
	if x != nil {
		return x.IPType
	}
	return IPType_TypeVPCIP
}

func (x *GetInfoReply) GetBasicInfo() *BasicInfo {
	if x != nil {
		return x.BasicInfo
	}
	return nil
}

func (x *GetInfoReply) GetENIInfo() *ENIInfo {
	if x != nil {
		return x.ENIInfo
	}
	return nil
}

func (x *GetInfoReply) GetPod() *Pod {
	if x != nil {
		return x.Pod
	}
	return nil
}

func (x *GetInfoReply) GetIPv4() bool {
	if x != nil {
		return x.IPv4
	}
	return false
}

func (x *GetInfoReply) GetIPv6() bool {
	if x != nil {
		return x.IPv6
	}
	return false
}

type EventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventTarget     EventTarget `protobuf:"varint,1,opt,name=EventTarget,proto3,enum=rpc.EventTarget" json:"EventTarget,omitempty"`
	K8SPodName      string      `protobuf:"bytes,2,opt,name=K8sPodName,proto3" json:"K8sPodName,omitempty"`
	K8SPodNamespace string      `protobuf:"bytes,3,opt,name=K8sPodNamespace,proto3" json:"K8sPodNamespace,omitempty"`
	EventType       EventType   `protobuf:"varint,4,opt,name=EventType,proto3,enum=rpc.EventType" json:"EventType,omitempty"`
	Reason          string      `protobuf:"bytes,5,opt,name=Reason,proto3" json:"Reason,omitempty"`
	Message         string      `protobuf:"bytes,6,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *EventRequest) Reset() {
	*x = EventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRequest) ProtoMessage() {}

func (x *EventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRequest.ProtoReflect.Descriptor instead.
func (*EventRequest) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{10}
}

func (x *EventRequest) GetEventTarget() EventTarget {
	if x != nil {
		return x.EventTarget
	}
	return EventTarget_EventTargetNode
}

func (x *EventRequest) GetK8SPodName() string {
	if x != nil {
		return x.K8SPodName
	}
	return ""
}

func (x *EventRequest) GetK8SPodNamespace() string {
	if x != nil {
		return x.K8SPodNamespace
	}
	return ""
}

func (x *EventRequest) GetEventType() EventType {
	if x != nil {
		return x.EventType
	}
	return EventType_EventTypeNormal
}

func (x *EventRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *EventRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type EventReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Succeed bool   `protobuf:"varint,1,opt,name=Succeed,proto3" json:"Succeed,omitempty"`
	Error   string `protobuf:"bytes,2,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *EventReply) Reset() {
	*x = EventReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventReply) ProtoMessage() {}

func (x *EventReply) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventReply.ProtoReflect.Descriptor instead.
func (*EventReply) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{11}
}

func (x *EventReply) GetSucceed() bool {
	if x != nil {
		return x.Succeed
	}
	return false
}

func (x *EventReply) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

var File_rpc_proto protoreflect.FileDescriptor

var file_rpc_proto_rawDesc = []byte{
	0x0a, 0x09, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x72, 0x70, 0x63,
	0x22, 0x2f, 0x0a, 0x05, 0x49, 0x50, 0x53, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x50, 0x76,
	0x34, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x49, 0x50, 0x76, 0x34, 0x12, 0x12, 0x0a,
	0x04, 0x49, 0x50, 0x76, 0x36, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x49, 0x50, 0x76,
	0x36, 0x22, 0xc0, 0x01, 0x0a, 0x0e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x49, 0x50, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x4b, 0x38, 0x73, 0x50, 0x6f, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4b, 0x38, 0x73, 0x50, 0x6f, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x4b, 0x38, 0x73, 0x50, 0x6f, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4b,
	0x38, 0x73, 0x50, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x36,
	0x0a, 0x16, 0x4b, 0x38, 0x73, 0x50, 0x6f, 0x64, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16,
	0x4b, 0x38, 0x73, 0x50, 0x6f, 0x64, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x65, 0x74, 0x6e, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x65, 0x74, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x49, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x49, 0x66,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0xe7, 0x01, 0x0a, 0x0c, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x49, 0x50,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x23, 0x0a, 0x06, 0x49, 0x50, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x50, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x49, 0x50,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x09, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x26, 0x0a, 0x07, 0x45, 0x4e, 0x49, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x4e, 0x49, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x07, 0x45, 0x4e, 0x49, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x03, 0x50, 0x6f,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6f,
	0x64, 0x52, 0x03, 0x50, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x50, 0x76, 0x34, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x49, 0x50, 0x76, 0x34, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x50,
	0x76, 0x36, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x49, 0x50, 0x76, 0x36, 0x22, 0xab,
	0x01, 0x0a, 0x09, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x05,
	0x50, 0x6f, 0x64, 0x49, 0x50, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x49, 0x50, 0x53, 0x65, 0x74, 0x52, 0x05, 0x50, 0x6f, 0x64, 0x49, 0x50, 0x12, 0x24,
	0x0a, 0x07, 0x50, 0x6f, 0x64, 0x43, 0x49, 0x44, 0x52, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x50, 0x53, 0x65, 0x74, 0x52, 0x07, 0x50, 0x6f, 0x64,
	0x43, 0x49, 0x44, 0x52, 0x12, 0x28, 0x0a, 0x09, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49,
	0x50, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x50,
	0x53, 0x65, 0x74, 0x52, 0x09, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x50, 0x12, 0x2c,
	0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x49, 0x44, 0x52, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x50, 0x53, 0x65, 0x74, 0x52,
	0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x49, 0x44, 0x52, 0x22, 0x31, 0x0a, 0x07,
	0x45, 0x4e, 0x49, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x41, 0x43, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4d, 0x41, 0x43, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x72, 0x75,
	0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x22,
	0x37, 0x0a, 0x03, 0x50, 0x6f, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0x93, 0x02, 0x0a, 0x10, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x49, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x4b, 0x38, 0x73, 0x50, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x4b, 0x38, 0x73, 0x50, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x4b, 0x38, 0x73, 0x50, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4b, 0x38, 0x73, 0x50, 0x6f, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x4b, 0x38, 0x73, 0x50, 0x6f,
	0x64, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x4b, 0x38, 0x73, 0x50, 0x6f, 0x64, 0x49,
	0x6e, 0x66, 0x72, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x06, 0x49, 0x50, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x50, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x49, 0x50,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x08, 0x49, 0x50, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x50, 0x53,
	0x65, 0x74, 0x52, 0x08, 0x49, 0x50, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d,
	0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x9e,
	0x01, 0x0a, 0x0e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x50, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x08, 0x49,
	0x50, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x49, 0x50, 0x53, 0x65, 0x74, 0x52, 0x08, 0x49, 0x50, 0x76, 0x34, 0x41,
	0x64, 0x64, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x50, 0x76, 0x34, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x49, 0x50, 0x76, 0x34, 0x12, 0x12, 0x0a, 0x04, 0x49,
	0x50, 0x76, 0x36, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x49, 0x50, 0x76, 0x36, 0x22,
	0x92, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x4b, 0x38, 0x73, 0x50, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4b, 0x38, 0x73, 0x50, 0x6f, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x4b, 0x38, 0x73, 0x50, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4b, 0x38, 0x73,
	0x50, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x16,
	0x4b, 0x38, 0x73, 0x50, 0x6f, 0x64, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x4b, 0x38,
	0x73, 0x50, 0x6f, 0x64, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x49, 0x64, 0x22, 0xcd, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x23, 0x0a, 0x06, 0x49, 0x50, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x50, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x06, 0x49, 0x50, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x09, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x07, 0x45, 0x4e, 0x49, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x45, 0x4e, 0x49, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x45, 0x4e, 0x49, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1a, 0x0a, 0x03, 0x50, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x50, 0x6f, 0x64, 0x52, 0x03, 0x50, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x49, 0x50, 0x76, 0x34, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x49, 0x50, 0x76, 0x34,
	0x12, 0x12, 0x0a, 0x04, 0x49, 0x50, 0x76, 0x36, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x49, 0x50, 0x76, 0x36, 0x22, 0xec, 0x01, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x0b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x0b, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x4b, 0x38, 0x73,
	0x50, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4b,
	0x38, 0x73, 0x50, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x4b, 0x38, 0x73,
	0x50, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x4b, 0x38, 0x73, 0x50, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x3c, 0x0a, 0x0a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x2a, 0x3b, 0x0a, 0x06, 0x49, 0x50, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x54,
	0x79, 0x70, 0x65, 0x56, 0x50, 0x43, 0x49, 0x50, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x79,
	0x70, 0x65, 0x56, 0x50, 0x43, 0x45, 0x4e, 0x49, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x79,
	0x70, 0x65, 0x45, 0x4e, 0x49, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x49, 0x50, 0x10, 0x02, 0x2a, 0x36,
	0x0a, 0x0b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x13, 0x0a,
	0x0f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x50, 0x6f, 0x64, 0x10, 0x01, 0x2a, 0x36, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x32, 0xeb,
	0x01, 0x0a, 0x0d, 0x54, 0x65, 0x72, 0x77, 0x61, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x12, 0x33, 0x0a, 0x07, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x49, 0x50, 0x12, 0x13, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x49, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x11, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x49, 0x50, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x09, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x49, 0x50, 0x12, 0x15, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x49, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x50, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x35, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x49, 0x50, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x13, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x11, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x0b, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x11, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x08, 0x5a, 0x06,
	0x2e, 0x2f, 0x3b, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rpc_proto_rawDescOnce sync.Once
	file_rpc_proto_rawDescData = file_rpc_proto_rawDesc
)

func file_rpc_proto_rawDescGZIP() []byte {
	file_rpc_proto_rawDescOnce.Do(func() {
		file_rpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_rpc_proto_rawDescData)
	})
	return file_rpc_proto_rawDescData
}

var file_rpc_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_rpc_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_rpc_proto_goTypes = []interface{}{
	(IPType)(0),              // 0: rpc.AllocationType
	(EventTarget)(0),         // 1: rpc.EventTarget
	(EventType)(0),           // 2: rpc.EventType
	(*IPSet)(nil),            // 3: rpc.IPSet
	(*AllocIPRequest)(nil),   // 4: rpc.AllocIPRequest
	(*AllocIPReply)(nil),     // 5: rpc.AllocIPReply
	(*BasicInfo)(nil),        // 6: rpc.BasicInfo
	(*ENIInfo)(nil),          // 7: rpc.ENIInfo
	(*Pod)(nil),              // 8: rpc.Pod
	(*ReleaseIPRequest)(nil), // 9: rpc.ReleaseIPRequest
	(*ReleaseIPReply)(nil),   // 10: rpc.ReleaseIPReply
	(*GetInfoRequest)(nil),   // 11: rpc.GetInfoRequest
	(*GetInfoReply)(nil),     // 12: rpc.GetInfoReply
	(*EventRequest)(nil),     // 13: rpc.EventRequest
	(*EventReply)(nil),       // 14: rpc.EventReply
}
var file_rpc_proto_depIdxs = []int32{
	0,  // 0: rpc.AllocIPReply.AllocationType:type_name -> rpc.AllocationType
	6,  // 1: rpc.AllocIPReply.BasicInfo:type_name -> rpc.BasicInfo
	7,  // 2: rpc.AllocIPReply.ENIInfo:type_name -> rpc.ENIInfo
	8,  // 3: rpc.AllocIPReply.Pod:type_name -> rpc.Pod
	3,  // 4: rpc.BasicInfo.PodIP:type_name -> rpc.IPSet
	3,  // 5: rpc.BasicInfo.PodCIDR:type_name -> rpc.IPSet
	3,  // 6: rpc.BasicInfo.GatewayIP:type_name -> rpc.IPSet
	3,  // 7: rpc.BasicInfo.ServiceCIDR:type_name -> rpc.IPSet
	0,  // 8: rpc.ReleaseIPRequest.AllocationType:type_name -> rpc.AllocationType
	3,  // 9: rpc.ReleaseIPRequest.IPv4Addr:type_name -> rpc.IPSet
	3,  // 10: rpc.ReleaseIPReply.IPv4Addr:type_name -> rpc.IPSet
	0,  // 11: rpc.GetInfoReply.AllocationType:type_name -> rpc.AllocationType
	6,  // 12: rpc.GetInfoReply.BasicInfo:type_name -> rpc.BasicInfo
	7,  // 13: rpc.GetInfoReply.ENIInfo:type_name -> rpc.ENIInfo
	8,  // 14: rpc.GetInfoReply.Pod:type_name -> rpc.Pod
	1,  // 15: rpc.EventRequest.EventTarget:type_name -> rpc.EventTarget
	2,  // 16: rpc.EventRequest.EventType:type_name -> rpc.EventType
	4,  // 17: rpc.TerwayBackend.AllocIP:input_type -> rpc.AllocIPRequest
	9,  // 18: rpc.TerwayBackend.ReleaseIP:input_type -> rpc.ReleaseIPRequest
	11, // 19: rpc.TerwayBackend.GetIPInfo:input_type -> rpc.GetInfoRequest
	13, // 20: rpc.TerwayBackend.RecordEvent:input_type -> rpc.EventRequest
	5,  // 21: rpc.TerwayBackend.AllocIP:output_type -> rpc.AllocIPReply
	10, // 22: rpc.TerwayBackend.ReleaseIP:output_type -> rpc.ReleaseIPReply
	12, // 23: rpc.TerwayBackend.GetIPInfo:output_type -> rpc.GetInfoReply
	14, // 24: rpc.TerwayBackend.RecordEvent:output_type -> rpc.EventReply
	21, // [21:25] is the sub-list for method output_type
	17, // [17:21] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_rpc_proto_init() }
func file_rpc_proto_init() {
	if File_rpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllocIPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllocIPReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasicInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ENIInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseIPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseIPReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInfoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rpc_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rpc_proto_goTypes,
		DependencyIndexes: file_rpc_proto_depIdxs,
		EnumInfos:         file_rpc_proto_enumTypes,
		MessageInfos:      file_rpc_proto_msgTypes,
	}.Build()
	File_rpc_proto = out.File
	file_rpc_proto_rawDesc = nil
	file_rpc_proto_goTypes = nil
	file_rpc_proto_depIdxs = nil
}
