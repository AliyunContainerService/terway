// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type IPType int32

const (
	IPType_TypeVPCIP      IPType = 0
	IPType_TypeVPCENI     IPType = 1
	IPType_TypeManagedK8S IPType = 2
	IPType_TypeENIMultiIP IPType = 3
)

var IPType_name = map[int32]string{
	0: "TypeVPCIP",
	1: "TypeVPCENI",
	2: "TypeManagedK8S",
	3: "TypeENIMultiIP",
}
var IPType_value = map[string]int32{
	"TypeVPCIP":      0,
	"TypeVPCENI":     1,
	"TypeManagedK8S": 2,
	"TypeENIMultiIP": 3,
}

func (x IPType) String() string {
	return proto.EnumName(IPType_name, int32(x))
}
func (IPType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_rpc_22751a12a1210b22, []int{0}
}

type AllocIPRequest struct {
	K8SPodName             string   `protobuf:"bytes,1,opt,name=K8sPodName" json:"K8sPodName,omitempty"`
	K8SPodNamespace        string   `protobuf:"bytes,2,opt,name=K8sPodNamespace" json:"K8sPodNamespace,omitempty"`
	K8SPodInfraContainerId string   `protobuf:"bytes,3,opt,name=K8sPodInfraContainerId" json:"K8sPodInfraContainerId,omitempty"`
	Netns                  string   `protobuf:"bytes,4,opt,name=Netns" json:"Netns,omitempty"`
	IfName                 string   `protobuf:"bytes,5,opt,name=IfName" json:"IfName,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *AllocIPRequest) Reset()         { *m = AllocIPRequest{} }
func (m *AllocIPRequest) String() string { return proto.CompactTextString(m) }
func (*AllocIPRequest) ProtoMessage()    {}
func (*AllocIPRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpc_22751a12a1210b22, []int{0}
}
func (m *AllocIPRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllocIPRequest.Unmarshal(m, b)
}
func (m *AllocIPRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllocIPRequest.Marshal(b, m, deterministic)
}
func (dst *AllocIPRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllocIPRequest.Merge(dst, src)
}
func (m *AllocIPRequest) XXX_Size() int {
	return xxx_messageInfo_AllocIPRequest.Size(m)
}
func (m *AllocIPRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AllocIPRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AllocIPRequest proto.InternalMessageInfo

func (m *AllocIPRequest) GetK8SPodName() string {
	if m != nil {
		return m.K8SPodName
	}
	return ""
}

func (m *AllocIPRequest) GetK8SPodNamespace() string {
	if m != nil {
		return m.K8SPodNamespace
	}
	return ""
}

func (m *AllocIPRequest) GetK8SPodInfraContainerId() string {
	if m != nil {
		return m.K8SPodInfraContainerId
	}
	return ""
}

func (m *AllocIPRequest) GetNetns() string {
	if m != nil {
		return m.Netns
	}
	return ""
}

func (m *AllocIPRequest) GetIfName() string {
	if m != nil {
		return m.IfName
	}
	return ""
}

// VETH Basic
type Pod struct {
	Ingress              uint64   `protobuf:"varint,1,opt,name=Ingress" json:"Ingress,omitempty"`
	Egress               uint64   `protobuf:"varint,2,opt,name=Egress" json:"Egress,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Pod) Reset()         { *m = Pod{} }
func (m *Pod) String() string { return proto.CompactTextString(m) }
func (*Pod) ProtoMessage()    {}
func (*Pod) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpc_22751a12a1210b22, []int{1}
}
func (m *Pod) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Pod.Unmarshal(m, b)
}
func (m *Pod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Pod.Marshal(b, m, deterministic)
}
func (dst *Pod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pod.Merge(dst, src)
}
func (m *Pod) XXX_Size() int {
	return xxx_messageInfo_Pod.Size(m)
}
func (m *Pod) XXX_DiscardUnknown() {
	xxx_messageInfo_Pod.DiscardUnknown(m)
}

var xxx_messageInfo_Pod proto.InternalMessageInfo

func (m *Pod) GetIngress() uint64 {
	if m != nil {
		return m.Ingress
	}
	return 0
}

func (m *Pod) GetEgress() uint64 {
	if m != nil {
		return m.Egress
	}
	return 0
}

// VPC route veth
type VPCIP struct {
	PodConfig            *Pod     `protobuf:"bytes,1,opt,name=PodConfig" json:"PodConfig,omitempty"`
	NodeCidr             string   `protobuf:"bytes,2,opt,name=NodeCidr" json:"NodeCidr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VPCIP) Reset()         { *m = VPCIP{} }
func (m *VPCIP) String() string { return proto.CompactTextString(m) }
func (*VPCIP) ProtoMessage()    {}
func (*VPCIP) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpc_22751a12a1210b22, []int{2}
}
func (m *VPCIP) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VPCIP.Unmarshal(m, b)
}
func (m *VPCIP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VPCIP.Marshal(b, m, deterministic)
}
func (dst *VPCIP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VPCIP.Merge(dst, src)
}
func (m *VPCIP) XXX_Size() int {
	return xxx_messageInfo_VPCIP.Size(m)
}
func (m *VPCIP) XXX_DiscardUnknown() {
	xxx_messageInfo_VPCIP.DiscardUnknown(m)
}

var xxx_messageInfo_VPCIP proto.InternalMessageInfo

func (m *VPCIP) GetPodConfig() *Pod {
	if m != nil {
		return m.PodConfig
	}
	return nil
}

func (m *VPCIP) GetNodeCidr() string {
	if m != nil {
		return m.NodeCidr
	}
	return ""
}

// ENI Basic
type ENI struct {
	IPv4Addr             string   `protobuf:"bytes,1,opt,name=IPv4Addr" json:"IPv4Addr,omitempty"`
	IPv4Subnet           string   `protobuf:"bytes,2,opt,name=IPv4Subnet" json:"IPv4Subnet,omitempty"`
	MacAddr              string   `protobuf:"bytes,3,opt,name=MacAddr" json:"MacAddr,omitempty"`
	Gateway              string   `protobuf:"bytes,4,opt,name=Gateway" json:"Gateway,omitempty"`
	DeviceNumber         int32    `protobuf:"varint,5,opt,name=DeviceNumber" json:"DeviceNumber,omitempty"`
	PrimaryIPv4Addr      string   `protobuf:"bytes,6,opt,name=PrimaryIPv4Addr" json:"PrimaryIPv4Addr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ENI) Reset()         { *m = ENI{} }
func (m *ENI) String() string { return proto.CompactTextString(m) }
func (*ENI) ProtoMessage()    {}
func (*ENI) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpc_22751a12a1210b22, []int{3}
}
func (m *ENI) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ENI.Unmarshal(m, b)
}
func (m *ENI) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ENI.Marshal(b, m, deterministic)
}
func (dst *ENI) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ENI.Merge(dst, src)
}
func (m *ENI) XXX_Size() int {
	return xxx_messageInfo_ENI.Size(m)
}
func (m *ENI) XXX_DiscardUnknown() {
	xxx_messageInfo_ENI.DiscardUnknown(m)
}

var xxx_messageInfo_ENI proto.InternalMessageInfo

func (m *ENI) GetIPv4Addr() string {
	if m != nil {
		return m.IPv4Addr
	}
	return ""
}

func (m *ENI) GetIPv4Subnet() string {
	if m != nil {
		return m.IPv4Subnet
	}
	return ""
}

func (m *ENI) GetMacAddr() string {
	if m != nil {
		return m.MacAddr
	}
	return ""
}

func (m *ENI) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

func (m *ENI) GetDeviceNumber() int32 {
	if m != nil {
		return m.DeviceNumber
	}
	return 0
}

func (m *ENI) GetPrimaryIPv4Addr() string {
	if m != nil {
		return m.PrimaryIPv4Addr
	}
	return ""
}

// Dedicated ENI
type VPCENI struct {
	EniConfig            *ENI     `protobuf:"bytes,1,opt,name=EniConfig" json:"EniConfig,omitempty"`
	PodConfig            *Pod     `protobuf:"bytes,2,opt,name=PodConfig" json:"PodConfig,omitempty"`
	ServiceCidr          string   `protobuf:"bytes,3,opt,name=ServiceCidr" json:"ServiceCidr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VPCENI) Reset()         { *m = VPCENI{} }
func (m *VPCENI) String() string { return proto.CompactTextString(m) }
func (*VPCENI) ProtoMessage()    {}
func (*VPCENI) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpc_22751a12a1210b22, []int{4}
}
func (m *VPCENI) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VPCENI.Unmarshal(m, b)
}
func (m *VPCENI) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VPCENI.Marshal(b, m, deterministic)
}
func (dst *VPCENI) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VPCENI.Merge(dst, src)
}
func (m *VPCENI) XXX_Size() int {
	return xxx_messageInfo_VPCENI.Size(m)
}
func (m *VPCENI) XXX_DiscardUnknown() {
	xxx_messageInfo_VPCENI.DiscardUnknown(m)
}

var xxx_messageInfo_VPCENI proto.InternalMessageInfo

func (m *VPCENI) GetEniConfig() *ENI {
	if m != nil {
		return m.EniConfig
	}
	return nil
}

func (m *VPCENI) GetPodConfig() *Pod {
	if m != nil {
		return m.PodConfig
	}
	return nil
}

func (m *VPCENI) GetServiceCidr() string {
	if m != nil {
		return m.ServiceCidr
	}
	return ""
}

// Managed k8s ENI
type ManagedK8SENI struct {
	EniConfig            *ENI     `protobuf:"bytes,1,opt,name=EniConfig" json:"EniConfig,omitempty"`
	PodConfig            *Pod     `protobuf:"bytes,2,opt,name=PodConfig" json:"PodConfig,omitempty"`
	PodCidr              string   `protobuf:"bytes,3,opt,name=PodCidr" json:"PodCidr,omitempty"`
	VpcCidr              string   `protobuf:"bytes,4,opt,name=VpcCidr" json:"VpcCidr,omitempty"`
	NodeCidr             string   `protobuf:"bytes,5,opt,name=NodeCidr" json:"NodeCidr,omitempty"`
	ServiceCidr          string   `protobuf:"bytes,6,opt,name=ServiceCidr" json:"ServiceCidr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ManagedK8SENI) Reset()         { *m = ManagedK8SENI{} }
func (m *ManagedK8SENI) String() string { return proto.CompactTextString(m) }
func (*ManagedK8SENI) ProtoMessage()    {}
func (*ManagedK8SENI) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpc_22751a12a1210b22, []int{5}
}
func (m *ManagedK8SENI) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ManagedK8SENI.Unmarshal(m, b)
}
func (m *ManagedK8SENI) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ManagedK8SENI.Marshal(b, m, deterministic)
}
func (dst *ManagedK8SENI) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ManagedK8SENI.Merge(dst, src)
}
func (m *ManagedK8SENI) XXX_Size() int {
	return xxx_messageInfo_ManagedK8SENI.Size(m)
}
func (m *ManagedK8SENI) XXX_DiscardUnknown() {
	xxx_messageInfo_ManagedK8SENI.DiscardUnknown(m)
}

var xxx_messageInfo_ManagedK8SENI proto.InternalMessageInfo

func (m *ManagedK8SENI) GetEniConfig() *ENI {
	if m != nil {
		return m.EniConfig
	}
	return nil
}

func (m *ManagedK8SENI) GetPodConfig() *Pod {
	if m != nil {
		return m.PodConfig
	}
	return nil
}

func (m *ManagedK8SENI) GetPodCidr() string {
	if m != nil {
		return m.PodCidr
	}
	return ""
}

func (m *ManagedK8SENI) GetVpcCidr() string {
	if m != nil {
		return m.VpcCidr
	}
	return ""
}

func (m *ManagedK8SENI) GetNodeCidr() string {
	if m != nil {
		return m.NodeCidr
	}
	return ""
}

func (m *ManagedK8SENI) GetServiceCidr() string {
	if m != nil {
		return m.ServiceCidr
	}
	return ""
}

// ENI Multiple IP
type ENIMultiIP struct {
	EniConfig            *ENI     `protobuf:"bytes,1,opt,name=EniConfig" json:"EniConfig,omitempty"`
	PodConfig            *Pod     `protobuf:"bytes,2,opt,name=PodConfig" json:"PodConfig,omitempty"`
	ServiceCidr          string   `protobuf:"bytes,3,opt,name=ServiceCidr" json:"ServiceCidr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ENIMultiIP) Reset()         { *m = ENIMultiIP{} }
func (m *ENIMultiIP) String() string { return proto.CompactTextString(m) }
func (*ENIMultiIP) ProtoMessage()    {}
func (*ENIMultiIP) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpc_22751a12a1210b22, []int{6}
}
func (m *ENIMultiIP) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ENIMultiIP.Unmarshal(m, b)
}
func (m *ENIMultiIP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ENIMultiIP.Marshal(b, m, deterministic)
}
func (dst *ENIMultiIP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ENIMultiIP.Merge(dst, src)
}
func (m *ENIMultiIP) XXX_Size() int {
	return xxx_messageInfo_ENIMultiIP.Size(m)
}
func (m *ENIMultiIP) XXX_DiscardUnknown() {
	xxx_messageInfo_ENIMultiIP.DiscardUnknown(m)
}

var xxx_messageInfo_ENIMultiIP proto.InternalMessageInfo

func (m *ENIMultiIP) GetEniConfig() *ENI {
	if m != nil {
		return m.EniConfig
	}
	return nil
}

func (m *ENIMultiIP) GetPodConfig() *Pod {
	if m != nil {
		return m.PodConfig
	}
	return nil
}

func (m *ENIMultiIP) GetServiceCidr() string {
	if m != nil {
		return m.ServiceCidr
	}
	return ""
}

type AllocIPReply struct {
	Success bool   `protobuf:"varint,1,opt,name=Success" json:"Success,omitempty"`
	IPType  IPType `protobuf:"varint,2,opt,name=IPType,enum=rpc.IPType" json:"IPType,omitempty"`
	// Types that are valid to be assigned to NetworkInfo:
	//	*AllocIPReply_VpcIp
	//	*AllocIPReply_VpcEni
	//	*AllocIPReply_ManagedK8S
	//	*AllocIPReply_ENIMultiIP
	NetworkInfo          isAllocIPReply_NetworkInfo `protobuf_oneof:"NetworkInfo"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *AllocIPReply) Reset()         { *m = AllocIPReply{} }
func (m *AllocIPReply) String() string { return proto.CompactTextString(m) }
func (*AllocIPReply) ProtoMessage()    {}
func (*AllocIPReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpc_22751a12a1210b22, []int{7}
}
func (m *AllocIPReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllocIPReply.Unmarshal(m, b)
}
func (m *AllocIPReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllocIPReply.Marshal(b, m, deterministic)
}
func (dst *AllocIPReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllocIPReply.Merge(dst, src)
}
func (m *AllocIPReply) XXX_Size() int {
	return xxx_messageInfo_AllocIPReply.Size(m)
}
func (m *AllocIPReply) XXX_DiscardUnknown() {
	xxx_messageInfo_AllocIPReply.DiscardUnknown(m)
}

var xxx_messageInfo_AllocIPReply proto.InternalMessageInfo

type isAllocIPReply_NetworkInfo interface {
	isAllocIPReply_NetworkInfo()
}

type AllocIPReply_VpcIp struct {
	VpcIp *VPCIP `protobuf:"bytes,3,opt,name=VpcIp,oneof"`
}
type AllocIPReply_VpcEni struct {
	VpcEni *VPCENI `protobuf:"bytes,4,opt,name=VpcEni,oneof"`
}
type AllocIPReply_ManagedK8S struct {
	ManagedK8S *ManagedK8SENI `protobuf:"bytes,5,opt,name=ManagedK8S,oneof"`
}
type AllocIPReply_ENIMultiIP struct {
	ENIMultiIP *ENIMultiIP `protobuf:"bytes,6,opt,name=ENIMultiIP,oneof"`
}

func (*AllocIPReply_VpcIp) isAllocIPReply_NetworkInfo()      {}
func (*AllocIPReply_VpcEni) isAllocIPReply_NetworkInfo()     {}
func (*AllocIPReply_ManagedK8S) isAllocIPReply_NetworkInfo() {}
func (*AllocIPReply_ENIMultiIP) isAllocIPReply_NetworkInfo() {}

func (m *AllocIPReply) GetNetworkInfo() isAllocIPReply_NetworkInfo {
	if m != nil {
		return m.NetworkInfo
	}
	return nil
}

func (m *AllocIPReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *AllocIPReply) GetIPType() IPType {
	if m != nil {
		return m.IPType
	}
	return IPType_TypeVPCIP
}

func (m *AllocIPReply) GetVpcIp() *VPCIP {
	if x, ok := m.GetNetworkInfo().(*AllocIPReply_VpcIp); ok {
		return x.VpcIp
	}
	return nil
}

func (m *AllocIPReply) GetVpcEni() *VPCENI {
	if x, ok := m.GetNetworkInfo().(*AllocIPReply_VpcEni); ok {
		return x.VpcEni
	}
	return nil
}

func (m *AllocIPReply) GetManagedK8S() *ManagedK8SENI {
	if x, ok := m.GetNetworkInfo().(*AllocIPReply_ManagedK8S); ok {
		return x.ManagedK8S
	}
	return nil
}

func (m *AllocIPReply) GetENIMultiIP() *ENIMultiIP {
	if x, ok := m.GetNetworkInfo().(*AllocIPReply_ENIMultiIP); ok {
		return x.ENIMultiIP
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*AllocIPReply) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _AllocIPReply_OneofMarshaler, _AllocIPReply_OneofUnmarshaler, _AllocIPReply_OneofSizer, []interface{}{
		(*AllocIPReply_VpcIp)(nil),
		(*AllocIPReply_VpcEni)(nil),
		(*AllocIPReply_ManagedK8S)(nil),
		(*AllocIPReply_ENIMultiIP)(nil),
	}
}

func _AllocIPReply_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*AllocIPReply)
	// NetworkInfo
	switch x := m.NetworkInfo.(type) {
	case *AllocIPReply_VpcIp:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.VpcIp); err != nil {
			return err
		}
	case *AllocIPReply_VpcEni:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.VpcEni); err != nil {
			return err
		}
	case *AllocIPReply_ManagedK8S:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ManagedK8S); err != nil {
			return err
		}
	case *AllocIPReply_ENIMultiIP:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ENIMultiIP); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AllocIPReply.NetworkInfo has unexpected type %T", x)
	}
	return nil
}

func _AllocIPReply_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*AllocIPReply)
	switch tag {
	case 3: // NetworkInfo.VpcIp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VPCIP)
		err := b.DecodeMessage(msg)
		m.NetworkInfo = &AllocIPReply_VpcIp{msg}
		return true, err
	case 4: // NetworkInfo.VpcEni
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VPCENI)
		err := b.DecodeMessage(msg)
		m.NetworkInfo = &AllocIPReply_VpcEni{msg}
		return true, err
	case 5: // NetworkInfo.ManagedK8S
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ManagedK8SENI)
		err := b.DecodeMessage(msg)
		m.NetworkInfo = &AllocIPReply_ManagedK8S{msg}
		return true, err
	case 6: // NetworkInfo.ENIMultiIP
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ENIMultiIP)
		err := b.DecodeMessage(msg)
		m.NetworkInfo = &AllocIPReply_ENIMultiIP{msg}
		return true, err
	default:
		return false, nil
	}
}

func _AllocIPReply_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*AllocIPReply)
	// NetworkInfo
	switch x := m.NetworkInfo.(type) {
	case *AllocIPReply_VpcIp:
		s := proto.Size(x.VpcIp)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AllocIPReply_VpcEni:
		s := proto.Size(x.VpcEni)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AllocIPReply_ManagedK8S:
		s := proto.Size(x.ManagedK8S)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AllocIPReply_ENIMultiIP:
		s := proto.Size(x.ENIMultiIP)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ReleaseIPRequest struct {
	K8SPodName             string   `protobuf:"bytes,1,opt,name=K8sPodName" json:"K8sPodName,omitempty"`
	K8SPodNamespace        string   `protobuf:"bytes,2,opt,name=K8sPodNamespace" json:"K8sPodNamespace,omitempty"`
	K8SPodInfraContainerId string   `protobuf:"bytes,3,opt,name=K8sPodInfraContainerId" json:"K8sPodInfraContainerId,omitempty"`
	IPType                 IPType   `protobuf:"varint,4,opt,name=IPType,enum=rpc.IPType" json:"IPType,omitempty"`
	IPv4Addr               string   `protobuf:"bytes,5,opt,name=IPv4Addr" json:"IPv4Addr,omitempty"`
	MacAddr                string   `protobuf:"bytes,6,opt,name=MacAddr" json:"MacAddr,omitempty"`
	Reason                 string   `protobuf:"bytes,7,opt,name=Reason" json:"Reason,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *ReleaseIPRequest) Reset()         { *m = ReleaseIPRequest{} }
func (m *ReleaseIPRequest) String() string { return proto.CompactTextString(m) }
func (*ReleaseIPRequest) ProtoMessage()    {}
func (*ReleaseIPRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpc_22751a12a1210b22, []int{8}
}
func (m *ReleaseIPRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReleaseIPRequest.Unmarshal(m, b)
}
func (m *ReleaseIPRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReleaseIPRequest.Marshal(b, m, deterministic)
}
func (dst *ReleaseIPRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReleaseIPRequest.Merge(dst, src)
}
func (m *ReleaseIPRequest) XXX_Size() int {
	return xxx_messageInfo_ReleaseIPRequest.Size(m)
}
func (m *ReleaseIPRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReleaseIPRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReleaseIPRequest proto.InternalMessageInfo

func (m *ReleaseIPRequest) GetK8SPodName() string {
	if m != nil {
		return m.K8SPodName
	}
	return ""
}

func (m *ReleaseIPRequest) GetK8SPodNamespace() string {
	if m != nil {
		return m.K8SPodNamespace
	}
	return ""
}

func (m *ReleaseIPRequest) GetK8SPodInfraContainerId() string {
	if m != nil {
		return m.K8SPodInfraContainerId
	}
	return ""
}

func (m *ReleaseIPRequest) GetIPType() IPType {
	if m != nil {
		return m.IPType
	}
	return IPType_TypeVPCIP
}

func (m *ReleaseIPRequest) GetIPv4Addr() string {
	if m != nil {
		return m.IPv4Addr
	}
	return ""
}

func (m *ReleaseIPRequest) GetMacAddr() string {
	if m != nil {
		return m.MacAddr
	}
	return ""
}

func (m *ReleaseIPRequest) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type ReleaseIPReply struct {
	Success              bool     `protobuf:"varint,1,opt,name=Success" json:"Success,omitempty"`
	IPv4Addr             string   `protobuf:"bytes,2,opt,name=IPv4Addr" json:"IPv4Addr,omitempty"`
	DeviceNumber         int32    `protobuf:"varint,3,opt,name=DeviceNumber" json:"DeviceNumber,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReleaseIPReply) Reset()         { *m = ReleaseIPReply{} }
func (m *ReleaseIPReply) String() string { return proto.CompactTextString(m) }
func (*ReleaseIPReply) ProtoMessage()    {}
func (*ReleaseIPReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpc_22751a12a1210b22, []int{9}
}
func (m *ReleaseIPReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReleaseIPReply.Unmarshal(m, b)
}
func (m *ReleaseIPReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReleaseIPReply.Marshal(b, m, deterministic)
}
func (dst *ReleaseIPReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReleaseIPReply.Merge(dst, src)
}
func (m *ReleaseIPReply) XXX_Size() int {
	return xxx_messageInfo_ReleaseIPReply.Size(m)
}
func (m *ReleaseIPReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ReleaseIPReply.DiscardUnknown(m)
}

var xxx_messageInfo_ReleaseIPReply proto.InternalMessageInfo

func (m *ReleaseIPReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *ReleaseIPReply) GetIPv4Addr() string {
	if m != nil {
		return m.IPv4Addr
	}
	return ""
}

func (m *ReleaseIPReply) GetDeviceNumber() int32 {
	if m != nil {
		return m.DeviceNumber
	}
	return 0
}

type GetInfoRequest struct {
	K8SPodName             string   `protobuf:"bytes,1,opt,name=K8sPodName" json:"K8sPodName,omitempty"`
	K8SPodNamespace        string   `protobuf:"bytes,2,opt,name=K8sPodNamespace" json:"K8sPodNamespace,omitempty"`
	K8SPodInfraContainerId string   `protobuf:"bytes,3,opt,name=K8sPodInfraContainerId" json:"K8sPodInfraContainerId,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *GetInfoRequest) Reset()         { *m = GetInfoRequest{} }
func (m *GetInfoRequest) String() string { return proto.CompactTextString(m) }
func (*GetInfoRequest) ProtoMessage()    {}
func (*GetInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpc_22751a12a1210b22, []int{10}
}
func (m *GetInfoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetInfoRequest.Unmarshal(m, b)
}
func (m *GetInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetInfoRequest.Marshal(b, m, deterministic)
}
func (dst *GetInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetInfoRequest.Merge(dst, src)
}
func (m *GetInfoRequest) XXX_Size() int {
	return xxx_messageInfo_GetInfoRequest.Size(m)
}
func (m *GetInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetInfoRequest proto.InternalMessageInfo

func (m *GetInfoRequest) GetK8SPodName() string {
	if m != nil {
		return m.K8SPodName
	}
	return ""
}

func (m *GetInfoRequest) GetK8SPodNamespace() string {
	if m != nil {
		return m.K8SPodNamespace
	}
	return ""
}

func (m *GetInfoRequest) GetK8SPodInfraContainerId() string {
	if m != nil {
		return m.K8SPodInfraContainerId
	}
	return ""
}

type GetInfoReply struct {
	IPType               IPType   `protobuf:"varint,1,opt,name=IPType,enum=rpc.IPType" json:"IPType,omitempty"`
	PodConfig            *Pod     `protobuf:"bytes,2,opt,name=PodConfig" json:"PodConfig,omitempty"`
	NodeCidr             string   `protobuf:"bytes,3,opt,name=NodeCidr" json:"NodeCidr,omitempty"`
	PodIP                string   `protobuf:"bytes,4,opt,name=PodIP" json:"PodIP,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetInfoReply) Reset()         { *m = GetInfoReply{} }
func (m *GetInfoReply) String() string { return proto.CompactTextString(m) }
func (*GetInfoReply) ProtoMessage()    {}
func (*GetInfoReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpc_22751a12a1210b22, []int{11}
}
func (m *GetInfoReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetInfoReply.Unmarshal(m, b)
}
func (m *GetInfoReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetInfoReply.Marshal(b, m, deterministic)
}
func (dst *GetInfoReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetInfoReply.Merge(dst, src)
}
func (m *GetInfoReply) XXX_Size() int {
	return xxx_messageInfo_GetInfoReply.Size(m)
}
func (m *GetInfoReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetInfoReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetInfoReply proto.InternalMessageInfo

func (m *GetInfoReply) GetIPType() IPType {
	if m != nil {
		return m.IPType
	}
	return IPType_TypeVPCIP
}

func (m *GetInfoReply) GetPodConfig() *Pod {
	if m != nil {
		return m.PodConfig
	}
	return nil
}

func (m *GetInfoReply) GetNodeCidr() string {
	if m != nil {
		return m.NodeCidr
	}
	return ""
}

func (m *GetInfoReply) GetPodIP() string {
	if m != nil {
		return m.PodIP
	}
	return ""
}

func init() {
	proto.RegisterType((*AllocIPRequest)(nil), "rpc.AllocIPRequest")
	proto.RegisterType((*Pod)(nil), "rpc.Pod")
	proto.RegisterType((*VPCIP)(nil), "rpc.VPCIP")
	proto.RegisterType((*ENI)(nil), "rpc.ENI")
	proto.RegisterType((*VPCENI)(nil), "rpc.VPCENI")
	proto.RegisterType((*ManagedK8SENI)(nil), "rpc.ManagedK8SENI")
	proto.RegisterType((*ENIMultiIP)(nil), "rpc.ENIMultiIP")
	proto.RegisterType((*AllocIPReply)(nil), "rpc.AllocIPReply")
	proto.RegisterType((*ReleaseIPRequest)(nil), "rpc.ReleaseIPRequest")
	proto.RegisterType((*ReleaseIPReply)(nil), "rpc.ReleaseIPReply")
	proto.RegisterType((*GetInfoRequest)(nil), "rpc.GetInfoRequest")
	proto.RegisterType((*GetInfoReply)(nil), "rpc.GetInfoReply")
	proto.RegisterEnum("rpc.IPType", IPType_name, IPType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TerwayBackend service

type TerwayBackendClient interface {
	AllocIP(ctx context.Context, in *AllocIPRequest, opts ...grpc.CallOption) (*AllocIPReply, error)
	ReleaseIP(ctx context.Context, in *ReleaseIPRequest, opts ...grpc.CallOption) (*ReleaseIPReply, error)
	GetIPInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoReply, error)
}

type terwayBackendClient struct {
	cc *grpc.ClientConn
}

func NewTerwayBackendClient(cc *grpc.ClientConn) TerwayBackendClient {
	return &terwayBackendClient{cc}
}

func (c *terwayBackendClient) AllocIP(ctx context.Context, in *AllocIPRequest, opts ...grpc.CallOption) (*AllocIPReply, error) {
	out := new(AllocIPReply)
	err := grpc.Invoke(ctx, "/rpc.TerwayBackend/AllocIP", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terwayBackendClient) ReleaseIP(ctx context.Context, in *ReleaseIPRequest, opts ...grpc.CallOption) (*ReleaseIPReply, error) {
	out := new(ReleaseIPReply)
	err := grpc.Invoke(ctx, "/rpc.TerwayBackend/ReleaseIP", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terwayBackendClient) GetIPInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoReply, error) {
	out := new(GetInfoReply)
	err := grpc.Invoke(ctx, "/rpc.TerwayBackend/GetIPInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TerwayBackend service

type TerwayBackendServer interface {
	AllocIP(context.Context, *AllocIPRequest) (*AllocIPReply, error)
	ReleaseIP(context.Context, *ReleaseIPRequest) (*ReleaseIPReply, error)
	GetIPInfo(context.Context, *GetInfoRequest) (*GetInfoReply, error)
}

func RegisterTerwayBackendServer(s *grpc.Server, srv TerwayBackendServer) {
	s.RegisterService(&_TerwayBackend_serviceDesc, srv)
}

func _TerwayBackend_AllocIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerwayBackendServer).AllocIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.TerwayBackend/AllocIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerwayBackendServer).AllocIP(ctx, req.(*AllocIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerwayBackend_ReleaseIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerwayBackendServer).ReleaseIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.TerwayBackend/ReleaseIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerwayBackendServer).ReleaseIP(ctx, req.(*ReleaseIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerwayBackend_GetIPInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerwayBackendServer).GetIPInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.TerwayBackend/GetIPInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerwayBackendServer).GetIPInfo(ctx, req.(*GetInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TerwayBackend_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.TerwayBackend",
	HandlerType: (*TerwayBackendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AllocIP",
			Handler:    _TerwayBackend_AllocIP_Handler,
		},
		{
			MethodName: "ReleaseIP",
			Handler:    _TerwayBackend_ReleaseIP_Handler,
		},
		{
			MethodName: "GetIPInfo",
			Handler:    _TerwayBackend_GetIPInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor_rpc_22751a12a1210b22) }

var fileDescriptor_rpc_22751a12a1210b22 = []byte{
	// 770 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0xcd, 0x4e, 0xdb, 0x4a,
	0x14, 0x8e, 0x13, 0xec, 0x90, 0x63, 0x12, 0x72, 0x07, 0x2e, 0x8a, 0x58, 0x5c, 0x21, 0x5f, 0x5d,
	0x84, 0xee, 0x02, 0xa9, 0x81, 0xb6, 0x74, 0x09, 0x69, 0x04, 0x23, 0x84, 0x6b, 0x39, 0x28, 0xfb,
	0xc1, 0x9e, 0x20, 0x97, 0x60, 0xbb, 0x63, 0x07, 0x94, 0x2e, 0xba, 0xed, 0xaa, 0x52, 0xd5, 0x87,
	0xe9, 0xba, 0x52, 0x9f, 0xa0, 0x6f, 0x54, 0xcd, 0x8f, 0xe3, 0x1f, 0x9a, 0xaa, 0x9b, 0x56, 0xac,
	0xe0, 0xfb, 0xce, 0x99, 0x9c, 0x73, 0xbe, 0xf3, 0x93, 0x40, 0x8b, 0xc5, 0xde, 0x7e, 0xcc, 0xa2,
	0x34, 0x42, 0x0d, 0x16, 0x7b, 0xd6, 0x17, 0x0d, 0x3a, 0xc7, 0xd3, 0x69, 0xe4, 0x61, 0xc7, 0xa5,
	0x6f, 0x66, 0x34, 0x49, 0xd1, 0x3f, 0x00, 0xe7, 0x47, 0x89, 0x13, 0xf9, 0x36, 0xb9, 0xa5, 0x3d,
	0x6d, 0x47, 0xdb, 0x6b, 0xb9, 0x05, 0x06, 0xed, 0xc1, 0x7a, 0x8e, 0x92, 0x98, 0x78, 0xb4, 0x57,
	0x17, 0x4e, 0x55, 0x1a, 0x3d, 0x83, 0x2d, 0x49, 0xe1, 0x70, 0xc2, 0xc8, 0x20, 0x0a, 0x53, 0x12,
	0x84, 0x94, 0x61, 0xbf, 0xd7, 0x10, 0x0f, 0x96, 0x58, 0xd1, 0x26, 0xe8, 0x36, 0x4d, 0xc3, 0xa4,
	0xb7, 0x22, 0xdc, 0x24, 0x40, 0x5b, 0x60, 0xe0, 0x89, 0xc8, 0x49, 0x17, 0xb4, 0x42, 0xd6, 0x73,
	0x68, 0x38, 0x91, 0x8f, 0x7a, 0xd0, 0xc4, 0xe1, 0x35, 0xa3, 0x49, 0x22, 0x72, 0x5e, 0x71, 0x33,
	0xc8, 0x1f, 0x0e, 0xa5, 0xa1, 0x2e, 0x0c, 0x0a, 0x59, 0xe7, 0xa0, 0x8f, 0x9d, 0x01, 0x76, 0xd0,
	0x2e, 0xb4, 0x9c, 0xc8, 0x1f, 0x44, 0xe1, 0x24, 0xb8, 0x16, 0x8f, 0xcd, 0xfe, 0xea, 0x3e, 0x17,
	0xca, 0x89, 0x7c, 0x37, 0x37, 0xa1, 0x6d, 0x58, 0xb5, 0x23, 0x9f, 0x0e, 0x02, 0x9f, 0xa9, 0x92,
	0x17, 0xd8, 0xfa, 0xaa, 0x41, 0x63, 0x68, 0x63, 0xee, 0x83, 0x9d, 0xbb, 0xc3, 0x63, 0xdf, 0x67,
	0x4a, 0xbb, 0x05, 0xe6, 0xca, 0xf2, 0xff, 0x47, 0xb3, 0xab, 0x90, 0xa6, 0xea, 0x13, 0x0a, 0x0c,
	0x2f, 0xe1, 0x82, 0x78, 0xe2, 0xa9, 0x14, 0x28, 0x83, 0xdc, 0x72, 0x4a, 0x52, 0x7a, 0x4f, 0xe6,
	0x4a, 0x93, 0x0c, 0x22, 0x0b, 0xd6, 0x5e, 0xd2, 0xbb, 0xc0, 0xa3, 0xf6, 0xec, 0xf6, 0x8a, 0x32,
	0xa1, 0x8d, 0xee, 0x96, 0x38, 0xde, 0x31, 0x87, 0x05, 0xb7, 0x84, 0xcd, 0x17, 0xa9, 0x19, 0xb2,
	0x63, 0x15, 0xda, 0x7a, 0x0b, 0xc6, 0xd8, 0x19, 0xf0, 0x3a, 0x76, 0xa1, 0x35, 0x0c, 0x83, 0x1f,
	0x68, 0x32, 0xb4, 0xb1, 0x9b, 0x9b, 0xca, 0xda, 0xd5, 0x97, 0x6b, 0xb7, 0x03, 0xe6, 0x88, 0x32,
	0x9e, 0x94, 0x90, 0x4f, 0xd6, 0x57, 0xa4, 0xac, 0x6f, 0x1a, 0xb4, 0x2f, 0x48, 0x48, 0xae, 0xa9,
	0x7f, 0x7e, 0x34, 0xfa, 0x1d, 0x39, 0xf4, 0xa0, 0xc9, 0x41, 0x1e, 0x3f, 0x83, 0xdc, 0x32, 0x8e,
	0x3d, 0x61, 0x51, 0xfa, 0x2a, 0x58, 0xea, 0xb9, 0x5e, 0xee, 0x79, 0xb5, 0x26, 0xe3, 0x61, 0x4d,
	0xef, 0x00, 0x86, 0x36, 0xbe, 0x98, 0x4d, 0xd3, 0x40, 0xce, 0xd9, 0x1f, 0xd6, 0xf4, 0x63, 0x1d,
	0xd6, 0x16, 0xeb, 0x1d, 0x4f, 0xe7, 0xbc, 0xd0, 0xd1, 0xcc, 0xf3, 0xb2, 0x2d, 0x59, 0x75, 0x33,
	0x88, 0xfe, 0x05, 0x03, 0x3b, 0x97, 0xf3, 0x58, 0x6e, 0x73, 0xa7, 0x6f, 0x8a, 0x88, 0x92, 0x72,
	0x95, 0x09, 0x59, 0xa0, 0x8f, 0x63, 0x0f, 0xc7, 0x22, 0x96, 0xd9, 0x07, 0xe1, 0x23, 0x96, 0xe8,
	0xac, 0xe6, 0x4a, 0x13, 0xfa, 0x0f, 0x8c, 0x71, 0xec, 0x0d, 0xc3, 0x40, 0x48, 0x69, 0xaa, 0x0f,
	0x92, 0x63, 0x75, 0x56, 0x73, 0x95, 0x11, 0x1d, 0x02, 0xe4, 0xdd, 0x16, 0xd2, 0x9a, 0x7d, 0x24,
	0x5c, 0x4b, 0x43, 0x70, 0x56, 0x73, 0x0b, 0x7e, 0xe8, 0x49, 0x51, 0x50, 0xa1, 0xb8, 0xd9, 0x5f,
	0xcf, 0x34, 0x54, 0x34, 0x7f, 0x92, 0xa3, 0x93, 0x36, 0x98, 0x36, 0x4d, 0xef, 0x23, 0x76, 0x83,
	0xc3, 0x49, 0x64, 0xbd, 0xaf, 0x43, 0xd7, 0xa5, 0x53, 0x4a, 0x12, 0xfa, 0x98, 0x6e, 0x5e, 0x2e,
	0xff, 0xca, 0x72, 0xf9, 0x8b, 0xc7, 0x45, 0xaf, 0x1c, 0x97, 0xc2, 0xf1, 0x30, 0xca, 0xc7, 0x63,
	0x0b, 0x0c, 0x97, 0x92, 0x24, 0x0a, 0x7b, 0x4d, 0x79, 0x38, 0x25, 0xb2, 0x5e, 0x43, 0xa7, 0x20,
	0xc4, 0xcf, 0xa7, 0xa3, 0x18, 0xb9, 0x5e, 0x89, 0x5c, 0x3d, 0x41, 0x8d, 0x87, 0x27, 0xc8, 0xfa,
	0xa4, 0x41, 0xe7, 0x94, 0xa6, 0xbc, 0x03, 0x8f, 0x46, 0x73, 0xeb, 0x83, 0x06, 0x6b, 0x8b, 0xa4,
	0x78, 0xfd, 0x79, 0x13, 0xb4, 0xe5, 0x4d, 0xf8, 0xd5, 0xed, 0x2c, 0x5e, 0x8e, 0x46, 0xe5, 0x72,
	0x6c, 0x82, 0xce, 0x13, 0x72, 0xb2, 0x6f, 0x38, 0x01, 0xfe, 0x7f, 0x95, 0x85, 0x47, 0x6d, 0x68,
	0xf1, 0xbf, 0x62, 0xb3, 0xba, 0x35, 0xd4, 0x01, 0x50, 0x70, 0x68, 0xe3, 0xae, 0x86, 0x10, 0x74,
	0x38, 0xce, 0xf7, 0xa2, 0x5b, 0xcf, 0xb8, 0x7c, 0xf0, 0xbb, 0x8d, 0xfe, 0x67, 0x0d, 0xda, 0x97,
	0x94, 0xdd, 0x93, 0xf9, 0x09, 0xf1, 0x6e, 0x68, 0xe8, 0xa3, 0x03, 0x68, 0xaa, 0x7b, 0x80, 0x36,
	0x44, 0xd2, 0xe5, 0x2f, 0xff, 0xed, 0xbf, 0xca, 0x64, 0x3c, 0x9d, 0x5b, 0x35, 0xf4, 0x02, 0x5a,
	0x8b, 0x41, 0x41, 0x7f, 0x0b, 0x8f, 0xea, 0x06, 0x6d, 0x6f, 0x54, 0x69, 0xf9, 0xf4, 0x29, 0xb4,
	0xb8, 0xc2, 0x0e, 0xd7, 0x58, 0x45, 0x2c, 0x8f, 0x81, 0x8a, 0x58, 0x6c, 0x83, 0x55, 0xbb, 0x32,
	0xc4, 0x4f, 0x94, 0x83, 0xef, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb5, 0x7c, 0xc1, 0xbf, 0xaf, 0x08,
	0x00, 0x00,
}
