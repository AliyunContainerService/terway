// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

package rpc

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type IPType int32

const (
	IPType_TypeVPCIP      IPType = 0
	IPType_TypeVPCENI     IPType = 1
	IPType_TypeManagedK8S IPType = 2
	IPType_TypeENIMultiIP IPType = 3
)

var IPType_name = map[int32]string{
	0: "TypeVPCIP",
	1: "TypeVPCENI",
	2: "TypeManagedK8S",
	3: "TypeENIMultiIP",
}

var IPType_value = map[string]int32{
	"TypeVPCIP":      0,
	"TypeVPCENI":     1,
	"TypeManagedK8S": 2,
	"TypeENIMultiIP": 3,
}

func (x IPType) String() string {
	return proto.EnumName(IPType_name, int32(x))
}

func (IPType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{0}
}

type EventTarget int32

const (
	EventTarget_EventTargetNode EventTarget = 0
	EventTarget_EventTargetPod  EventTarget = 1
)

var EventTarget_name = map[int32]string{
	0: "EventTargetNode",
	1: "EventTargetPod",
}

var EventTarget_value = map[string]int32{
	"EventTargetNode": 0,
	"EventTargetPod":  1,
}

func (x EventTarget) String() string {
	return proto.EnumName(EventTarget_name, int32(x))
}

func (EventTarget) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{1}
}

type EventType int32

const (
	EventType_EventTypeNormal  EventType = 0
	EventType_EventTypeWarning EventType = 1
)

var EventType_name = map[int32]string{
	0: "EventTypeNormal",
	1: "EventTypeWarning",
}

var EventType_value = map[string]int32{
	"EventTypeNormal":  0,
	"EventTypeWarning": 1,
}

func (x EventType) String() string {
	return proto.EnumName(EventType_name, int32(x))
}

func (EventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{2}
}

type AllocIPRequest struct {
	K8SPodName             string   `protobuf:"bytes,1,opt,name=K8sPodName,proto3" json:"K8sPodName,omitempty"`
	K8SPodNamespace        string   `protobuf:"bytes,2,opt,name=K8sPodNamespace,proto3" json:"K8sPodNamespace,omitempty"`
	K8SPodInfraContainerId string   `protobuf:"bytes,3,opt,name=K8sPodInfraContainerId,proto3" json:"K8sPodInfraContainerId,omitempty"`
	Netns                  string   `protobuf:"bytes,4,opt,name=Netns,proto3" json:"Netns,omitempty"`
	IfName                 string   `protobuf:"bytes,5,opt,name=IfName,proto3" json:"IfName,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *AllocIPRequest) Reset()         { *m = AllocIPRequest{} }
func (m *AllocIPRequest) String() string { return proto.CompactTextString(m) }
func (*AllocIPRequest) ProtoMessage()    {}
func (*AllocIPRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{0}
}

func (m *AllocIPRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllocIPRequest.Unmarshal(m, b)
}
func (m *AllocIPRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllocIPRequest.Marshal(b, m, deterministic)
}
func (m *AllocIPRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllocIPRequest.Merge(m, src)
}
func (m *AllocIPRequest) XXX_Size() int {
	return xxx_messageInfo_AllocIPRequest.Size(m)
}
func (m *AllocIPRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AllocIPRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AllocIPRequest proto.InternalMessageInfo

func (m *AllocIPRequest) GetK8SPodName() string {
	if m != nil {
		return m.K8SPodName
	}
	return ""
}

func (m *AllocIPRequest) GetK8SPodNamespace() string {
	if m != nil {
		return m.K8SPodNamespace
	}
	return ""
}

func (m *AllocIPRequest) GetK8SPodInfraContainerId() string {
	if m != nil {
		return m.K8SPodInfraContainerId
	}
	return ""
}

func (m *AllocIPRequest) GetNetns() string {
	if m != nil {
		return m.Netns
	}
	return ""
}

func (m *AllocIPRequest) GetIfName() string {
	if m != nil {
		return m.IfName
	}
	return ""
}

// VETH Basic
type Pod struct {
	Ingress              uint64   `protobuf:"varint,1,opt,name=Ingress,proto3" json:"Ingress,omitempty"`
	Egress               uint64   `protobuf:"varint,2,opt,name=Egress,proto3" json:"Egress,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Pod) Reset()         { *m = Pod{} }
func (m *Pod) String() string { return proto.CompactTextString(m) }
func (*Pod) ProtoMessage()    {}
func (*Pod) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{1}
}

func (m *Pod) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Pod.Unmarshal(m, b)
}
func (m *Pod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Pod.Marshal(b, m, deterministic)
}
func (m *Pod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pod.Merge(m, src)
}
func (m *Pod) XXX_Size() int {
	return xxx_messageInfo_Pod.Size(m)
}
func (m *Pod) XXX_DiscardUnknown() {
	xxx_messageInfo_Pod.DiscardUnknown(m)
}

var xxx_messageInfo_Pod proto.InternalMessageInfo

func (m *Pod) GetIngress() uint64 {
	if m != nil {
		return m.Ingress
	}
	return 0
}

func (m *Pod) GetEgress() uint64 {
	if m != nil {
		return m.Egress
	}
	return 0
}

// VPC route veth
type VPCIP struct {
	PodConfig            *Pod     `protobuf:"bytes,1,opt,name=PodConfig,proto3" json:"PodConfig,omitempty"`
	NodeCidr             string   `protobuf:"bytes,2,opt,name=NodeCidr,proto3" json:"NodeCidr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VPCIP) Reset()         { *m = VPCIP{} }
func (m *VPCIP) String() string { return proto.CompactTextString(m) }
func (*VPCIP) ProtoMessage()    {}
func (*VPCIP) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{2}
}

func (m *VPCIP) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VPCIP.Unmarshal(m, b)
}
func (m *VPCIP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VPCIP.Marshal(b, m, deterministic)
}
func (m *VPCIP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VPCIP.Merge(m, src)
}
func (m *VPCIP) XXX_Size() int {
	return xxx_messageInfo_VPCIP.Size(m)
}
func (m *VPCIP) XXX_DiscardUnknown() {
	xxx_messageInfo_VPCIP.DiscardUnknown(m)
}

var xxx_messageInfo_VPCIP proto.InternalMessageInfo

func (m *VPCIP) GetPodConfig() *Pod {
	if m != nil {
		return m.PodConfig
	}
	return nil
}

func (m *VPCIP) GetNodeCidr() string {
	if m != nil {
		return m.NodeCidr
	}
	return ""
}

// ENI Basic
type ENI struct {
	IPv4Addr             string   `protobuf:"bytes,1,opt,name=IPv4Addr,proto3" json:"IPv4Addr,omitempty"`
	IPv4Subnet           string   `protobuf:"bytes,2,opt,name=IPv4Subnet,proto3" json:"IPv4Subnet,omitempty"`
	MacAddr              string   `protobuf:"bytes,3,opt,name=MacAddr,proto3" json:"MacAddr,omitempty"`
	Gateway              string   `protobuf:"bytes,4,opt,name=Gateway,proto3" json:"Gateway,omitempty"`
	DeviceNumber         int32    `protobuf:"varint,5,opt,name=DeviceNumber,proto3" json:"DeviceNumber,omitempty"`
	PrimaryIPv4Addr      string   `protobuf:"bytes,6,opt,name=PrimaryIPv4Addr,proto3" json:"PrimaryIPv4Addr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ENI) Reset()         { *m = ENI{} }
func (m *ENI) String() string { return proto.CompactTextString(m) }
func (*ENI) ProtoMessage()    {}
func (*ENI) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{3}
}

func (m *ENI) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ENI.Unmarshal(m, b)
}
func (m *ENI) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ENI.Marshal(b, m, deterministic)
}
func (m *ENI) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ENI.Merge(m, src)
}
func (m *ENI) XXX_Size() int {
	return xxx_messageInfo_ENI.Size(m)
}
func (m *ENI) XXX_DiscardUnknown() {
	xxx_messageInfo_ENI.DiscardUnknown(m)
}

var xxx_messageInfo_ENI proto.InternalMessageInfo

func (m *ENI) GetIPv4Addr() string {
	if m != nil {
		return m.IPv4Addr
	}
	return ""
}

func (m *ENI) GetIPv4Subnet() string {
	if m != nil {
		return m.IPv4Subnet
	}
	return ""
}

func (m *ENI) GetMacAddr() string {
	if m != nil {
		return m.MacAddr
	}
	return ""
}

func (m *ENI) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

func (m *ENI) GetDeviceNumber() int32 {
	if m != nil {
		return m.DeviceNumber
	}
	return 0
}

func (m *ENI) GetPrimaryIPv4Addr() string {
	if m != nil {
		return m.PrimaryIPv4Addr
	}
	return ""
}

// Dedicated ENI
type VPCENI struct {
	EniConfig            *ENI     `protobuf:"bytes,1,opt,name=EniConfig,proto3" json:"EniConfig,omitempty"`
	PodConfig            *Pod     `protobuf:"bytes,2,opt,name=PodConfig,proto3" json:"PodConfig,omitempty"`
	ServiceCidr          string   `protobuf:"bytes,3,opt,name=ServiceCidr,proto3" json:"ServiceCidr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VPCENI) Reset()         { *m = VPCENI{} }
func (m *VPCENI) String() string { return proto.CompactTextString(m) }
func (*VPCENI) ProtoMessage()    {}
func (*VPCENI) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{4}
}

func (m *VPCENI) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VPCENI.Unmarshal(m, b)
}
func (m *VPCENI) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VPCENI.Marshal(b, m, deterministic)
}
func (m *VPCENI) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VPCENI.Merge(m, src)
}
func (m *VPCENI) XXX_Size() int {
	return xxx_messageInfo_VPCENI.Size(m)
}
func (m *VPCENI) XXX_DiscardUnknown() {
	xxx_messageInfo_VPCENI.DiscardUnknown(m)
}

var xxx_messageInfo_VPCENI proto.InternalMessageInfo

func (m *VPCENI) GetEniConfig() *ENI {
	if m != nil {
		return m.EniConfig
	}
	return nil
}

func (m *VPCENI) GetPodConfig() *Pod {
	if m != nil {
		return m.PodConfig
	}
	return nil
}

func (m *VPCENI) GetServiceCidr() string {
	if m != nil {
		return m.ServiceCidr
	}
	return ""
}

// Managed k8s ENI
type ManagedK8SENI struct {
	EniConfig            *ENI     `protobuf:"bytes,1,opt,name=EniConfig,proto3" json:"EniConfig,omitempty"`
	PodConfig            *Pod     `protobuf:"bytes,2,opt,name=PodConfig,proto3" json:"PodConfig,omitempty"`
	PodCidr              string   `protobuf:"bytes,3,opt,name=PodCidr,proto3" json:"PodCidr,omitempty"`
	VpcCidr              string   `protobuf:"bytes,4,opt,name=VpcCidr,proto3" json:"VpcCidr,omitempty"`
	NodeCidr             string   `protobuf:"bytes,5,opt,name=NodeCidr,proto3" json:"NodeCidr,omitempty"`
	ServiceCidr          string   `protobuf:"bytes,6,opt,name=ServiceCidr,proto3" json:"ServiceCidr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ManagedK8SENI) Reset()         { *m = ManagedK8SENI{} }
func (m *ManagedK8SENI) String() string { return proto.CompactTextString(m) }
func (*ManagedK8SENI) ProtoMessage()    {}
func (*ManagedK8SENI) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{5}
}

func (m *ManagedK8SENI) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ManagedK8SENI.Unmarshal(m, b)
}
func (m *ManagedK8SENI) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ManagedK8SENI.Marshal(b, m, deterministic)
}
func (m *ManagedK8SENI) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ManagedK8SENI.Merge(m, src)
}
func (m *ManagedK8SENI) XXX_Size() int {
	return xxx_messageInfo_ManagedK8SENI.Size(m)
}
func (m *ManagedK8SENI) XXX_DiscardUnknown() {
	xxx_messageInfo_ManagedK8SENI.DiscardUnknown(m)
}

var xxx_messageInfo_ManagedK8SENI proto.InternalMessageInfo

func (m *ManagedK8SENI) GetEniConfig() *ENI {
	if m != nil {
		return m.EniConfig
	}
	return nil
}

func (m *ManagedK8SENI) GetPodConfig() *Pod {
	if m != nil {
		return m.PodConfig
	}
	return nil
}

func (m *ManagedK8SENI) GetPodCidr() string {
	if m != nil {
		return m.PodCidr
	}
	return ""
}

func (m *ManagedK8SENI) GetVpcCidr() string {
	if m != nil {
		return m.VpcCidr
	}
	return ""
}

func (m *ManagedK8SENI) GetNodeCidr() string {
	if m != nil {
		return m.NodeCidr
	}
	return ""
}

func (m *ManagedK8SENI) GetServiceCidr() string {
	if m != nil {
		return m.ServiceCidr
	}
	return ""
}

// ENI Multiple IP
type ENIMultiIP struct {
	EniConfig            *ENI     `protobuf:"bytes,1,opt,name=EniConfig,proto3" json:"EniConfig,omitempty"`
	PodConfig            *Pod     `protobuf:"bytes,2,opt,name=PodConfig,proto3" json:"PodConfig,omitempty"`
	ServiceCidr          string   `protobuf:"bytes,3,opt,name=ServiceCidr,proto3" json:"ServiceCidr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ENIMultiIP) Reset()         { *m = ENIMultiIP{} }
func (m *ENIMultiIP) String() string { return proto.CompactTextString(m) }
func (*ENIMultiIP) ProtoMessage()    {}
func (*ENIMultiIP) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{6}
}

func (m *ENIMultiIP) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ENIMultiIP.Unmarshal(m, b)
}
func (m *ENIMultiIP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ENIMultiIP.Marshal(b, m, deterministic)
}
func (m *ENIMultiIP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ENIMultiIP.Merge(m, src)
}
func (m *ENIMultiIP) XXX_Size() int {
	return xxx_messageInfo_ENIMultiIP.Size(m)
}
func (m *ENIMultiIP) XXX_DiscardUnknown() {
	xxx_messageInfo_ENIMultiIP.DiscardUnknown(m)
}

var xxx_messageInfo_ENIMultiIP proto.InternalMessageInfo

func (m *ENIMultiIP) GetEniConfig() *ENI {
	if m != nil {
		return m.EniConfig
	}
	return nil
}

func (m *ENIMultiIP) GetPodConfig() *Pod {
	if m != nil {
		return m.PodConfig
	}
	return nil
}

func (m *ENIMultiIP) GetServiceCidr() string {
	if m != nil {
		return m.ServiceCidr
	}
	return ""
}

type AllocIPReply struct {
	Success bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	IPType  IPType `protobuf:"varint,2,opt,name=IPType,proto3,enum=rpc.IPType" json:"IPType,omitempty"`
	// Types that are valid to be assigned to NetworkInfo:
	//	*AllocIPReply_VpcIp
	//	*AllocIPReply_VpcEni
	//	*AllocIPReply_ManagedK8S
	//	*AllocIPReply_ENIMultiIP
	NetworkInfo          isAllocIPReply_NetworkInfo `protobuf_oneof:"NetworkInfo"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *AllocIPReply) Reset()         { *m = AllocIPReply{} }
func (m *AllocIPReply) String() string { return proto.CompactTextString(m) }
func (*AllocIPReply) ProtoMessage()    {}
func (*AllocIPReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{7}
}

func (m *AllocIPReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllocIPReply.Unmarshal(m, b)
}
func (m *AllocIPReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllocIPReply.Marshal(b, m, deterministic)
}
func (m *AllocIPReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllocIPReply.Merge(m, src)
}
func (m *AllocIPReply) XXX_Size() int {
	return xxx_messageInfo_AllocIPReply.Size(m)
}
func (m *AllocIPReply) XXX_DiscardUnknown() {
	xxx_messageInfo_AllocIPReply.DiscardUnknown(m)
}

var xxx_messageInfo_AllocIPReply proto.InternalMessageInfo

func (m *AllocIPReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *AllocIPReply) GetIPType() IPType {
	if m != nil {
		return m.IPType
	}
	return IPType_TypeVPCIP
}

type isAllocIPReply_NetworkInfo interface {
	isAllocIPReply_NetworkInfo()
}

type AllocIPReply_VpcIp struct {
	VpcIp *VPCIP `protobuf:"bytes,3,opt,name=VpcIp,proto3,oneof"`
}

type AllocIPReply_VpcEni struct {
	VpcEni *VPCENI `protobuf:"bytes,4,opt,name=VpcEni,proto3,oneof"`
}

type AllocIPReply_ManagedK8S struct {
	ManagedK8S *ManagedK8SENI `protobuf:"bytes,5,opt,name=ManagedK8S,proto3,oneof"`
}

type AllocIPReply_ENIMultiIP struct {
	ENIMultiIP *ENIMultiIP `protobuf:"bytes,6,opt,name=ENIMultiIP,proto3,oneof"`
}

func (*AllocIPReply_VpcIp) isAllocIPReply_NetworkInfo() {}

func (*AllocIPReply_VpcEni) isAllocIPReply_NetworkInfo() {}

func (*AllocIPReply_ManagedK8S) isAllocIPReply_NetworkInfo() {}

func (*AllocIPReply_ENIMultiIP) isAllocIPReply_NetworkInfo() {}

func (m *AllocIPReply) GetNetworkInfo() isAllocIPReply_NetworkInfo {
	if m != nil {
		return m.NetworkInfo
	}
	return nil
}

func (m *AllocIPReply) GetVpcIp() *VPCIP {
	if x, ok := m.GetNetworkInfo().(*AllocIPReply_VpcIp); ok {
		return x.VpcIp
	}
	return nil
}

func (m *AllocIPReply) GetVpcEni() *VPCENI {
	if x, ok := m.GetNetworkInfo().(*AllocIPReply_VpcEni); ok {
		return x.VpcEni
	}
	return nil
}

func (m *AllocIPReply) GetManagedK8S() *ManagedK8SENI {
	if x, ok := m.GetNetworkInfo().(*AllocIPReply_ManagedK8S); ok {
		return x.ManagedK8S
	}
	return nil
}

func (m *AllocIPReply) GetENIMultiIP() *ENIMultiIP {
	if x, ok := m.GetNetworkInfo().(*AllocIPReply_ENIMultiIP); ok {
		return x.ENIMultiIP
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AllocIPReply) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AllocIPReply_VpcIp)(nil),
		(*AllocIPReply_VpcEni)(nil),
		(*AllocIPReply_ManagedK8S)(nil),
		(*AllocIPReply_ENIMultiIP)(nil),
	}
}

type ReleaseIPRequest struct {
	K8SPodName             string   `protobuf:"bytes,1,opt,name=K8sPodName,proto3" json:"K8sPodName,omitempty"`
	K8SPodNamespace        string   `protobuf:"bytes,2,opt,name=K8sPodNamespace,proto3" json:"K8sPodNamespace,omitempty"`
	K8SPodInfraContainerId string   `protobuf:"bytes,3,opt,name=K8sPodInfraContainerId,proto3" json:"K8sPodInfraContainerId,omitempty"`
	IPType                 IPType   `protobuf:"varint,4,opt,name=IPType,proto3,enum=rpc.IPType" json:"IPType,omitempty"`
	IPv4Addr               string   `protobuf:"bytes,5,opt,name=IPv4Addr,proto3" json:"IPv4Addr,omitempty"`
	MacAddr                string   `protobuf:"bytes,6,opt,name=MacAddr,proto3" json:"MacAddr,omitempty"`
	Reason                 string   `protobuf:"bytes,7,opt,name=Reason,proto3" json:"Reason,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *ReleaseIPRequest) Reset()         { *m = ReleaseIPRequest{} }
func (m *ReleaseIPRequest) String() string { return proto.CompactTextString(m) }
func (*ReleaseIPRequest) ProtoMessage()    {}
func (*ReleaseIPRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{8}
}

func (m *ReleaseIPRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReleaseIPRequest.Unmarshal(m, b)
}
func (m *ReleaseIPRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReleaseIPRequest.Marshal(b, m, deterministic)
}
func (m *ReleaseIPRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReleaseIPRequest.Merge(m, src)
}
func (m *ReleaseIPRequest) XXX_Size() int {
	return xxx_messageInfo_ReleaseIPRequest.Size(m)
}
func (m *ReleaseIPRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReleaseIPRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReleaseIPRequest proto.InternalMessageInfo

func (m *ReleaseIPRequest) GetK8SPodName() string {
	if m != nil {
		return m.K8SPodName
	}
	return ""
}

func (m *ReleaseIPRequest) GetK8SPodNamespace() string {
	if m != nil {
		return m.K8SPodNamespace
	}
	return ""
}

func (m *ReleaseIPRequest) GetK8SPodInfraContainerId() string {
	if m != nil {
		return m.K8SPodInfraContainerId
	}
	return ""
}

func (m *ReleaseIPRequest) GetIPType() IPType {
	if m != nil {
		return m.IPType
	}
	return IPType_TypeVPCIP
}

func (m *ReleaseIPRequest) GetIPv4Addr() string {
	if m != nil {
		return m.IPv4Addr
	}
	return ""
}

func (m *ReleaseIPRequest) GetMacAddr() string {
	if m != nil {
		return m.MacAddr
	}
	return ""
}

func (m *ReleaseIPRequest) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type ReleaseIPReply struct {
	Success              bool     `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	IPv4Addr             string   `protobuf:"bytes,2,opt,name=IPv4Addr,proto3" json:"IPv4Addr,omitempty"`
	DeviceNumber         int32    `protobuf:"varint,3,opt,name=DeviceNumber,proto3" json:"DeviceNumber,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReleaseIPReply) Reset()         { *m = ReleaseIPReply{} }
func (m *ReleaseIPReply) String() string { return proto.CompactTextString(m) }
func (*ReleaseIPReply) ProtoMessage()    {}
func (*ReleaseIPReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{9}
}

func (m *ReleaseIPReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReleaseIPReply.Unmarshal(m, b)
}
func (m *ReleaseIPReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReleaseIPReply.Marshal(b, m, deterministic)
}
func (m *ReleaseIPReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReleaseIPReply.Merge(m, src)
}
func (m *ReleaseIPReply) XXX_Size() int {
	return xxx_messageInfo_ReleaseIPReply.Size(m)
}
func (m *ReleaseIPReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ReleaseIPReply.DiscardUnknown(m)
}

var xxx_messageInfo_ReleaseIPReply proto.InternalMessageInfo

func (m *ReleaseIPReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *ReleaseIPReply) GetIPv4Addr() string {
	if m != nil {
		return m.IPv4Addr
	}
	return ""
}

func (m *ReleaseIPReply) GetDeviceNumber() int32 {
	if m != nil {
		return m.DeviceNumber
	}
	return 0
}

type GetInfoRequest struct {
	K8SPodName             string   `protobuf:"bytes,1,opt,name=K8sPodName,proto3" json:"K8sPodName,omitempty"`
	K8SPodNamespace        string   `protobuf:"bytes,2,opt,name=K8sPodNamespace,proto3" json:"K8sPodNamespace,omitempty"`
	K8SPodInfraContainerId string   `protobuf:"bytes,3,opt,name=K8sPodInfraContainerId,proto3" json:"K8sPodInfraContainerId,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *GetInfoRequest) Reset()         { *m = GetInfoRequest{} }
func (m *GetInfoRequest) String() string { return proto.CompactTextString(m) }
func (*GetInfoRequest) ProtoMessage()    {}
func (*GetInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{10}
}

func (m *GetInfoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetInfoRequest.Unmarshal(m, b)
}
func (m *GetInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetInfoRequest.Marshal(b, m, deterministic)
}
func (m *GetInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetInfoRequest.Merge(m, src)
}
func (m *GetInfoRequest) XXX_Size() int {
	return xxx_messageInfo_GetInfoRequest.Size(m)
}
func (m *GetInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetInfoRequest proto.InternalMessageInfo

func (m *GetInfoRequest) GetK8SPodName() string {
	if m != nil {
		return m.K8SPodName
	}
	return ""
}

func (m *GetInfoRequest) GetK8SPodNamespace() string {
	if m != nil {
		return m.K8SPodNamespace
	}
	return ""
}

func (m *GetInfoRequest) GetK8SPodInfraContainerId() string {
	if m != nil {
		return m.K8SPodInfraContainerId
	}
	return ""
}

type GetInfoReply struct {
	IPType               IPType   `protobuf:"varint,1,opt,name=IPType,proto3,enum=rpc.IPType" json:"IPType,omitempty"`
	PodConfig            *Pod     `protobuf:"bytes,2,opt,name=PodConfig,proto3" json:"PodConfig,omitempty"`
	NodeCidr             string   `protobuf:"bytes,3,opt,name=NodeCidr,proto3" json:"NodeCidr,omitempty"`
	PodIP                string   `protobuf:"bytes,4,opt,name=PodIP,proto3" json:"PodIP,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetInfoReply) Reset()         { *m = GetInfoReply{} }
func (m *GetInfoReply) String() string { return proto.CompactTextString(m) }
func (*GetInfoReply) ProtoMessage()    {}
func (*GetInfoReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{11}
}

func (m *GetInfoReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetInfoReply.Unmarshal(m, b)
}
func (m *GetInfoReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetInfoReply.Marshal(b, m, deterministic)
}
func (m *GetInfoReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetInfoReply.Merge(m, src)
}
func (m *GetInfoReply) XXX_Size() int {
	return xxx_messageInfo_GetInfoReply.Size(m)
}
func (m *GetInfoReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetInfoReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetInfoReply proto.InternalMessageInfo

func (m *GetInfoReply) GetIPType() IPType {
	if m != nil {
		return m.IPType
	}
	return IPType_TypeVPCIP
}

func (m *GetInfoReply) GetPodConfig() *Pod {
	if m != nil {
		return m.PodConfig
	}
	return nil
}

func (m *GetInfoReply) GetNodeCidr() string {
	if m != nil {
		return m.NodeCidr
	}
	return ""
}

func (m *GetInfoReply) GetPodIP() string {
	if m != nil {
		return m.PodIP
	}
	return ""
}

type EventRequest struct {
	EventTarget          EventTarget `protobuf:"varint,1,opt,name=EventTarget,proto3,enum=rpc.EventTarget" json:"EventTarget,omitempty"`
	K8SPodName           string      `protobuf:"bytes,2,opt,name=K8sPodName,proto3" json:"K8sPodName,omitempty"`
	K8SPodNamespace      string      `protobuf:"bytes,3,opt,name=K8sPodNamespace,proto3" json:"K8sPodNamespace,omitempty"`
	EventType            EventType   `protobuf:"varint,4,opt,name=EventType,proto3,enum=rpc.EventType" json:"EventType,omitempty"`
	Reason               string      `protobuf:"bytes,5,opt,name=Reason,proto3" json:"Reason,omitempty"`
	Message              string      `protobuf:"bytes,6,opt,name=Message,proto3" json:"Message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *EventRequest) Reset()         { *m = EventRequest{} }
func (m *EventRequest) String() string { return proto.CompactTextString(m) }
func (*EventRequest) ProtoMessage()    {}
func (*EventRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{12}
}

func (m *EventRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventRequest.Unmarshal(m, b)
}
func (m *EventRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventRequest.Marshal(b, m, deterministic)
}
func (m *EventRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventRequest.Merge(m, src)
}
func (m *EventRequest) XXX_Size() int {
	return xxx_messageInfo_EventRequest.Size(m)
}
func (m *EventRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EventRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EventRequest proto.InternalMessageInfo

func (m *EventRequest) GetEventTarget() EventTarget {
	if m != nil {
		return m.EventTarget
	}
	return EventTarget_EventTargetNode
}

func (m *EventRequest) GetK8SPodName() string {
	if m != nil {
		return m.K8SPodName
	}
	return ""
}

func (m *EventRequest) GetK8SPodNamespace() string {
	if m != nil {
		return m.K8SPodNamespace
	}
	return ""
}

func (m *EventRequest) GetEventType() EventType {
	if m != nil {
		return m.EventType
	}
	return EventType_EventTypeNormal
}

func (m *EventRequest) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *EventRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type EventReply struct {
	Succeed              bool     `protobuf:"varint,1,opt,name=Succeed,proto3" json:"Succeed,omitempty"`
	Error                string   `protobuf:"bytes,2,opt,name=Error,proto3" json:"Error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventReply) Reset()         { *m = EventReply{} }
func (m *EventReply) String() string { return proto.CompactTextString(m) }
func (*EventReply) ProtoMessage()    {}
func (*EventReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{13}
}

func (m *EventReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventReply.Unmarshal(m, b)
}
func (m *EventReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventReply.Marshal(b, m, deterministic)
}
func (m *EventReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventReply.Merge(m, src)
}
func (m *EventReply) XXX_Size() int {
	return xxx_messageInfo_EventReply.Size(m)
}
func (m *EventReply) XXX_DiscardUnknown() {
	xxx_messageInfo_EventReply.DiscardUnknown(m)
}

var xxx_messageInfo_EventReply proto.InternalMessageInfo

func (m *EventReply) GetSucceed() bool {
	if m != nil {
		return m.Succeed
	}
	return false
}

func (m *EventReply) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterEnum("rpc.IPType", IPType_name, IPType_value)
	proto.RegisterEnum("rpc.EventTarget", EventTarget_name, EventTarget_value)
	proto.RegisterEnum("rpc.EventType", EventType_name, EventType_value)
	proto.RegisterType((*AllocIPRequest)(nil), "rpc.AllocIPRequest")
	proto.RegisterType((*Pod)(nil), "rpc.Pod")
	proto.RegisterType((*VPCIP)(nil), "rpc.VPCIP")
	proto.RegisterType((*ENI)(nil), "rpc.ENI")
	proto.RegisterType((*VPCENI)(nil), "rpc.VPCENI")
	proto.RegisterType((*ManagedK8SENI)(nil), "rpc.ManagedK8SENI")
	proto.RegisterType((*ENIMultiIP)(nil), "rpc.ENIMultiIP")
	proto.RegisterType((*AllocIPReply)(nil), "rpc.AllocIPReply")
	proto.RegisterType((*ReleaseIPRequest)(nil), "rpc.ReleaseIPRequest")
	proto.RegisterType((*ReleaseIPReply)(nil), "rpc.ReleaseIPReply")
	proto.RegisterType((*GetInfoRequest)(nil), "rpc.GetInfoRequest")
	proto.RegisterType((*GetInfoReply)(nil), "rpc.GetInfoReply")
	proto.RegisterType((*EventRequest)(nil), "rpc.EventRequest")
	proto.RegisterType((*EventReply)(nil), "rpc.EventReply")
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor_77a6da22d6a3feb1) }

var fileDescriptor_77a6da22d6a3feb1 = []byte{
	// 927 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0x8e, 0x93, 0xda, 0x6d, 0x8e, 0xdb, 0xd4, 0x3b, 0x2d, 0x55, 0xd4, 0x0b, 0xb4, 0x32, 0x62,
	0xb5, 0xaa, 0xd0, 0x4a, 0xa4, 0x4b, 0x59, 0x24, 0x6e, 0x76, 0x83, 0xb5, 0xb5, 0xaa, 0x1a, 0xcb,
	0xad, 0xc2, 0xf5, 0xd4, 0x9e, 0x46, 0x66, 0xd3, 0x19, 0x33, 0x76, 0x5a, 0x85, 0x0b, 0x6e, 0xb9,
	0x42, 0x42, 0x3c, 0x11, 0x12, 0x4f, 0xc0, 0x73, 0xc0, 0x43, 0xa0, 0xf9, 0x71, 0x3c, 0xf6, 0x6e,
	0xd0, 0xde, 0x80, 0xf6, 0xaa, 0xfd, 0xbe, 0x73, 0x8e, 0x67, 0xce, 0x77, 0x7e, 0x32, 0x30, 0xe4,
	0x45, 0xfa, 0xac, 0xe0, 0xac, 0x62, 0x68, 0xc0, 0x8b, 0xd4, 0xff, 0xdd, 0x82, 0xd1, 0xcb, 0xc5,
	0x82, 0xa5, 0x61, 0x9c, 0x90, 0x1f, 0x96, 0xa4, 0xac, 0xd0, 0xc7, 0x00, 0x17, 0x2f, 0xca, 0x98,
	0x65, 0x11, 0xbe, 0x23, 0x63, 0xeb, 0xb1, 0xf5, 0x74, 0x98, 0x18, 0x0c, 0x7a, 0x0a, 0xfb, 0x0d,
	0x2a, 0x0b, 0x9c, 0x92, 0x71, 0x5f, 0x3a, 0x75, 0x69, 0x74, 0x06, 0x47, 0x8a, 0x0a, 0xe9, 0x2d,
	0xc7, 0x53, 0x46, 0x2b, 0x9c, 0x53, 0xc2, 0xc3, 0x6c, 0x3c, 0x90, 0x01, 0x1b, 0xac, 0xe8, 0x10,
	0xec, 0x88, 0x54, 0xb4, 0x1c, 0x6f, 0x49, 0x37, 0x05, 0xd0, 0x11, 0x38, 0xe1, 0xad, 0xbc, 0x93,
	0x2d, 0x69, 0x8d, 0xfc, 0x2f, 0x61, 0x10, 0xb3, 0x0c, 0x8d, 0x61, 0x3b, 0xa4, 0x73, 0x4e, 0xca,
	0x52, 0xde, 0x79, 0x2b, 0xa9, 0xa1, 0x08, 0x0c, 0x94, 0xa1, 0x2f, 0x0d, 0x1a, 0xf9, 0x17, 0x60,
	0xcf, 0xe2, 0x69, 0x18, 0xa3, 0x27, 0x30, 0x8c, 0x59, 0x36, 0x65, 0xf4, 0x36, 0x9f, 0xcb, 0x60,
	0x77, 0xb2, 0xf3, 0x4c, 0x08, 0x15, 0xb3, 0x2c, 0x69, 0x4c, 0xe8, 0x18, 0x76, 0x22, 0x96, 0x91,
	0x69, 0x9e, 0x71, 0x9d, 0xf2, 0x1a, 0xfb, 0x7f, 0x58, 0x30, 0x08, 0xa2, 0x50, 0xf8, 0x84, 0xf1,
	0xfd, 0xf3, 0x97, 0x59, 0xc6, 0xb5, 0x76, 0x6b, 0x2c, 0x94, 0x15, 0xff, 0x5f, 0x2d, 0x6f, 0x28,
	0xa9, 0xf4, 0x17, 0x0c, 0x46, 0xa4, 0x70, 0x89, 0x53, 0x19, 0xaa, 0x04, 0xaa, 0xa1, 0xb0, 0xbc,
	0xc6, 0x15, 0x79, 0xc0, 0x2b, 0xad, 0x49, 0x0d, 0x91, 0x0f, 0xbb, 0xdf, 0x90, 0xfb, 0x3c, 0x25,
	0xd1, 0xf2, 0xee, 0x86, 0x70, 0xa9, 0x8d, 0x9d, 0xb4, 0x38, 0x51, 0xb1, 0x98, 0xe7, 0x77, 0x98,
	0xaf, 0xd6, 0x57, 0x73, 0x54, 0xc5, 0x3a, 0xb4, 0xff, 0x23, 0x38, 0xb3, 0x78, 0x2a, 0xf2, 0x78,
	0x02, 0xc3, 0x80, 0xe6, 0xef, 0xd0, 0x24, 0x88, 0xc2, 0xa4, 0x31, 0xb5, 0xb5, 0xeb, 0x6f, 0xd6,
	0xee, 0x31, 0xb8, 0x57, 0x84, 0x8b, 0x4b, 0x49, 0xf9, 0x54, 0x7e, 0x26, 0xe5, 0xff, 0x69, 0xc1,
	0xde, 0x25, 0xa6, 0x78, 0x4e, 0xb2, 0x8b, 0x17, 0x57, 0xff, 0xc5, 0x1d, 0xc6, 0xb0, 0x2d, 0x40,
	0x73, 0x7e, 0x0d, 0x85, 0x65, 0x56, 0xa4, 0xd2, 0xa2, 0xf5, 0xd5, 0xb0, 0x55, 0x73, 0xbb, 0x5d,
	0xf3, 0x6e, 0x4e, 0xce, 0xdb, 0x39, 0xfd, 0x04, 0x10, 0x44, 0xe1, 0xe5, 0x72, 0x51, 0xe5, 0xaa,
	0xcf, 0xfe, 0x67, 0x4d, 0x7f, 0xed, 0xc3, 0xee, 0x7a, 0xbc, 0x8b, 0xc5, 0x4a, 0x24, 0x7a, 0xb5,
	0x4c, 0xd3, 0x7a, 0x4a, 0x76, 0x92, 0x1a, 0xa2, 0x4f, 0xc0, 0x09, 0xe3, 0xeb, 0x55, 0xa1, 0xa6,
	0x79, 0x34, 0x71, 0xe5, 0x89, 0x8a, 0x4a, 0xb4, 0x09, 0xf9, 0x60, 0xcf, 0x8a, 0x34, 0x2c, 0xe4,
	0x59, 0xee, 0x04, 0xa4, 0x8f, 0x1c, 0xa2, 0xf3, 0x5e, 0xa2, 0x4c, 0xe8, 0x53, 0x70, 0x66, 0x45,
	0x1a, 0xd0, 0x5c, 0x4a, 0xe9, 0xea, 0x0f, 0xa9, 0xb6, 0x3a, 0xef, 0x25, 0xda, 0x88, 0x9e, 0x03,
	0x34, 0xd5, 0x96, 0xd2, 0xba, 0x13, 0x24, 0x5d, 0x5b, 0x4d, 0x70, 0xde, 0x4b, 0x0c, 0x3f, 0xf4,
	0xb9, 0x29, 0xa8, 0x54, 0xdc, 0x9d, 0xec, 0xd7, 0x1a, 0x6a, 0x5a, 0x84, 0x34, 0xe8, 0xd5, 0x1e,
	0xb8, 0x11, 0xa9, 0x1e, 0x18, 0x7f, 0x13, 0xd2, 0x5b, 0xe6, 0xff, 0xdc, 0x07, 0x2f, 0x21, 0x0b,
	0x82, 0x4b, 0xf2, 0x21, 0xed, 0xbc, 0x46, 0xfe, 0xad, 0xcd, 0xf2, 0x9b, 0xcb, 0xc5, 0xee, 0x2c,
	0x17, 0x63, 0x79, 0x38, 0xed, 0xe5, 0x71, 0x04, 0x4e, 0x42, 0x70, 0xc9, 0xe8, 0x78, 0x5b, 0x2d,
	0x4e, 0x85, 0xfc, 0xef, 0x61, 0x64, 0x08, 0xf1, 0xef, 0xdd, 0x61, 0x9e, 0xdc, 0xef, 0x9c, 0xdc,
	0x5d, 0x41, 0x83, 0xb7, 0x57, 0x90, 0xff, 0x9b, 0x05, 0xa3, 0xd7, 0xa4, 0x12, 0x15, 0xf8, 0x60,
	0x34, 0xf7, 0x7f, 0xb1, 0x60, 0x77, 0x7d, 0x29, 0x91, 0x7f, 0x53, 0x04, 0x6b, 0x73, 0x11, 0xde,
	0x77, 0x3a, 0xcd, 0xcd, 0x31, 0xe8, 0x6c, 0x8e, 0x43, 0xb0, 0xc5, 0x85, 0xe2, 0xfa, 0x17, 0x4e,
	0x02, 0xff, 0x6f, 0x0b, 0x76, 0x83, 0x7b, 0x42, 0xab, 0x5a, 0xa2, 0x09, 0xb8, 0x12, 0x5f, 0x63,
	0x3e, 0x27, 0x95, 0xbe, 0x94, 0xa7, 0xda, 0xbd, 0xe1, 0x13, 0xd3, 0xa9, 0x23, 0x6b, 0xff, 0x7d,
	0x64, 0x1d, 0xbc, 0x5b, 0xd6, 0xcf, 0x60, 0xa8, 0x3e, 0xdc, 0x74, 0xe5, 0xc8, 0x38, 0x5b, 0x68,
	0xd2, 0x38, 0x18, 0x5d, 0x66, 0x9b, 0x5d, 0x26, 0xfb, 0x92, 0x94, 0x25, 0x9e, 0x93, 0x75, 0x5f,
	0x2a, 0xe8, 0x7f, 0x0d, 0xa0, 0xb3, 0x35, 0x7b, 0x8f, 0x64, 0xad, 0xde, 0x23, 0xf2, 0x39, 0x10,
	0x70, 0xce, 0xea, 0xc6, 0x53, 0xe0, 0xe4, 0xdb, 0xba, 0x56, 0x68, 0x0f, 0x86, 0xe2, 0xaf, 0x5c,
	0x43, 0x5e, 0x0f, 0x8d, 0x00, 0x34, 0x0c, 0xa2, 0xd0, 0xb3, 0x10, 0x82, 0x91, 0xc0, 0xcd, 0x12,
	0xf1, 0xfa, 0x35, 0xd7, 0x6c, 0x09, 0x6f, 0x70, 0x72, 0xd6, 0x12, 0x1b, 0x1d, 0xc0, 0xbe, 0x01,
	0x45, 0xe5, 0xbc, 0x9e, 0x88, 0x33, 0xc8, 0x98, 0x65, 0x9e, 0x75, 0x72, 0x66, 0xc8, 0xd4, 0x44,
	0xad, 0x0a, 0x12, 0x31, 0x7e, 0x87, 0x17, 0x5e, 0x0f, 0x1d, 0x82, 0xb7, 0x26, 0xbf, 0xc3, 0x9c,
	0xe6, 0x74, 0xee, 0x59, 0x93, 0xbf, 0x2c, 0xd8, 0xbb, 0x26, 0xfc, 0x01, 0xaf, 0x5e, 0xe1, 0xf4,
	0x0d, 0xa1, 0x19, 0x3a, 0x85, 0x6d, 0xbd, 0xac, 0xd1, 0x81, 0x14, 0xba, 0xfd, 0x32, 0x3b, 0x7e,
	0xd4, 0x26, 0x8b, 0xc5, 0xca, 0xef, 0xa1, 0xaf, 0x60, 0xb8, 0x9e, 0x62, 0xf4, 0x91, 0xf4, 0xe8,
	0xae, 0xb7, 0xe3, 0x83, 0x2e, 0xad, 0x42, 0xbf, 0x80, 0xa1, 0x68, 0xff, 0x58, 0x0c, 0x80, 0x3e,
	0xb1, 0x3d, 0xa3, 0xfa, 0x44, 0x73, 0x46, 0xfc, 0x1e, 0x3a, 0x05, 0x37, 0x21, 0x29, 0xe3, 0x99,
	0x4c, 0x0a, 0x3d, 0x6a, 0x7a, 0xa2, 0x0e, 0xdb, 0x37, 0x29, 0x19, 0x74, 0xe3, 0xc8, 0x47, 0xe7,
	0xe9, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xd7, 0x00, 0x01, 0xdf, 0x81, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TerwayBackendClient is the client API for TerwayBackend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TerwayBackendClient interface {
	AllocIP(ctx context.Context, in *AllocIPRequest, opts ...grpc.CallOption) (*AllocIPReply, error)
	ReleaseIP(ctx context.Context, in *ReleaseIPRequest, opts ...grpc.CallOption) (*ReleaseIPReply, error)
	GetIPInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoReply, error)
	RecordEvent(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventReply, error)
}

type terwayBackendClient struct {
	cc *grpc.ClientConn
}

func NewTerwayBackendClient(cc *grpc.ClientConn) TerwayBackendClient {
	return &terwayBackendClient{cc}
}

func (c *terwayBackendClient) AllocIP(ctx context.Context, in *AllocIPRequest, opts ...grpc.CallOption) (*AllocIPReply, error) {
	out := new(AllocIPReply)
	err := c.cc.Invoke(ctx, "/rpc.TerwayBackend/AllocIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terwayBackendClient) ReleaseIP(ctx context.Context, in *ReleaseIPRequest, opts ...grpc.CallOption) (*ReleaseIPReply, error) {
	out := new(ReleaseIPReply)
	err := c.cc.Invoke(ctx, "/rpc.TerwayBackend/ReleaseIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terwayBackendClient) GetIPInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoReply, error) {
	out := new(GetInfoReply)
	err := c.cc.Invoke(ctx, "/rpc.TerwayBackend/GetIPInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terwayBackendClient) RecordEvent(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventReply, error) {
	out := new(EventReply)
	err := c.cc.Invoke(ctx, "/rpc.TerwayBackend/RecordEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TerwayBackendServer is the server API for TerwayBackend service.
type TerwayBackendServer interface {
	AllocIP(context.Context, *AllocIPRequest) (*AllocIPReply, error)
	ReleaseIP(context.Context, *ReleaseIPRequest) (*ReleaseIPReply, error)
	GetIPInfo(context.Context, *GetInfoRequest) (*GetInfoReply, error)
	RecordEvent(context.Context, *EventRequest) (*EventReply, error)
}

// UnimplementedTerwayBackendServer can be embedded to have forward compatible implementations.
type UnimplementedTerwayBackendServer struct {
}

func (*UnimplementedTerwayBackendServer) AllocIP(ctx context.Context, req *AllocIPRequest) (*AllocIPReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocIP not implemented")
}
func (*UnimplementedTerwayBackendServer) ReleaseIP(ctx context.Context, req *ReleaseIPRequest) (*ReleaseIPReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseIP not implemented")
}
func (*UnimplementedTerwayBackendServer) GetIPInfo(ctx context.Context, req *GetInfoRequest) (*GetInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIPInfo not implemented")
}
func (*UnimplementedTerwayBackendServer) RecordEvent(ctx context.Context, req *EventRequest) (*EventReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordEvent not implemented")
}

func RegisterTerwayBackendServer(s *grpc.Server, srv TerwayBackendServer) {
	s.RegisterService(&_TerwayBackend_serviceDesc, srv)
}

func _TerwayBackend_AllocIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerwayBackendServer).AllocIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.TerwayBackend/AllocIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerwayBackendServer).AllocIP(ctx, req.(*AllocIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerwayBackend_ReleaseIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerwayBackendServer).ReleaseIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.TerwayBackend/ReleaseIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerwayBackendServer).ReleaseIP(ctx, req.(*ReleaseIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerwayBackend_GetIPInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerwayBackendServer).GetIPInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.TerwayBackend/GetIPInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerwayBackendServer).GetIPInfo(ctx, req.(*GetInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerwayBackend_RecordEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerwayBackendServer).RecordEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.TerwayBackend/RecordEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerwayBackendServer).RecordEvent(ctx, req.(*EventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TerwayBackend_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.TerwayBackend",
	HandlerType: (*TerwayBackendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AllocIP",
			Handler:    _TerwayBackend_AllocIP_Handler,
		},
		{
			MethodName: "ReleaseIP",
			Handler:    _TerwayBackend_ReleaseIP_Handler,
		},
		{
			MethodName: "GetIPInfo",
			Handler:    _TerwayBackend_GetIPInfo_Handler,
		},
		{
			MethodName: "RecordEvent",
			Handler:    _TerwayBackend_RecordEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}
