syntax = "proto3";
package rpc;
option go_package = "./;rpc";

service TerwayBackend {
  rpc AllocIP (AllocIPRequest) returns (AllocIPReply) {
  }
  rpc ReleaseIP (ReleaseIPRequest) returns (ReleaseIPReply) {
  }
  rpc GetIPInfo(GetInfoRequest) returns (GetInfoReply) {
  }
  rpc RecordEvent(EventRequest) returns (EventReply) {
  }
}

// IPSet declare a string set contain v4 v6 info
message IPSet {
  string IPv4 = 1;
  string IPv6 = 2;
}

message AllocIPRequest {
  string K8sPodName = 1;
  string K8sPodNamespace = 2;
  string K8sPodInfraContainerId = 3;
  string Netns = 4;
  string IfName = 5;
}

message NetConf {
  BasicInfo BasicInfo = 1;
  ENIInfo ENIInfo = 2;
  Pod Pod = 3;
  string IfName = 4;
  repeated Route ExtraRoutes = 5;
  bool DefaultRoute = 6;
}

message AllocIPReply {
  bool Success = 1;
  IPType   IPType = 2;
  bool IPv4 = 3;
  bool IPv6 = 4;
  repeated NetConf NetConfs = 5;
  bool EnableTrunking = 6;
}

message BasicInfo {
  IPSet PodIP = 1;
  IPSet PodCIDR = 2; // subnet for pod, value form vSwitch CIDR or podCIDR
  IPSet GatewayIP = 3; // gw for the subnet
  IPSet ServiceCIDR = 4;
}

message ENIInfo {
  string MAC = 1;
  bool Trunk = 2; // eni is trunk
  uint32 Vid = 3;
}

message Route {
  string Dst = 1;
}

enum IPType {
  TypeVPCIP = 0;
  TypeVPCENI = 1;
  TypeENIMultiIP = 2;
}

// VETH Basic
message Pod {
  uint64 Ingress = 1;
  uint64 Egress = 2;
}

message ReleaseIPRequest {
  string K8sPodName = 1;
  string K8sPodNamespace = 2;
  string K8sPodInfraContainerId = 3;
  IPType IPType = 4;
  IPSet IPv4Addr = 5;
  string MacAddr = 6;
  string Reason = 7;
}

message ReleaseIPReply {
  bool Success = 1;
  IPSet IPv4Addr = 2;
  int32 DeviceNumber = 3;
  bool IPv4 = 4;
  bool IPv6 = 5;
}

message GetInfoRequest {
  string K8sPodName = 1;
  string K8sPodNamespace = 2;
  string K8sPodInfraContainerId = 3;
}

message GetInfoReply {
  IPType   IPType = 1;
  bool Success = 2;
  bool IPv4 = 3;
  bool IPv6 = 4;
  repeated NetConf NetConfs = 5;
  bool EnableTrunking = 6;
  Error Error = 7;
}

enum Error {
  ErrNoErr = 0;
  ErrCRDNotFound = 1;
}

enum EventTarget {
  EventTargetNode = 0;
  EventTargetPod = 1;
}

enum EventType {
  EventTypeNormal = 0;
  EventTypeWarning = 1;
}

message EventRequest {
  EventTarget EventTarget = 1;
  string K8sPodName = 2;
  string K8sPodNamespace = 3;
  EventType EventType = 4;
  string Reason = 5;
  string Message = 6;
}

message EventReply {
  bool Succeed = 1;
  string Error = 2;
}
