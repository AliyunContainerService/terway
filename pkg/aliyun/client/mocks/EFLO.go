// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"

	eflo "github.com/aliyun/alibaba-cloud-sdk-go/services/eflo"
	mock "github.com/stretchr/testify/mock"
)

// EFLO is an autogenerated mock type for the EFLO type
type EFLO struct {
	mock.Mock
}

// GetNodeInfoForPod provides a mock function with given fields: ctx, nodeID
func (_m *EFLO) GetNodeInfoForPod(ctx context.Context, nodeID string) (*eflo.Content, error) {
	ret := _m.Called(ctx, nodeID)

	if len(ret) == 0 {
		panic("no return value specified for GetNodeInfoForPod")
	}

	var r0 *eflo.Content
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*eflo.Content, error)); ok {
		return rf(ctx, nodeID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *eflo.Content); ok {
		r0 = rf(ctx, nodeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eflo.Content)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, nodeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewEFLO creates a new instance of EFLO. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEFLO(t interface {
	mock.TestingT
	Cleanup(func())
}) *EFLO {
	mock := &EFLO{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
