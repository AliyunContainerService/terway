// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	client "github.com/AliyunContainerService/terway/pkg/aliyun/client"

	mock "github.com/stretchr/testify/mock"
)

// EFLOControl is an autogenerated mock type for the EFLOControl type
type EFLOControl struct {
	mock.Mock
}

// DescribeNode provides a mock function with given fields: ctx, opts
func (_m *EFLOControl) DescribeNode(ctx context.Context, opts ...client.DescribeNodeRequestOption) (*client.DescribeNodeResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeNode")
	}

	var r0 *client.DescribeNodeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...client.DescribeNodeRequestOption) (*client.DescribeNodeResponse, error)); ok {
		return rf(ctx, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...client.DescribeNodeRequestOption) *client.DescribeNodeResponse); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.DescribeNodeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...client.DescribeNodeRequestOption) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeNodeType provides a mock function with given fields: ctx, opts
func (_m *EFLOControl) DescribeNodeType(ctx context.Context, opts ...client.DescribeNodeTypeRequestOption) (*client.DescribeNodeTypeResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeNodeType")
	}

	var r0 *client.DescribeNodeTypeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...client.DescribeNodeTypeRequestOption) (*client.DescribeNodeTypeResponse, error)); ok {
		return rf(ctx, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...client.DescribeNodeTypeRequestOption) *client.DescribeNodeTypeResponse); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.DescribeNodeTypeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...client.DescribeNodeTypeRequestOption) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewEFLOControl creates a new instance of EFLOControl. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEFLOControl(t interface {
	mock.TestingT
	Cleanup(func())
}) *EFLOControl {
	mock := &EFLOControl{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
