// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	client "github.com/AliyunContainerService/terway/pkg/aliyun/client"

	ecs "github.com/aliyun/alibaba-cloud-sdk-go/services/ecs"

	mock "github.com/stretchr/testify/mock"

	netip "net/netip"

	wait "k8s.io/apimachinery/pkg/util/wait"
)

// ECS is an autogenerated mock type for the ECS type
type ECS struct {
	mock.Mock
}

// AssignIpv6Addresses provides a mock function with given fields: ctx, opts
func (_m *ECS) AssignIpv6Addresses(ctx context.Context, opts ...client.AssignIPv6AddressesOption) ([]netip.Addr, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssignIpv6Addresses")
	}

	var r0 []netip.Addr
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...client.AssignIPv6AddressesOption) ([]netip.Addr, error)); ok {
		return rf(ctx, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...client.AssignIPv6AddressesOption) []netip.Addr); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]netip.Addr)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...client.AssignIPv6AddressesOption) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssignIpv6Addresses2 provides a mock function with given fields: ctx, opts
func (_m *ECS) AssignIpv6Addresses2(ctx context.Context, opts ...client.AssignIPv6AddressesOption) ([]client.IPSet, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssignIpv6Addresses2")
	}

	var r0 []client.IPSet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...client.AssignIPv6AddressesOption) ([]client.IPSet, error)); ok {
		return rf(ctx, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...client.AssignIPv6AddressesOption) []client.IPSet); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.IPSet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...client.AssignIPv6AddressesOption) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssignPrivateIPAddress provides a mock function with given fields: ctx, opts
func (_m *ECS) AssignPrivateIPAddress(ctx context.Context, opts ...client.AssignPrivateIPAddressOption) ([]netip.Addr, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssignPrivateIPAddress")
	}

	var r0 []netip.Addr
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...client.AssignPrivateIPAddressOption) ([]netip.Addr, error)); ok {
		return rf(ctx, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...client.AssignPrivateIPAddressOption) []netip.Addr); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]netip.Addr)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...client.AssignPrivateIPAddressOption) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssignPrivateIPAddress2 provides a mock function with given fields: ctx, opts
func (_m *ECS) AssignPrivateIPAddress2(ctx context.Context, opts ...client.AssignPrivateIPAddressOption) ([]client.IPSet, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssignPrivateIPAddress2")
	}

	var r0 []client.IPSet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...client.AssignPrivateIPAddressOption) ([]client.IPSet, error)); ok {
		return rf(ctx, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...client.AssignPrivateIPAddressOption) []client.IPSet); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.IPSet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...client.AssignPrivateIPAddressOption) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AttachNetworkInterface provides a mock function with given fields: ctx, opts
func (_m *ECS) AttachNetworkInterface(ctx context.Context, opts ...client.AttachNetworkInterfaceOption) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AttachNetworkInterface")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ...client.AttachNetworkInterfaceOption) error); ok {
		r0 = rf(ctx, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateNetworkInterface provides a mock function with given fields: ctx, opts
func (_m *ECS) CreateNetworkInterface(ctx context.Context, opts ...client.CreateNetworkInterfaceOption) (*client.NetworkInterface, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateNetworkInterface")
	}

	var r0 *client.NetworkInterface
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...client.CreateNetworkInterfaceOption) (*client.NetworkInterface, error)); ok {
		return rf(ctx, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...client.CreateNetworkInterfaceOption) *client.NetworkInterface); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkInterface)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...client.CreateNetworkInterfaceOption) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteNetworkInterface provides a mock function with given fields: ctx, eniID
func (_m *ECS) DeleteNetworkInterface(ctx context.Context, eniID string) error {
	ret := _m.Called(ctx, eniID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNetworkInterface")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, eniID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeInstanceTypes provides a mock function with given fields: ctx, types
func (_m *ECS) DescribeInstanceTypes(ctx context.Context, types []string) ([]ecs.InstanceType, error) {
	ret := _m.Called(ctx, types)

	if len(ret) == 0 {
		panic("no return value specified for DescribeInstanceTypes")
	}

	var r0 []ecs.InstanceType
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]ecs.InstanceType, error)); ok {
		return rf(ctx, types)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []ecs.InstanceType); ok {
		r0 = rf(ctx, types)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ecs.InstanceType)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, types)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeNetworkInterface provides a mock function with given fields: ctx, vpcID, eniID, instanceID, instanceType, status, tags
func (_m *ECS) DescribeNetworkInterface(ctx context.Context, vpcID string, eniID []string, instanceID string, instanceType string, status string, tags map[string]string) ([]*client.NetworkInterface, error) {
	ret := _m.Called(ctx, vpcID, eniID, instanceID, instanceType, status, tags)

	if len(ret) == 0 {
		panic("no return value specified for DescribeNetworkInterface")
	}

	var r0 []*client.NetworkInterface
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, string, string, string, map[string]string) ([]*client.NetworkInterface, error)); ok {
		return rf(ctx, vpcID, eniID, instanceID, instanceType, status, tags)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, string, string, string, map[string]string) []*client.NetworkInterface); ok {
		r0 = rf(ctx, vpcID, eniID, instanceID, instanceType, status, tags)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*client.NetworkInterface)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []string, string, string, string, map[string]string) error); ok {
		r1 = rf(ctx, vpcID, eniID, instanceID, instanceType, status, tags)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeNetworkInterface2 provides a mock function with given fields: ctx, opts
func (_m *ECS) DescribeNetworkInterface2(ctx context.Context, opts ...client.DescribeNetworkInterfaceOption) ([]*client.NetworkInterface, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeNetworkInterface2")
	}

	var r0 []*client.NetworkInterface
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...client.DescribeNetworkInterfaceOption) ([]*client.NetworkInterface, error)); ok {
		return rf(ctx, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...client.DescribeNetworkInterfaceOption) []*client.NetworkInterface); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*client.NetworkInterface)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...client.DescribeNetworkInterfaceOption) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetachNetworkInterface provides a mock function with given fields: ctx, eniID, instanceID, trunkENIID
func (_m *ECS) DetachNetworkInterface(ctx context.Context, eniID string, instanceID string, trunkENIID string) error {
	ret := _m.Called(ctx, eniID, instanceID, trunkENIID)

	if len(ret) == 0 {
		panic("no return value specified for DetachNetworkInterface")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, eniID, instanceID, trunkENIID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DetachNetworkInterface2 provides a mock function with given fields: ctx, opts
func (_m *ECS) DetachNetworkInterface2(ctx context.Context, opts ...client.DetachNetworkInterfaceOption) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DetachNetworkInterface2")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ...client.DetachNetworkInterfaceOption) error); ok {
		r0 = rf(ctx, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnAssignIpv6Addresses provides a mock function with given fields: ctx, eniID, ips
func (_m *ECS) UnAssignIpv6Addresses(ctx context.Context, eniID string, ips []netip.Addr) error {
	ret := _m.Called(ctx, eniID, ips)

	if len(ret) == 0 {
		panic("no return value specified for UnAssignIpv6Addresses")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []netip.Addr) error); ok {
		r0 = rf(ctx, eniID, ips)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnAssignIpv6Addresses2 provides a mock function with given fields: ctx, eniID, ips
func (_m *ECS) UnAssignIpv6Addresses2(ctx context.Context, eniID string, ips []client.IPSet) error {
	ret := _m.Called(ctx, eniID, ips)

	if len(ret) == 0 {
		panic("no return value specified for UnAssignIpv6Addresses2")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []client.IPSet) error); ok {
		r0 = rf(ctx, eniID, ips)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnAssignPrivateIPAddresses provides a mock function with given fields: ctx, eniID, ips
func (_m *ECS) UnAssignPrivateIPAddresses(ctx context.Context, eniID string, ips []netip.Addr) error {
	ret := _m.Called(ctx, eniID, ips)

	if len(ret) == 0 {
		panic("no return value specified for UnAssignPrivateIPAddresses")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []netip.Addr) error); ok {
		r0 = rf(ctx, eniID, ips)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnAssignPrivateIPAddresses2 provides a mock function with given fields: ctx, eniID, ips
func (_m *ECS) UnAssignPrivateIPAddresses2(ctx context.Context, eniID string, ips []client.IPSet) error {
	ret := _m.Called(ctx, eniID, ips)

	if len(ret) == 0 {
		panic("no return value specified for UnAssignPrivateIPAddresses2")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []client.IPSet) error); ok {
		r0 = rf(ctx, eniID, ips)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitForNetworkInterface provides a mock function with given fields: ctx, eniID, status, backoff, ignoreNotExist
func (_m *ECS) WaitForNetworkInterface(ctx context.Context, eniID string, status string, backoff wait.Backoff, ignoreNotExist bool) (*client.NetworkInterface, error) {
	ret := _m.Called(ctx, eniID, status, backoff, ignoreNotExist)

	if len(ret) == 0 {
		panic("no return value specified for WaitForNetworkInterface")
	}

	var r0 *client.NetworkInterface
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, wait.Backoff, bool) (*client.NetworkInterface, error)); ok {
		return rf(ctx, eniID, status, backoff, ignoreNotExist)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, wait.Backoff, bool) *client.NetworkInterface); ok {
		r0 = rf(ctx, eniID, status, backoff, ignoreNotExist)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkInterface)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, wait.Backoff, bool) error); ok {
		r1 = rf(ctx, eniID, status, backoff, ignoreNotExist)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewECS creates a new instance of ECS. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewECS(t interface {
	mock.TestingT
	Cleanup(func())
}) *ECS {
	mock := &ECS{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
