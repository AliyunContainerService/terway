// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	client "github.com/AliyunContainerService/terway/pkg/aliyun/client"

	mock "github.com/stretchr/testify/mock"

	wait "k8s.io/apimachinery/pkg/util/wait"
)

// OpenAPI is an autogenerated mock type for the OpenAPI type
type OpenAPI struct {
	mock.Mock
}

// AssignIpv6AddressesV2 provides a mock function with given fields: ctx, opts
func (_m *OpenAPI) AssignIpv6AddressesV2(ctx context.Context, opts ...client.AssignIPv6AddressesOption) ([]client.IPSet, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssignIpv6AddressesV2")
	}

	var r0 []client.IPSet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...client.AssignIPv6AddressesOption) ([]client.IPSet, error)); ok {
		return rf(ctx, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...client.AssignIPv6AddressesOption) []client.IPSet); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.IPSet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...client.AssignIPv6AddressesOption) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssignPrivateIPAddressV2 provides a mock function with given fields: ctx, opts
func (_m *OpenAPI) AssignPrivateIPAddressV2(ctx context.Context, opts ...client.AssignPrivateIPAddressOption) ([]client.IPSet, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssignPrivateIPAddressV2")
	}

	var r0 []client.IPSet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...client.AssignPrivateIPAddressOption) ([]client.IPSet, error)); ok {
		return rf(ctx, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...client.AssignPrivateIPAddressOption) []client.IPSet); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.IPSet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...client.AssignPrivateIPAddressOption) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AttachNetworkInterfaceV2 provides a mock function with given fields: ctx, opts
func (_m *OpenAPI) AttachNetworkInterfaceV2(ctx context.Context, opts ...client.AttachNetworkInterfaceOption) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AttachNetworkInterfaceV2")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ...client.AttachNetworkInterfaceOption) error); ok {
		r0 = rf(ctx, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateNetworkInterfaceV2 provides a mock function with given fields: ctx, opts
func (_m *OpenAPI) CreateNetworkInterfaceV2(ctx context.Context, opts ...client.CreateNetworkInterfaceOption) (*client.NetworkInterface, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateNetworkInterfaceV2")
	}

	var r0 *client.NetworkInterface
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...client.CreateNetworkInterfaceOption) (*client.NetworkInterface, error)); ok {
		return rf(ctx, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...client.CreateNetworkInterfaceOption) *client.NetworkInterface); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkInterface)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...client.CreateNetworkInterfaceOption) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteNetworkInterfaceV2 provides a mock function with given fields: ctx, eniID
func (_m *OpenAPI) DeleteNetworkInterfaceV2(ctx context.Context, eniID string) error {
	ret := _m.Called(ctx, eniID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNetworkInterfaceV2")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, eniID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeNetworkInterfaceV2 provides a mock function with given fields: ctx, opts
func (_m *OpenAPI) DescribeNetworkInterfaceV2(ctx context.Context, opts ...client.DescribeNetworkInterfaceOption) ([]*client.NetworkInterface, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeNetworkInterfaceV2")
	}

	var r0 []*client.NetworkInterface
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...client.DescribeNetworkInterfaceOption) ([]*client.NetworkInterface, error)); ok {
		return rf(ctx, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...client.DescribeNetworkInterfaceOption) []*client.NetworkInterface); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*client.NetworkInterface)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...client.DescribeNetworkInterfaceOption) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetachNetworkInterfaceV2 provides a mock function with given fields: ctx, opts
func (_m *OpenAPI) DetachNetworkInterfaceV2(ctx context.Context, opts ...client.DetachNetworkInterfaceOption) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DetachNetworkInterfaceV2")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ...client.DetachNetworkInterfaceOption) error); ok {
		r0 = rf(ctx, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetECS provides a mock function with no fields
func (_m *OpenAPI) GetECS() client.ECS {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetECS")
	}

	var r0 client.ECS
	if rf, ok := ret.Get(0).(func() client.ECS); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.ECS)
		}
	}

	return r0
}

// GetEFLO provides a mock function with no fields
func (_m *OpenAPI) GetEFLO() client.EFLO {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetEFLO")
	}

	var r0 client.EFLO
	if rf, ok := ret.Get(0).(func() client.EFLO); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.EFLO)
		}
	}

	return r0
}

// GetVPC provides a mock function with no fields
func (_m *OpenAPI) GetVPC() client.VPC {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetVPC")
	}

	var r0 client.VPC
	if rf, ok := ret.Get(0).(func() client.VPC); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.VPC)
		}
	}

	return r0
}

// UnAssignIpv6AddressesV2 provides a mock function with given fields: ctx, eniID, ips
func (_m *OpenAPI) UnAssignIpv6AddressesV2(ctx context.Context, eniID string, ips []client.IPSet) error {
	ret := _m.Called(ctx, eniID, ips)

	if len(ret) == 0 {
		panic("no return value specified for UnAssignIpv6AddressesV2")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []client.IPSet) error); ok {
		r0 = rf(ctx, eniID, ips)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnAssignPrivateIPAddressesV2 provides a mock function with given fields: ctx, eniID, ips
func (_m *OpenAPI) UnAssignPrivateIPAddressesV2(ctx context.Context, eniID string, ips []client.IPSet) error {
	ret := _m.Called(ctx, eniID, ips)

	if len(ret) == 0 {
		panic("no return value specified for UnAssignPrivateIPAddressesV2")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []client.IPSet) error); ok {
		r0 = rf(ctx, eniID, ips)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitForNetworkInterfaceV2 provides a mock function with given fields: ctx, eniID, status, backoff, ignoreNotExist
func (_m *OpenAPI) WaitForNetworkInterfaceV2(ctx context.Context, eniID string, status string, backoff wait.Backoff, ignoreNotExist bool) (*client.NetworkInterface, error) {
	ret := _m.Called(ctx, eniID, status, backoff, ignoreNotExist)

	if len(ret) == 0 {
		panic("no return value specified for WaitForNetworkInterfaceV2")
	}

	var r0 *client.NetworkInterface
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, wait.Backoff, bool) (*client.NetworkInterface, error)); ok {
		return rf(ctx, eniID, status, backoff, ignoreNotExist)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, wait.Backoff, bool) *client.NetworkInterface); ok {
		r0 = rf(ctx, eniID, status, backoff, ignoreNotExist)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkInterface)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, wait.Backoff, bool) error); ok {
		r1 = rf(ctx, eniID, status, backoff, ignoreNotExist)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewOpenAPI creates a new instance of OpenAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOpenAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *OpenAPI {
	mock := &OpenAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
