From 141592dcdaa3018cb23d86f16f90e6b64a0f0f87 Mon Sep 17 00:00:00 2001
From: "bingshen.wbs" <bingshen.wbs@alibaba-inc.com>
Date: Mon, 11 Mar 2019 14:36:25 +0800
Subject: [PATCH] terway

---
 calc/calc_graph.go               |  5 +++--
 daemon/daemon.go                 | 36 ++++++++++++++++++------------------
 dataplane/linux/endpoint_mgr.go  | 18 +++++++++---------
 dataplane/linux/int_dataplane.go |  4 ++--
 dataplane/linux/masq_mgr.go      |  8 +++++++-
 5 files changed, 39 insertions(+), 32 deletions(-)

diff --git a/calc/calc_graph.go b/calc/calc_graph.go
index 0eaa6890..4127acfd 100644
--- a/calc/calc_graph.go
+++ b/calc/calc_graph.go
@@ -296,8 +296,9 @@ func NewCalculationGraph(callbacks PipelineCallbacks, hostname string) *CalcGrap
 	//         |
 	//      <dataplane>
 	//
-	configBatcher := NewConfigBatcher(hostname, callbacks)
-	configBatcher.RegisterWith(allUpdDispatcher)
+	// disable config processer for terway
+	//configBatcher := NewConfigBatcher(hostname, callbacks)
+	//configBatcher.RegisterWith(allUpdDispatcher)

 	// The profile decoder identifies objects with special dataplane significance which have
 	// been encoded as profiles by libcalico-go. At present this includes Kubernetes Service
diff --git a/daemon/daemon.go b/daemon/daemon.go
index b08a84c8..6c3e6746 100644
--- a/daemon/daemon.go
+++ b/daemon/daemon.go
@@ -119,7 +119,7 @@ func Run(configFile string) {
 	// Initialise early so we can trace out config parsing.
 	logutils.ConfigureEarlyLogging()

-	ctx := context.Background()
+	//ctx := context.Background()

 	if os.Getenv("GOGC") == "" {
 		// Tune the GC to trade off a little extra CPU usage for significantly lower
@@ -216,23 +216,23 @@ configRetry:
 		}
 		log.Info("Created datastore client")
 		numClientsCreated++
-		for {
-			globalConfig, hostConfig, err := loadConfigFromDatastore(
-				ctx, backendClient, configParams.FelixHostname)
-			if err == ErrNotReady {
-				log.Warn("Waiting for datastore to be initialized (or migrated)")
-				time.Sleep(1 * time.Second)
-				healthAggregator.Report(healthName, &health.HealthReport{Live: true, Ready: true})
-				continue
-			} else if err != nil {
-				log.WithError(err).Error("Failed to get config from datastore")
-				time.Sleep(1 * time.Second)
-				continue configRetry
-			}
-			configParams.UpdateFrom(globalConfig, config.DatastoreGlobal)
-			configParams.UpdateFrom(hostConfig, config.DatastorePerHost)
-			break
-		}
+		//for {
+		//	globalConfig, hostConfig, err := loadConfigFromDatastore(
+		//		ctx, backendClient, configParams.FelixHostname)
+		//	if err == ErrNotReady {
+		//		log.Warn("Waiting for datastore to be initialized (or migrated)")
+		//		time.Sleep(1 * time.Second)
+		//		healthAggregator.Report(healthName, &health.HealthReport{Live: true, Ready: true})
+		//		continue
+		//	} else if err != nil {
+		//		log.WithError(err).Error("Failed to get config from datastore")
+		//		time.Sleep(1 * time.Second)
+		//		continue configRetry
+		//	}
+		//	configParams.UpdateFrom(globalConfig, config.DatastoreGlobal)
+		//	configParams.UpdateFrom(hostConfig, config.DatastorePerHost)
+		//	break
+		//}
 		configParams.Validate()
 		if configParams.Err != nil {
 			log.WithError(configParams.Err).Error(
diff --git a/dataplane/linux/endpoint_mgr.go b/dataplane/linux/endpoint_mgr.go
index 81f7a010..0bbfb601 100644
--- a/dataplane/linux/endpoint_mgr.go
+++ b/dataplane/linux/endpoint_mgr.go
@@ -519,15 +519,15 @@ func (m *endpointManager) resolveWorkloadEndpoints() {
 		m.needToCheckEndpointMarkChains = true
 	}

-	m.wlIfaceNamesToReconfigure.Iter(func(item interface{}) error {
-		ifaceName := item.(string)
-		err := m.configureInterface(ifaceName)
-		if err != nil {
-			log.WithError(err).Warn("Failed to configure interface, will retry")
-			return nil
-		}
-		return set.RemoveItem
-	})
+	//m.wlIfaceNamesToReconfigure.Iter(func(item interface{}) error {
+	//	ifaceName := item.(string)
+	//	err := m.configureInterface(ifaceName)
+	//	if err != nil {
+	//		log.WithError(err).Warn("Failed to configure interface, will retry")
+	//		return nil
+	//	}
+	//	return set.RemoveItem
+	//})
 }

 func (m *endpointManager) resolveEndpointMarks() {
diff --git a/dataplane/linux/int_dataplane.go b/dataplane/linux/int_dataplane.go
index 92b3183c..94dd252b 100644
--- a/dataplane/linux/int_dataplane.go
+++ b/dataplane/linux/int_dataplane.go
@@ -532,7 +532,7 @@ func (d *InternalDataplane) doStaticDataplaneConfig() {
 	// Endure that the default value of rp_filter is set to "strict" for newly-created
 	// interfaces.  This is required to prevent a race between starting an interface and
 	// Felix being able to configure it.
-	writeProcSys("/proc/sys/net/ipv4/conf/default/rp_filter", "1")
+	//writeProcSys("/proc/sys/net/ipv4/conf/default/rp_filter", "1")

 	for _, t := range d.iptablesRawTables {
 		rawChains := d.ruleRenderer.StaticRawTableChains(t.IPVersion)
@@ -832,7 +832,7 @@ func (d *InternalDataplane) configureKernel() {

 	// Make sure the default for new interfaces is set to strict checking so that there's no
 	// race when a new interface is added and felix hasn't configured it yet.
-	writeProcSys("/proc/sys/net/ipv4/conf/default/rp_filter", "1")
+	//writeProcSys("/proc/sys/net/ipv4/conf/default/rp_filter", "1")
 }

 func readRPFilter() (value int64, err error) {
diff --git a/dataplane/linux/masq_mgr.go b/dataplane/linux/masq_mgr.go
index 402a4507..09a451a4 100644
--- a/dataplane/linux/masq_mgr.go
+++ b/dataplane/linux/masq_mgr.go
@@ -15,6 +15,7 @@
 package intdataplane

 import (
+	"os"
 	"strings"

 	log "github.com/sirupsen/logrus"
@@ -69,6 +70,11 @@ func newMasqManager(
 		Type:    ipsets.IPSetTypeHashNet,
 	}, []string{})

+	if os.Getenv("CALICO_IPV4POOL_CIDR") != "" {
+		ipsetsDataplane.AddMembers(rules.IPSetIDNATOutgoingMasqPools, []string{os.Getenv("CALICO_IPV4POOL_CIDR")})
+		ipsetsDataplane.AddMembers(rules.IPSetIDNATOutgoingAllPools, []string{os.Getenv("CALICO_IPV4POOL_CIDR")})
+	}
+
 	return &masqManager{
 		ipVersion:       ipVersion,
 		ipsetsDataplane: ipsetsDataplane,
@@ -142,7 +148,7 @@ func (m *masqManager) CompleteDeferredWork() error {
 	// Refresh the chain in case we've gone from having no masq pools to
 	// having some or vice-versa.
 	m.logCxt.Info("IPAM pools updated, refreshing iptables rule")
-	chain := m.ruleRenderer.NATOutgoingChain(m.masqPools.Len() > 0, m.ipVersion)
+	chain := m.ruleRenderer.NATOutgoingChain(true, m.ipVersion)
 	m.natTable.UpdateChain(chain)
 	m.dirty = false

-- 
2.15.1

