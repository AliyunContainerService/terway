From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=E6=B8=85=E5=BC=A6?= <libokang.lbk@alibaba-inc.com>
Date: Fri, 26 May 2023 15:14:29 +0800
Subject: [PATCH] bpf: cilium-map-migrate might unpin in-use tailcall map
 #16561
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

https://github.com/cilium/cilium/issues/16561
Signed-off-by: 清弦 <libokang.lbk@alibaba-inc.com>
---
 pkg/datapath/loader/loader.go | 36 ++++++++++++++++++++---------------
 1 file changed, 21 insertions(+), 15 deletions(-)

diff --git a/pkg/datapath/loader/loader.go b/pkg/datapath/loader/loader.go
index 629ef1bece..ab692881f7 100644
--- a/pkg/datapath/loader/loader.go
+++ b/pkg/datapath/loader/loader.go
@@ -283,7 +283,8 @@ func (l *Loader) reloadDatapath(ctx context.Context, ep datapath.Endpoint, dirs
 			return err
 		}
 	} else if true {
-		if err := graftDatapath(ctx, ep.MapPath(), objPath, symbolFromEndpoint, 0); err != nil {
+		finalize, err := graftDatapath(ctx, ep.MapPath(), objPath, symbolFromEndpoint, 0)
+		if err != nil {
 			scopedLog := ep.Logger(Subsystem).WithFields(logrus.Fields{
 				logfields.Path: objPath,
 			})
@@ -295,8 +296,11 @@ func (l *Loader) reloadDatapath(ctx context.Context, ep datapath.Endpoint, dirs
 			}
 			return err
 		}
+		defer finalize()
+
 		if ep.RequireEgressProg() {
-			if err := graftDatapath(ctx, ep.MapPath(), objPath, symbolToEndpoint, 1); err != nil {
+			finalize, err := graftDatapath(ctx, ep.MapPath(), objPath, symbolToEndpoint, 1)
+			if err != nil {
 				scopedLog := ep.Logger(Subsystem).WithFields(logrus.Fields{
 					logfields.Path: objPath,
 				})
@@ -308,6 +312,7 @@ func (l *Loader) reloadDatapath(ctx context.Context, ep datapath.Endpoint, dirs
 				}
 				return err
 			}
+			defer finalize()
 		}
 	} else {
 		finalize, err := replaceDatapath(ctx, ep.InterfaceName(), objPath, symbolFromEndpoint, dirIngress, false, "")
@@ -526,19 +531,11 @@ func (l *Loader) CustomCallsMapPath(id uint16) string {
 }
 
 // graftDatapath replaces obj in tail call map
-func graftDatapath(ctx context.Context, mapPath, objPath, progSec string, key int) error {
+func graftDatapath(ctx context.Context, mapPath, objPath, progSec string, key int) (func(), error) {
 	if err := bpf.StartBPFFSMigration(bpf.MapPrefixPath(), objPath); err != nil {
-		return fmt.Errorf("Failed to start bpffs map migration: %w", err)
+		return nil, fmt.Errorf("Failed to start bpffs map migration: %w", err)
 	}
 
-	var revert bool
-	defer func() {
-		if err := bpf.FinalizeBPFFSMigration(bpf.MapPrefixPath(), objPath, revert); err != nil {
-			log.WithError(err).WithFields(logrus.Fields{logfields.BPFMapPath: mapPath, "objPath": objPath}).
-				Error("Could not finalize bpffs map migration")
-		}
-	}()
-
 	// FIXME: replace exec with native call
 	// FIXME: only key 0 right now, could be made more flexible
 	args := []string{"exec", "bpf", "graft", mapPath, "key", strconv.FormatInt(int64(key), 10),
@@ -546,9 +543,18 @@ func graftDatapath(ctx context.Context, mapPath, objPath, progSec string, key in
 	}
 	cmd := exec.CommandContext(ctx, "tc", args...).WithFilters(libbpfFixupMsg)
 	if _, err := cmd.CombinedOutput(log, true); err != nil {
-		revert = true
-		return fmt.Errorf("Failed to graft tc object: %s", err)
+		if err := bpf.FinalizeBPFFSMigration(bpf.MapPrefixPath(), objPath, true); err != nil {
+			return nil, fmt.Errorf("Failed to revert bpffs map migration: %w", err)
+		}
+		return nil, fmt.Errorf("Failed to graft tc object: %s", err)
+	}
+	finalize := func() {
+		l := log.WithField("objPath", objPath)
+		l.Debug("Finalizing bpffs map migration")
+		if err := bpf.FinalizeBPFFSMigration(bpf.MapPrefixPath(), objPath, false); err != nil {
+			l.WithError(err).Error("Could not finalize bpffs map migration")
+		}
 	}
 
-	return nil
+	return finalize, nil
 }
-- 
2.40.1

