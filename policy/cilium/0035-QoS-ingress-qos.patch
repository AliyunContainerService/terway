From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: l1b0k <libokang.dev@gmail.com>
Date: Tue, 19 Nov 2024 19:05:45 +0800
Subject: QoS: ingress qos

Signed-off-by: l1b0k <libokang.dev@gmail.com>
---
 bpf/bpf_host.c                      |  7 +++
 bpf/lib/common.h                    | 11 ++++
 bpf/lib/maps.h                      |  9 +++
 bpf/lib/tb.h                        | 62 +++++++++++++++++++
 cilium/cmd/bpf_bandwidth_list.go    | 25 ++++++--
 daemon/cmd/endpoint.go              |  6 +-
 pkg/bandwidth/bandwidth.go          |  5 ++
 pkg/datapath/linux/config/config.go |  3 +
 pkg/endpoint/bpf.go                 |  8 ++-
 pkg/endpoint/endpoint.go            |  6 +-
 pkg/endpoint/events.go              | 92 +++++++++++++++++++++--------
 pkg/k8s/watchers/pod.go             |  7 ++-
 pkg/maps/ingress/bwmap.go           | 61 +++++++++++++++++++
 13 files changed, 264 insertions(+), 38 deletions(-)
 create mode 100644 bpf/lib/tb.h
 create mode 100644 pkg/maps/ingress/bwmap.go

diff --git a/bpf/bpf_host.c b/bpf/bpf_host.c
index e496664e45..a43a8847d3 100644
--- a/bpf/bpf_host.c
+++ b/bpf/bpf_host.c
@@ -57,6 +57,7 @@
 #include "lib/host_firewall.h"
 #include "lib/overloadable.h"
 #include "lib/encrypt.h"
+#include "lib/tb.h"

 static __always_inline bool allow_vlan(__u32 __maybe_unused ifindex, __u32 __maybe_unused vlan_id) {
 	VLAN_FILTER(ifindex, vlan_id);
@@ -271,6 +272,9 @@ skip_host_firewall:
 		if (ep->flags & ENDPOINT_F_HOST)
 			return CTX_ACT_OK;

+		ret = accept(ctx,ep->lxc_id);
+		if (IS_ERR(ret))
+			return ret;
 		return ipv6_local_delivery(ctx, l3_off, secctx, ep,
 					   METRIC_INGRESS, from_host, false);
 	}
@@ -563,6 +567,9 @@ handle_ipv4(struct __ctx_buff *ctx, __u32 secctx,
 		if (ep->flags & ENDPOINT_F_HOST)
 			return CTX_ACT_OK;

+		ret = accept(ctx,ep->lxc_id);
+		if (IS_ERR(ret))
+			return ret;
 		return ipv4_local_delivery(ctx, ETH_HLEN, secctx, ip4, ep,
 					   METRIC_INGRESS, from_host, false);
 	}
diff --git a/bpf/lib/common.h b/bpf/lib/common.h
index 850fd57092..eaf1003419 100644
--- a/bpf/lib/common.h
+++ b/bpf/lib/common.h
@@ -253,6 +253,17 @@ struct edt_info {
 	__u64		pad[4];
 };

+struct throttle_id {
+	__u64		id;
+};
+
+struct throttle_info {
+	__u64		bps;
+	__u64		t_last;
+	__u64		tokens;
+	__u64		pad[4];
+};
+
 struct remote_endpoint_info {
 	__u32		sec_label;
 	__u32		tunnel_endpoint;
diff --git a/bpf/lib/maps.h b/bpf/lib/maps.h
index e3a3e57389..10b6e71196 100644
--- a/bpf/lib/maps.h
+++ b/bpf/lib/maps.h
@@ -62,6 +62,15 @@ struct {
 	__uint(max_entries, THROTTLE_MAP_SIZE);
 	__uint(map_flags, BPF_F_NO_PREALLOC);
 } THROTTLE_MAP __section_maps_btf;
+
+struct {
+	__uint(type, BPF_MAP_TYPE_HASH);
+	__type(key, struct throttle_id);
+	__type(value, struct throttle_info);
+	__uint(pinning, LIBBPF_PIN_BY_NAME);
+	__uint(max_entries, THROTTLE_MAP_SIZE);
+	__uint(map_flags, BPF_F_NO_PREALLOC);
+} INGRESS_THROTTLE_MAP __section_maps_btf;
 #endif /* ENABLE_BANDWIDTH_MANAGER */

 /* Map to link endpoint id to per endpoint cilium_policy map */
diff --git a/bpf/lib/tb.h b/bpf/lib/tb.h
new file mode 100644
index 0000000000..4beb2667d2
--- /dev/null
+++ b/bpf/lib/tb.h
@@ -0,0 +1,62 @@
+/* SPDX-License-Identifier: (GPL-2.0-only OR BSD-2-Clause) */
+/* Copyright Authors of AlibabaCloud */
+
+#ifndef __TB_H_
+#define __TB_H_
+
+#include <bpf/ctx/ctx.h>
+#include <linux/bpf.h>
+
+#include "common.h"
+#include "time.h"
+#include "maps.h"
+
+/* For now the map is not thread safe, may add spin lock in the future */
+
+#if defined(ENABLE_BANDWIDTH_MANAGER) && __ctx_is == __ctx_skb
+static __always_inline int accept(struct __ctx_buff *ctx,
+					      __u32 ep_id)
+{
+    __u64 tokens, now, t_last, elapsed_time, bps;
+	struct throttle_id aggregate;
+	struct throttle_info *info;
+	__u32 ret = CTX_ACT_OK;
+
+	aggregate.id = ep_id;
+	if (!aggregate.id)
+		return CTX_ACT_OK;
+
+	info = map_lookup_elem(&INGRESS_THROTTLE_MAP, &aggregate);
+	if (!info)
+		return CTX_ACT_OK;
+
+	now = ktime_get_ns();
+
+	bps = READ_ONCE(info->bps);
+	t_last = READ_ONCE(info->t_last);
+	tokens = READ_ONCE(info->tokens);
+	elapsed_time = now - t_last; // ns
+	if (elapsed_time > 0) {
+		tokens += (bps * elapsed_time / NSEC_PER_SEC);
+		if (tokens > bps) {
+			tokens = bps;
+		}
+    }
+	if (tokens >= ctx_wire_len(ctx)) {
+		tokens -= ctx_wire_len(ctx);
+	}else {
+		ret = CTX_ACT_DROP;
+	}
+	WRITE_ONCE(info->t_last, now);
+	WRITE_ONCE(info->tokens, tokens);
+
+	return ret;
+}
+#else
+static __always_inline int accept(struct __ctx_buff *ctx __maybe_unused,
+                                   		  __u32 ep_id __maybe_unused)
+{
+	return CTX_ACT_OK;
+}
+#endif /* ENABLE_BANDWIDTH_MANAGER */
+#endif /* __TB_H_ */
\ No newline at end of file
diff --git a/cilium/cmd/bpf_bandwidth_list.go b/cilium/cmd/bpf_bandwidth_list.go
index 96a4bc1cb2..251eaa5448 100644
--- a/cilium/cmd/bpf_bandwidth_list.go
+++ b/cilium/cmd/bpf_bandwidth_list.go
@@ -17,6 +17,7 @@ import (
 	"github.com/cilium/cilium/pkg/command"
 	"github.com/cilium/cilium/pkg/common"
 	"github.com/cilium/cilium/pkg/maps/bwmap"
+	"github.com/cilium/cilium/pkg/maps/ingress"
 )

 var bpfBandwidthListCmd = &cobra.Command{
@@ -39,11 +40,27 @@ var bpfBandwidthListCmd = &cobra.Command{
 			return
 		}

-		listBandwidth(bpfBandwidthList)
+		listBandwidth(bpfBandwidthList, "EGRESS")
+
+		bpfBandwidthList = make(map[string][]string)
+		if err := ingress.ThrottleMap.Dump(bpfBandwidthList); err != nil {
+			fmt.Fprintf(os.Stderr, "error dumping contents of map: %s\n", err)
+			os.Exit(1)
+		}
+
+		if command.OutputOption() {
+			if err := command.PrintOutput(bpfBandwidthList); err != nil {
+				fmt.Fprintf(os.Stderr, "error getting output of map in %s: %s\n", command.OutputOptionString(), err)
+				os.Exit(1)
+			}
+			return
+		}
+
+		listBandwidth(bpfBandwidthList, "INGRESS")
 	},
 }

-func listBandwidth(bpfBandwidthList map[string][]string) {
+func listBandwidth(bpfBandwidthList map[string][]string, direction string) {
 	if len(bpfBandwidthList) == 0 {
 		fmt.Fprintf(os.Stderr, "No entries found.\n")
 		return
@@ -51,11 +68,11 @@ func listBandwidth(bpfBandwidthList map[string][]string) {

 	const (
 		labelsIDTitle   = "IDENTITY"
-		labelsBandwidth = "EGRESS BANDWIDTH (BitsPerSec)"
+		labelsBandwidth = "BANDWIDTH (BitsPerSec)"
 	)

 	w := tabwriter.NewWriter(os.Stdout, 5, 0, 3, ' ', 0)
-	fmt.Fprintf(w, "%s\t%s\n", labelsIDTitle, labelsBandwidth)
+	fmt.Fprintf(w, "%s\t%s\n", labelsIDTitle, direction+" "+labelsBandwidth)

 	const numColumns = 2
 	rows := [][numColumns]string{}
diff --git a/daemon/cmd/endpoint.go b/daemon/cmd/endpoint.go
index c7c4ad1637..58f4abbb2f 100644
--- a/daemon/cmd/endpoint.go
+++ b/daemon/cmd/endpoint.go
@@ -10,6 +10,7 @@ import (
 	"net"
 	"net/http"
 	"runtime"
+	"strings"
 	"sync"
 	"time"

@@ -465,9 +466,10 @@ func (d *Daemon) createEndpoint(ctx context.Context, owner regeneration.Owner, e
 		ep.UpdateBandwidthPolicy(func(ns, podName string) (bandwidthEgress string, err error) {
 			p, err := d.k8sWatcher.GetCachedPod(ns, podName)
 			if err != nil {
-				return "", err
+				return ",", err
 			}
-			return p.Annotations[bandwidth.EgressBandwidth], nil
+
+			return strings.Join([]string{p.Annotations[bandwidth.EgressBandwidth], p.Annotations[bandwidth.IngressBandwidth]}, ","), nil
 		})
 		ep.UpdateNoTrackRules(func(ns, podName string) (noTrackPort string, err error) {
 			p, err := d.k8sWatcher.GetCachedPod(ns, podName)
diff --git a/pkg/bandwidth/bandwidth.go b/pkg/bandwidth/bandwidth.go
index 06974a2868..b97a740748 100644
--- a/pkg/bandwidth/bandwidth.go
+++ b/pkg/bandwidth/bandwidth.go
@@ -14,6 +14,7 @@ import (
 	"github.com/cilium/cilium/pkg/logging"
 	"github.com/cilium/cilium/pkg/logging/logfields"
 	"github.com/cilium/cilium/pkg/maps/bwmap"
+	"github.com/cilium/cilium/pkg/maps/ingress"
 	"github.com/cilium/cilium/pkg/option"
 	"github.com/cilium/cilium/pkg/sysctl"
 )
@@ -182,6 +183,10 @@ func InitBandwidthManager() {
 		log.WithError(err).Fatal("Failed to access ThrottleMap")
 	}

+	if _, err := ingress.ThrottleMap.OpenOrCreate(); err != nil {
+		log.WithError(err).Fatal("Failed to access ThrottleMap")
+	}
+
 	if err := setBaselineSysctls(); err != nil {
 		log.WithError(err).Fatal("Failed to set sysctl needed by BPF bandwidth manager.")
 	}
diff --git a/pkg/datapath/linux/config/config.go b/pkg/datapath/linux/config/config.go
index 4201e878fb..06b6719843 100644
--- a/pkg/datapath/linux/config/config.go
+++ b/pkg/datapath/linux/config/config.go
@@ -39,6 +39,7 @@ import (
 	"github.com/cilium/cilium/pkg/maps/eppolicymap"
 	"github.com/cilium/cilium/pkg/maps/eventsmap"
 	"github.com/cilium/cilium/pkg/maps/fragmap"
+	"github.com/cilium/cilium/pkg/maps/ingress"
 	ipcachemap "github.com/cilium/cilium/pkg/maps/ipcache"
 	"github.com/cilium/cilium/pkg/maps/ipmasq"
 	"github.com/cilium/cilium/pkg/maps/lbmap"
@@ -491,6 +492,7 @@ func (h *HeaderfileWriter) WriteNodeConfig(w io.Writer, cfg *datapath.LocalNodeC
 		cDefinesMap["ENABLE_BANDWIDTH_MANAGER"] = "1"
 		cDefinesMap["THROTTLE_MAP"] = bwmap.MapName
 		cDefinesMap["THROTTLE_MAP_SIZE"] = fmt.Sprintf("%d", bwmap.MapSize)
+		cDefinesMap["INGRESS_THROTTLE_MAP"] = ingress.MapName
 	}

 	if option.Config.EnableHostFirewall {
@@ -910,6 +912,7 @@ func (h *HeaderfileWriter) writeTemplateConfig(fw *bufio.Writer, e datapath.Endp
 		fmt.Fprint(fw, "#define ENABLE_BANDWIDTH_MANAGER 1\n")
 		fmt.Fprintf(fw, "#define THROTTLE_MAP %s\n", bwmap.MapName)
 		fmt.Fprintf(fw, "#define THROTTLE_MAP_SIZE %d\n", bwmap.MapSize)
+		fmt.Fprintf(fw, "#define INGRESS_THROTTLE_MAP %s\n", ingress.MapName)
 	}

 	if e.ConntrackLocalLocked() {
diff --git a/pkg/endpoint/bpf.go b/pkg/endpoint/bpf.go
index 5b14a7921a..1af4a60b23 100644
--- a/pkg/endpoint/bpf.go
+++ b/pkg/endpoint/bpf.go
@@ -31,6 +31,7 @@ import (
 	"github.com/cilium/cilium/pkg/maps/bwmap"
 	"github.com/cilium/cilium/pkg/maps/ctmap"
 	"github.com/cilium/cilium/pkg/maps/eppolicymap"
+	"github.com/cilium/cilium/pkg/maps/ingress"
 	"github.com/cilium/cilium/pkg/maps/lxcmap"
 	"github.com/cilium/cilium/pkg/maps/policymap"
 	"github.com/cilium/cilium/pkg/metrics"
@@ -994,7 +995,12 @@ func (e *Endpoint) deleteMaps() []error {
 			errors = append(errors, fmt.Errorf("unable to remote endpoint from bandwidth manager map: %s", err))
 		}
 	}
-
+	// Remove rate-limit from bandwidth manager map.
+	if e.ingressBps != 0 && option.Config.EnableBandwidthManager {
+		if err := ingress.Delete(e.ID); err != nil {
+			errors = append(errors, fmt.Errorf("unable to remote endpoint from bandwidth manager map: %s", err))
+		}
+	}
 	return errors
 }

diff --git a/pkg/endpoint/endpoint.go b/pkg/endpoint/endpoint.go
index c3d5ce7a81..5da227c4d1 100644
--- a/pkg/endpoint/endpoint.go
+++ b/pkg/endpoint/endpoint.go
@@ -167,6 +167,8 @@ type Endpoint struct {
 	// bps is the egress rate of the endpoint
 	bps uint64

+	ingressBps uint64
+
 	// mac is the MAC address of the endpoint
 	//
 	mac mac.MAC // Container MAC address.
@@ -1632,9 +1634,9 @@ func (e *Endpoint) RunMetadataResolver(resolveMetadata MetadataResolverCB) {
 				e.UpdateBandwidthPolicy(func(ns, podName string) (bandwidthEgress string, err error) {
 					_, _, _, _, annotations, err := resolveMetadata(ns, podName)
 					if err != nil {
-						return "", err
+						return ",", err
 					}
-					return annotations[bandwidth.EgressBandwidth], nil
+					return strings.Join([]string{annotations[bandwidth.EgressBandwidth], annotations[bandwidth.IngressBandwidth]}, ","), nil
 				})
 				e.UpdateLabels(ctx, identityLabels, info, true)
 				close(done)
diff --git a/pkg/endpoint/events.go b/pkg/endpoint/events.go
index 3d709d3eb7..55cc92a110 100644
--- a/pkg/endpoint/events.go
+++ b/pkg/endpoint/events.go
@@ -6,13 +6,16 @@ package endpoint
 import (
 	"fmt"
 	"strconv"
+	"strings"

 	"github.com/sirupsen/logrus"
+	"k8s.io/apimachinery/pkg/util/errors"

 	"github.com/cilium/cilium/pkg/bandwidth"
 	"github.com/cilium/cilium/pkg/eventqueue"
 	"github.com/cilium/cilium/pkg/logging/logfields"
 	"github.com/cilium/cilium/pkg/maps/bwmap"
+	"github.com/cilium/cilium/pkg/maps/ingress"
 	"github.com/cilium/cilium/pkg/option"
 	"github.com/cilium/cilium/pkg/policy"
 )
@@ -260,7 +263,7 @@ type EndpointPolicyBandwidthEvent struct {

 // Handle handles the policy bandwidth update.
 func (ev *EndpointPolicyBandwidthEvent) Handle(res chan interface{}) {
-	var bps uint64
+	var egressBps, ingressBps uint64

 	e := ev.ep
 	if err := e.lockAlive(); err != nil {
@@ -275,41 +278,78 @@ func (ev *EndpointPolicyBandwidthEvent) Handle(res chan interface{}) {
 		e.unlock()
 	}()

-	bandwidthEgress, err := ev.annoCB(e.K8sNamespace, e.K8sPodName)
+	bandwidthStr, err := ev.annoCB(e.K8sNamespace, e.K8sPodName)
 	if err != nil || !option.Config.EnableBandwidthManager {
 		res <- &EndpointRegenerationResult{
 			err: err,
 		}
 		return
 	}
-	if bandwidthEgress != "" {
-		bps, err = bandwidth.GetBytesPerSec(bandwidthEgress)
-		if err == nil {
-			err = bwmap.Update(e.ID, bps)
+
+	e.getLogger().Infof("Updating bandwidth policy %s", bandwidthStr)
+
+	sl := strings.Split(bandwidthStr, ",")
+
+	bandwidthEgress := sl[0]
+	bandwidthIngress := sl[1]
+
+	var errs []error
+
+	func() {
+		if bandwidthEgress != "" {
+			egressBps, err = bandwidth.GetBytesPerSec(bandwidthEgress)
+			if err == nil {
+				err = bwmap.Update(e.ID, egressBps)
+			}
+		} else {
+			err = bwmap.Delete(e.ID)
 		}
-	} else {
-		err = bwmap.Delete(e.ID)
-	}
-	if err != nil {
-		res <- &EndpointRegenerationResult{
-			err: err,
+		if err != nil {
+			errs = append(errs, err)
+			return
 		}
-		return
-	}
+		bpsOld := "inf"
+		bpsNew := "inf"
+		if e.bps != 0 {
+			bpsOld = strconv.FormatUint(e.bps, 10)
+		}
+		if egressBps != 0 {
+			bpsNew = strconv.FormatUint(egressBps, 10)
+		}
+		e.getLogger().Debugf("Updating %s from %s to %s bytes/sec", bandwidth.EgressBandwidth,
+			bpsOld, bpsNew)
+		e.bps = egressBps
+	}()
+
+	func() {
+		if bandwidthIngress != "" {
+			ingressBps, err = bandwidth.GetBytesPerSec(bandwidthIngress)
+			if err == nil {
+				err = ingress.Update(e.ID, ingressBps)
+			}
+		} else {
+			err = ingress.Delete(e.ID)
+		}
+		if err != nil {
+			errs = append(errs, err)
+			return
+		}
+
+		bpsOld := "inf"
+		bpsNew := "inf"
+		if e.ingressBps != 0 {
+			bpsOld = strconv.FormatUint(e.ingressBps, 10)
+		}
+		if ingressBps != 0 {
+			bpsNew = strconv.FormatUint(ingressBps, 10)
+		}
+		e.getLogger().Debugf("Updating %s from %s to %s bytes/sec", bandwidth.IngressBandwidth,
+			bpsOld, bpsNew)
+		e.ingressBps = ingressBps
+	}()

-	bpsOld := "inf"
-	bpsNew := "inf"
-	if e.bps != 0 {
-		bpsOld = strconv.FormatUint(e.bps, 10)
-	}
-	if bps != 0 {
-		bpsNew = strconv.FormatUint(bps, 10)
-	}
-	e.getLogger().Debugf("Updating %s from %s to %s bytes/sec", bandwidth.EgressBandwidth,
-		bpsOld, bpsNew)
-	e.bps = bps
 	res <- &EndpointRegenerationResult{
-		err: nil,
+		err: errors.NewAggregate(errs),
 	}
 }

diff --git a/pkg/k8s/watchers/pod.go b/pkg/k8s/watchers/pod.go
index 9c7502aa6f..f0690504a6 100644
--- a/pkg/k8s/watchers/pod.go
+++ b/pkg/k8s/watchers/pod.go
@@ -280,7 +280,8 @@ func (k *K8sWatcher) updateK8sPodV1(oldK8sPod, newK8sPod *slim_corev1.Pod) error
 	oldAnno := oldK8sPod.ObjectMeta.Annotations
 	newAnno := newK8sPod.ObjectMeta.Annotations
 	annoChangedProxy := !k8s.AnnotationsEqual([]string{annotation.ProxyVisibility}, oldAnno, newAnno)
-	annoChangedBandwidth := !k8s.AnnotationsEqual([]string{bandwidth.EgressBandwidth}, oldAnno, newAnno)
+	annoChangedBandwidth := !k8s.AnnotationsEqual([]string{bandwidth.EgressBandwidth}, oldAnno, newAnno) ||
+		!k8s.AnnotationsEqual([]string{bandwidth.IngressBandwidth}, oldAnno, newAnno)
 	annoChangedNoTrack := !k8s.AnnotationsEqual([]string{annotation.NoTrack}, oldAnno, newAnno)
 	annotationsChanged := annoChangedProxy || annoChangedBandwidth || annoChangedNoTrack

@@ -349,9 +350,9 @@ func (k *K8sWatcher) updateK8sPodV1(oldK8sPod, newK8sPod *slim_corev1.Pod) error
 			podEP.UpdateBandwidthPolicy(func(ns, podName string) (bandwidthEgress string, err error) {
 				p, err := k.GetCachedPod(ns, podName)
 				if err != nil {
-					return "", nil
+					return ",", nil
 				}
-				return p.ObjectMeta.Annotations[bandwidth.EgressBandwidth], nil
+				return strings.Join([]string{p.ObjectMeta.Annotations[bandwidth.EgressBandwidth], p.ObjectMeta.Annotations[bandwidth.IngressBandwidth]}, ","), nil
 			})
 		}
 		if annoChangedNoTrack {
diff --git a/pkg/maps/ingress/bwmap.go b/pkg/maps/ingress/bwmap.go
new file mode 100644
index 0000000000..e726462716
--- /dev/null
+++ b/pkg/maps/ingress/bwmap.go
@@ -0,0 +1,61 @@
+// SPDX-License-Identifier: Apache-2.0
+// Copyright Authors of Cilium
+
+package ingress
+
+import (
+	"fmt"
+	"unsafe"
+
+	"github.com/cilium/cilium/pkg/bpf"
+	"github.com/cilium/cilium/pkg/maps/lxcmap"
+)
+
+const (
+	MapName = "cilium_ingress_throttle"
+	// Flow aggregate is per Pod, so same size as Endpoint map.
+	MapSize = lxcmap.MaxEntries
+)
+
+type ThrottleID struct {
+	Id uint64 `align:"id"`
+}
+
+func (k *ThrottleID) GetKeyPtr() unsafe.Pointer  { return unsafe.Pointer(k) }
+func (k *ThrottleID) NewValue() bpf.MapValue     { return &ThrottleInfo{} }
+func (k *ThrottleID) String() string             { return fmt.Sprintf("%d", int(k.Id)) }
+func (k *ThrottleID) DeepCopyMapKey() bpf.MapKey { return &ThrottleID{k.Id} }
+
+type ThrottleInfo struct {
+	Bps      uint64    `align:"bps"`
+	TimeLast uint64    `align:"t_last"`
+	Tokens   uint64    `align:"tokens"`
+	Pad      [4]uint64 `align:"pad"`
+}
+
+func (v *ThrottleInfo) GetValuePtr() unsafe.Pointer { return unsafe.Pointer(v) }
+func (v *ThrottleInfo) String() string              { return fmt.Sprintf("%d", int(v.Bps)) }
+func (v *ThrottleInfo) DeepCopyMapValue() bpf.MapValue {
+	return &ThrottleInfo{v.Bps, v.TimeLast, v.Tokens, v.Pad}
+}
+
+var ThrottleMap = bpf.NewMap(
+	MapName,
+	bpf.MapTypeHash,
+	&ThrottleID{}, int(unsafe.Sizeof(ThrottleID{})),
+	&ThrottleInfo{}, int(unsafe.Sizeof(ThrottleInfo{})),
+	MapSize,
+	bpf.BPF_F_NO_PREALLOC, 0,
+	bpf.ConvertKeyValue,
+).WithCache().WithPressureMetric()
+
+func Update(Id uint16, Bps uint64) error {
+	return ThrottleMap.Update(
+		&ThrottleID{Id: uint64(Id)},
+		&ThrottleInfo{Bps: Bps, Tokens: uint64(0)})
+}
+
+func Delete(Id uint16) error {
+	return ThrottleMap.Delete(
+		&ThrottleID{Id: uint64(Id)})
+}
-- 
2.47.0

