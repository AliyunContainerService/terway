From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Ilia Chernov <cherno8.ilya@gmail.com>
Date: Wed, 15 May 2024 11:30:27 +0300
Subject: policy: Fix selecting endpoints by namespace label

It was not possible to match endpoints by namespace labels
even though web policy editor suggested it.
Label matching namespace by name was added implicitly to the policy
which makes selector by labels invalid.
After fix label matching namespace by name is not added in case user specified matching by namespace labels.

Fixes: #30149

Signed-off-by: Ilia Chernov <cherno8.ilya@gmail.com>
---
 pkg/k8s/apis/cilium.io/const.go            |  5 +-
 pkg/k8s/apis/cilium.io/utils/utils.go      |  8 ++-
 pkg/k8s/apis/cilium.io/utils/utils_test.go | 80 ++++++++++++++++++++++
 3 files changed, 91 insertions(+), 2 deletions(-)

diff --git a/pkg/k8s/apis/cilium.io/const.go b/pkg/k8s/apis/cilium.io/const.go
index 0b9e7bd2c3..d3cea253c1 100644
--- a/pkg/k8s/apis/cilium.io/const.go
+++ b/pkg/k8s/apis/cilium.io/const.go
@@ -40,9 +40,12 @@ const (
 	// kubernetes namespace's labels.
 	PodNamespaceMetaLabels = LabelPrefix + ".namespace.labels"
 
+	// PodNamespaceMetaLabelsPrefix is the prefix used for kubernetes namespace's labels
+	PodNamespaceMetaLabelsPrefix = PodNamespaceMetaLabels + "."
+
 	// PodNamespaceMetaNameLabel is the label that Kubernetes automatically adds
 	// to namespaces.
-	PodNamespaceMetaNameLabel = PodNamespaceMetaLabels + "." + LabelMetadataName
+	PodNamespaceMetaNameLabel = PodNamespaceMetaLabelsPrefix + LabelMetadataName
 
 	// LabelMetadataName is the label name which, in-tree, is used to
 	// automatically label namespaces, so they can be selected easily by tools
diff --git a/pkg/k8s/apis/cilium.io/utils/utils.go b/pkg/k8s/apis/cilium.io/utils/utils.go
index 365621fe63..d775aa0e0e 100644
--- a/pkg/k8s/apis/cilium.io/utils/utils.go
+++ b/pkg/k8s/apis/cilium.io/utils/utils.go
@@ -26,6 +26,12 @@ const (
 	// represent pods in the default namespace for any source type.
 	podAnyPrefixLbl = labels.LabelSourceAnyKeyPrefix + k8sConst.PodNamespaceLabel
 
+	// podK8SNamespaceLabelsPrefix is the prefix use in the label selector for namespace labels.
+	podK8SNamespaceLabelsPrefix = labels.LabelSourceK8sKeyPrefix + k8sConst.PodNamespaceMetaLabelsPrefix
+	// podAnyNamespaceLabelsPrefix is the prefix use in the label selector for namespace labels
+	// for any source type.
+	podAnyNamespaceLabelsPrefix = labels.LabelSourceAnyKeyPrefix + k8sConst.PodNamespaceMetaLabelsPrefix
+
 	// podInitLbl is the label used in a label selector to match on
 	// initializing pods.
 	podInitLbl = labels.LabelSourceReservedKeyPrefix + labels.IDNameInit
@@ -92,7 +98,7 @@ func getEndpointSelector(namespace string, labelSelector *slim_metav1.LabelSelec
 			if !matchesInit {
 				es.AddMatchExpression(podPrefixLbl, slim_metav1.LabelSelectorOpExists, []string{})
 			}
-		} else {
+		} else if !es.HasKeyPrefix(podK8SNamespaceLabelsPrefix) && !es.HasKeyPrefix(podAnyNamespaceLabelsPrefix) {
 			es.AddMatch(podPrefixLbl, namespace)
 		}
 	}
diff --git a/pkg/k8s/apis/cilium.io/utils/utils_test.go b/pkg/k8s/apis/cilium.io/utils/utils_test.go
index 060cc3a593..22b15db6c3 100644
--- a/pkg/k8s/apis/cilium.io/utils/utils_test.go
+++ b/pkg/k8s/apis/cilium.io/utils/utils_test.go
@@ -362,6 +362,86 @@ func Test_ParseToCiliumRule(t *testing.T) {
 				},
 			),
 		},
+		{
+			// When the rule specifies namespace labels, namespace label is not added
+			// by the namespace where the rule was inserted.
+			name: "parse-in-namespace-with-ns-labels-selector",
+			args: args{
+				namespace: slim_metav1.NamespaceDefault,
+				uid:       uuid,
+				rule: &api.Rule{
+					EndpointSelector: api.NewESFromMatchRequirements(
+						map[string]string{
+							role: "backend",
+						},
+						nil,
+					),
+					Ingress: []api.IngressRule{
+						{
+							IngressCommonRule: api.IngressCommonRule{
+								FromEndpoints: []api.EndpointSelector{
+									{
+										LabelSelector: &slim_metav1.LabelSelector{
+											MatchLabels: map[string]string{
+												podAnyNamespaceLabelsPrefix + "team": "team-a",
+											},
+										},
+									},
+								},
+							},
+						},
+					},
+				},
+			},
+			want: api.NewRule().WithEndpointSelector(
+				api.NewESFromMatchRequirements(
+					map[string]string{
+						role:      "backend",
+						namespace: "default",
+					},
+					nil,
+				),
+			).WithIngressRules(
+				[]api.IngressRule{
+					{
+						IngressCommonRule: api.IngressCommonRule{
+							FromEndpoints: []api.EndpointSelector{
+								api.NewESFromK8sLabelSelector(
+									labels.LabelSourceAnyKeyPrefix,
+									&slim_metav1.LabelSelector{
+										MatchLabels: map[string]string{
+											k8sConst.PodNamespaceMetaLabelsPrefix + "team": "team-a",
+										},
+									}),
+							},
+						},
+					},
+				},
+			).WithLabels(
+				labels.LabelArray{
+					{
+						Key:    "io.cilium.k8s.policy.derived-from",
+						Value:  "CiliumNetworkPolicy",
+						Source: labels.LabelSourceK8s,
+					},
+					{
+						Key:    "io.cilium.k8s.policy.name",
+						Value:  "parse-in-namespace-with-ns-labels-selector",
+						Source: labels.LabelSourceK8s,
+					},
+					{
+						Key:    "io.cilium.k8s.policy.namespace",
+						Value:  "default",
+						Source: labels.LabelSourceK8s,
+					},
+					{
+						Key:    "io.cilium.k8s.policy.uid",
+						Value:  string(uuid),
+						Source: labels.LabelSourceK8s,
+					},
+				},
+			),
+		},
 		{
 			// For a clusterwide policy the namespace is empty but when a to/fromEndpoint
 			// rule is added that represents a wildcard we add a match expression
-- 
2.39.5 (Apple Git-154)

