From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: l1b0k <libokang.dev@gmail.com>
Date: Sun, 7 Apr 2024 18:11:42 +0800
Subject: fix using hubble

Signed-off-by: l1b0k <libokang.dev@gmail.com>
---
 cilium/cmd/preflight.go     |  1 +
 daemon/cmd/daemon.go        |  3 ++
 pkg/k8s/init.go             | 55 ++++++++++++++++++++++++-------------
 pkg/k8s/synced/crd.go       |  4 +++
 pkg/k8s/watchers/watcher.go |  4 +++
 5 files changed, 48 insertions(+), 19 deletions(-)

diff --git a/cilium/cmd/preflight.go b/cilium/cmd/preflight.go
index 43dc1f1bda..3e5bd7c5d4 100644
--- a/cilium/cmd/preflight.go
+++ b/cilium/cmd/preflight.go
@@ -192,6 +192,7 @@ func registerCRD() {
 	option.Config.EnableCiliumEndpointSlice = true
 	option.Config.EnableBGPControlPlane = false
 	option.Config.EnableIPv4EgressGateway = false
+	option.Config.EnableHubble = true
 	// Update CRDs to ensure ciliumIdentity is present
 	err := ciliumClient.RegisterCRDs()
 	if err != nil {
diff --git a/daemon/cmd/daemon.go b/daemon/cmd/daemon.go
index e5bae5e5c4..6a33f83772 100644
--- a/daemon/cmd/daemon.go
+++ b/daemon/cmd/daemon.go
@@ -873,6 +873,9 @@ func NewDaemon(ctx context.Context, cancel context.CancelFunc, epMgr *endpointma
 		if option.Config.IPAM == ipamOption.IPAMClusterPool || option.Config.IPAM == ipamOption.IPAMClusterPoolV2 {
 			// Create the CiliumNode custom resource. This call will block until
 			// the custom resource has been created
+			if option.Config.EnableHubble {
+				option.Config.AutoCreateCiliumNodeResource = true
+			}
 			d.nodeDiscovery.UpdateCiliumNodeResource()
 		}
 
diff --git a/pkg/k8s/init.go b/pkg/k8s/init.go
index f06218f317..3a655525b5 100644
--- a/pkg/k8s/init.go
+++ b/pkg/k8s/init.go
@@ -70,30 +70,47 @@ func retrieveNodeInformation(ctx context.Context, nodeGetter k8sGetter, nodeName
 	mightAutoDetectDevices := option.MightAutoDetectDevices()
 	var n *nodeTypes.Node
 
-	k8sNode, err := nodeGetter.GetK8sNode(ctx, nodeName)
-	if err != nil {
-		// If no CIDR is required, retrieving the node information is
-		// optional
-		if !requireIPv4CIDR && !requireIPv6CIDR && !mightAutoDetectDevices {
-			return nil, nil
+	if option.Config.EnableHubble {
+		ciliumNode, err := nodeGetter.GetCiliumNode(ctx, nodeName)
+		if err != nil {
+			// If no CIDR is required, retrieving the node information is
+			// optional
+			if !requireIPv4CIDR && !requireIPv6CIDR && !mightAutoDetectDevices {
+				return nil, nil
+			}
+
+			return nil, fmt.Errorf("unable to retrieve CiliumNode: %s", err)
 		}
 
-		return nil, fmt.Errorf("unable to retrieve k8s node information: %s", err)
+		no := nodeTypes.ParseCiliumNode(ciliumNode)
+		n = &no
+		log.WithField(logfields.NodeName, n.Name).Info("Retrieved node information from cilium node")
+	} else {
+		k8sNode, err := nodeGetter.GetK8sNode(ctx, nodeName)
+		if err != nil {
+			// If no CIDR is required, retrieving the node information is
+			// optional
+			if !requireIPv4CIDR && !requireIPv6CIDR && !mightAutoDetectDevices {
+				return nil, nil
+			}
 
-	}
+			return nil, fmt.Errorf("unable to retrieve k8s node information: %s", err)
 
-	nodeInterface := ConvertToNode(k8sNode)
-	if nodeInterface == nil {
-		// This will never happen and the GetNode on line 63 will be soon
-		// make a request from the local store instead.
-		return nil, fmt.Errorf("invalid k8s node: %s", k8sNode)
-	}
-	typesNode := nodeInterface.(*slim_corev1.Node)
+		}
 
-	// The source is left unspecified as this node resource should never be
-	// used to update state
-	n = ParseNode(typesNode, source.Unspec)
-	log.WithField(logfields.NodeName, n.Name).Info("Retrieved node information from kubernetes node")
+		nodeInterface := ConvertToNode(k8sNode)
+		if nodeInterface == nil {
+			// This will never happen and the GetNode on line 63 will be soon
+			// make a request from the local store instead.
+			return nil, fmt.Errorf("invalid k8s node: %s", k8sNode)
+		}
+		typesNode := nodeInterface.(*slim_corev1.Node)
+
+		// The source is left unspecified as this node resource should never be
+		// used to update state
+		n = ParseNode(typesNode, source.Unspec)
+		log.WithField(logfields.NodeName, n.Name).Info("Retrieved node information from kubernetes node")
+	}
 
 	if requireIPv4CIDR && n.IPv4AllocCIDR == nil {
 		return nil, fmt.Errorf("required IPv4 PodCIDR not available")
diff --git a/pkg/k8s/synced/crd.go b/pkg/k8s/synced/crd.go
index b2dafa1e52..35c9985516 100644
--- a/pkg/k8s/synced/crd.go
+++ b/pkg/k8s/synced/crd.go
@@ -44,6 +44,10 @@ func agentCRDResourceNames() []string {
 		CRDResourceName(v2.CIDName),
 	}
 
+	if option.Config.EnableHubble {
+		result = append(result, CRDResourceName(v2.CNName))
+	}
+
 	if !option.Config.DisableCiliumEndpointCRD {
 		result = append(result, CRDResourceName(v2.CEPName))
 		if option.Config.EnableCiliumEndpointSlice {
diff --git a/pkg/k8s/watchers/watcher.go b/pkg/k8s/watchers/watcher.go
index 4d27c98232..8e49da47f5 100644
--- a/pkg/k8s/watchers/watcher.go
+++ b/pkg/k8s/watchers/watcher.go
@@ -432,8 +432,12 @@ func (k *K8sWatcher) resourceGroups() (beforeNodeInitGroups, afterNodeInitGroups
 		if !ok {
 			log.Fatalf("Unknown resource %s. Please update pkg/k8s/watchers to understand this type.", r)
 		}
+
 		switch groupInfo.kind {
 		case skip:
+			if option.Config.EnableHubble && groupInfo.group == k8sAPIGroupCiliumNodeV2 {
+				ciliumGroups = append(ciliumGroups, groupInfo.group)
+			}
 			continue
 		case start:
 			ciliumGroups = append(ciliumGroups, groupInfo.group)
-- 
2.44.0

