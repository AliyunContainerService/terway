From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: l1b0k <libokang.dev@gmail.com>
Date: Mon, 20 Jun 2022 10:57:16 +0800
Subject: [PATCH] add bandwidth for terway ipvlan

Signed-off-by: l1b0k <libokang.dev@gmail.com>
---
 bpf/bpf_lxc.c                       | 15 +++++++++++++--
 pkg/bandwidth/bandwidth.go          | 12 ++++++------
 pkg/datapath/linux/config/config.go |  6 ++++++
 3 files changed, 25 insertions(+), 8 deletions(-)

diff --git a/bpf/bpf_lxc.c b/bpf/bpf_lxc.c
index 64f9169958..7eab9fa3fa 100644
--- a/bpf/bpf_lxc.c
+++ b/bpf/bpf_lxc.c
@@ -1341,17 +1341,28 @@ int handle_xgress(struct __ctx_buff *ctx)
 		goto out;
 	}
 
+#if defined(ENABLE_BANDWIDTH_MANAGER)
+    edt_set_aggregate(ctx, LXC_ID);
+	ret = edt_sched_departure(ctx);
+	/* No send_drop_notify_error() here given we're rate-limiting. */
+	if (ret == CTX_ACT_DROP) {
+		update_metrics(ctx_full_len(ctx), METRIC_EGRESS,
+			       -DROP_EDT_HORIZON);
+		return ret;
+	}
+#endif
+
 	switch (proto) {
 #ifdef ENABLE_IPV6
 	case bpf_htons(ETH_P_IPV6):
-		edt_set_aggregate(ctx, LXC_ID);
+//		edt_set_aggregate(ctx, LXC_ID);
 		ep_tail_call(ctx, CILIUM_CALL_IPV6_FROM_LXC);
 		ret = DROP_MISSED_TAIL_CALL;
 		break;
 #endif /* ENABLE_IPV6 */
 #ifdef ENABLE_IPV4
 	case bpf_htons(ETH_P_IP):
-		edt_set_aggregate(ctx, LXC_ID);
+//		edt_set_aggregate(ctx, LXC_ID);
 		ep_tail_call(ctx, CILIUM_CALL_IPV4_FROM_LXC);
 		ret = DROP_MISSED_TAIL_CALL;
 		break;
diff --git a/pkg/bandwidth/bandwidth.go b/pkg/bandwidth/bandwidth.go
index ef652dfce7..b01c94930e 100644
--- a/pkg/bandwidth/bandwidth.go
+++ b/pkg/bandwidth/bandwidth.go
@@ -87,11 +87,11 @@ func InitBandwidthManager() {
 		return
 	}
 
-	if len(option.Config.GetDevices()) == 0 {
-		log.Warn("BPF bandwidth manager could not detect host devices. Disabling the feature.")
-		option.Config.EnableBandwidthManager = false
-		return
-	}
+	//if len(option.Config.GetDevices()) == 0 {
+	//	log.Warn("BPF bandwidth manager could not detect host devices. Disabling the feature.")
+	//	option.Config.EnableBandwidthManager = false
+	//	return
+	//}
 	// Going via host stack will orphan skb->sk, so we do need BPF host
 	// routing for it to work properly.
 	if option.Config.EnableBBR && option.Config.EnableHostLegacyRouting {
@@ -130,7 +130,7 @@ func InitBandwidthManager() {
 			}).Fatal("Failed to set sysctl needed by BPF bandwidth manager.")
 		}
 	}
-
+	return
 	for _, device := range option.Config.GetDevices() {
 		link, err := netlink.LinkByName(device)
 		if err != nil {
diff --git a/pkg/datapath/linux/config/config.go b/pkg/datapath/linux/config/config.go
index ea542dd527..0f078ad502 100644
--- a/pkg/datapath/linux/config/config.go
+++ b/pkg/datapath/linux/config/config.go
@@ -889,6 +889,12 @@ func (h *HeaderfileWriter) writeTemplateConfig(fw *bufio.Writer, e datapath.Endp
 		fmt.Fprint(fw, "#define ENABLE_ARP_RESPONDER 1\n")
 	}
 
+	if option.Config.EnableBandwidthManager {
+		fmt.Fprint(fw, "#define ENABLE_BANDWIDTH_MANAGER 1\n")
+		fmt.Fprintf(fw, "#define THROTTLE_MAP %s\n", bwmap.MapName)
+		fmt.Fprintf(fw, "#define THROTTLE_MAP_SIZE %d\n", bwmap.MapSize)
+	}
+
 	if e.ConntrackLocalLocked() {
 		ctmap.WriteBPFMacros(fw, e)
 	} else {
-- 
2.39.1

