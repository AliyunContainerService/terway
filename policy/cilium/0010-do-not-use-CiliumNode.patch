From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: l1b0k <libokang.dev@gmail.com>
Date: Fri, 9 Dec 2022 16:10:17 +0800
Subject: [PATCH] do not use CiliumNode

Signed-off-by: l1b0k <libokang.dev@gmail.com>
---
 pkg/defaults/defaults.go    |  2 +-
 pkg/k8s/init.go             | 56 +++++++++++++------------------------
 pkg/k8s/synced/crd.go       |  2 +-
 pkg/k8s/watchers/watcher.go |  2 +-
 4 files changed, 22 insertions(+), 40 deletions(-)

diff --git a/pkg/defaults/defaults.go b/pkg/defaults/defaults.go
index df797c44e9..398e50474d 100644
--- a/pkg/defaults/defaults.go
+++ b/pkg/defaults/defaults.go
@@ -398,7 +398,7 @@ const (
 
 	// AutoCreateCiliumNodeResource enables automatic creation of a
 	// CiliumNode resource for the local node
-	AutoCreateCiliumNodeResource = true
+	AutoCreateCiliumNodeResource = false
 
 	// PolicyTriggerInterval is default amount of time between triggers of
 	// policy updates are invoked.
diff --git a/pkg/k8s/init.go b/pkg/k8s/init.go
index 2e090cd729..f06218f317 100644
--- a/pkg/k8s/init.go
+++ b/pkg/k8s/init.go
@@ -17,7 +17,6 @@ import (
 
 	"github.com/cilium/cilium/pkg/backoff"
 	"github.com/cilium/cilium/pkg/controller"
-	ipamOption "github.com/cilium/cilium/pkg/ipam/option"
 	ciliumv2 "github.com/cilium/cilium/pkg/k8s/apis/cilium.io/v2"
 	k8sconfig "github.com/cilium/cilium/pkg/k8s/config"
 	k8sConst "github.com/cilium/cilium/pkg/k8s/constants"
@@ -71,47 +70,30 @@ func retrieveNodeInformation(ctx context.Context, nodeGetter k8sGetter, nodeName
 	mightAutoDetectDevices := option.MightAutoDetectDevices()
 	var n *nodeTypes.Node
 
-	if option.Config.IPAM == ipamOption.IPAMClusterPool || option.Config.IPAM == ipamOption.IPAMClusterPoolV2 {
-		ciliumNode, err := nodeGetter.GetCiliumNode(ctx, nodeName)
-		if err != nil {
-			// If no CIDR is required, retrieving the node information is
-			// optional
-			if !requireIPv4CIDR && !requireIPv6CIDR && !mightAutoDetectDevices {
-				return nil, nil
-			}
-
-			return nil, fmt.Errorf("unable to retrieve CiliumNode: %s", err)
+	k8sNode, err := nodeGetter.GetK8sNode(ctx, nodeName)
+	if err != nil {
+		// If no CIDR is required, retrieving the node information is
+		// optional
+		if !requireIPv4CIDR && !requireIPv6CIDR && !mightAutoDetectDevices {
+			return nil, nil
 		}
 
-		no := nodeTypes.ParseCiliumNode(ciliumNode)
-		n = &no
-		log.WithField(logfields.NodeName, n.Name).Info("Retrieved node information from cilium node")
-	} else {
-		k8sNode, err := nodeGetter.GetK8sNode(ctx, nodeName)
-		if err != nil {
-			// If no CIDR is required, retrieving the node information is
-			// optional
-			if !requireIPv4CIDR && !requireIPv6CIDR && !mightAutoDetectDevices {
-				return nil, nil
-			}
-
-			return nil, fmt.Errorf("unable to retrieve k8s node information: %s", err)
+		return nil, fmt.Errorf("unable to retrieve k8s node information: %s", err)
 
-		}
-
-		nodeInterface := ConvertToNode(k8sNode)
-		if nodeInterface == nil {
-			// This will never happen and the GetNode on line 63 will be soon
-			// make a request from the local store instead.
-			return nil, fmt.Errorf("invalid k8s node: %s", k8sNode)
-		}
-		typesNode := nodeInterface.(*slim_corev1.Node)
+	}
 
-		// The source is left unspecified as this node resource should never be
-		// used to update state
-		n = ParseNode(typesNode, source.Unspec)
-		log.WithField(logfields.NodeName, n.Name).Info("Retrieved node information from kubernetes node")
+	nodeInterface := ConvertToNode(k8sNode)
+	if nodeInterface == nil {
+		// This will never happen and the GetNode on line 63 will be soon
+		// make a request from the local store instead.
+		return nil, fmt.Errorf("invalid k8s node: %s", k8sNode)
 	}
+	typesNode := nodeInterface.(*slim_corev1.Node)
+
+	// The source is left unspecified as this node resource should never be
+	// used to update state
+	n = ParseNode(typesNode, source.Unspec)
+	log.WithField(logfields.NodeName, n.Name).Info("Retrieved node information from kubernetes node")
 
 	if requireIPv4CIDR && n.IPv4AllocCIDR == nil {
 		return nil, fmt.Errorf("required IPv4 PodCIDR not available")
diff --git a/pkg/k8s/synced/crd.go b/pkg/k8s/synced/crd.go
index d8122ee052..b2dafa1e52 100644
--- a/pkg/k8s/synced/crd.go
+++ b/pkg/k8s/synced/crd.go
@@ -40,7 +40,7 @@ func agentCRDResourceNames() []string {
 	result := []string{
 		CRDResourceName(v2.CNPName),
 		CRDResourceName(v2.CCNPName),
-		CRDResourceName(v2.CNName),
+		//CRDResourceName(v2.CNName),
 		CRDResourceName(v2.CIDName),
 	}
 
diff --git a/pkg/k8s/watchers/watcher.go b/pkg/k8s/watchers/watcher.go
index e8e3ced771..354cb7b707 100644
--- a/pkg/k8s/watchers/watcher.go
+++ b/pkg/k8s/watchers/watcher.go
@@ -375,7 +375,7 @@ var ciliumResourceToGroupMapping = map[string]watcherInfo{
 	synced.CRDResourceName(v2.CNPName):           {start, k8sAPIGroupCiliumNetworkPolicyV2},
 	synced.CRDResourceName(v2.CCNPName):          {start, k8sAPIGroupCiliumClusterwideNetworkPolicyV2},
 	synced.CRDResourceName(v2.CEPName):           {start, k8sAPIGroupCiliumEndpointV2}, // ipcache
-	synced.CRDResourceName(v2.CNName):            {start, k8sAPIGroupCiliumNodeV2},
+	synced.CRDResourceName(v2.CNName):            {skip, k8sAPIGroupCiliumNodeV2},
 	synced.CRDResourceName(v2.CIDName):           {skip, ""}, // Handled in pkg/k8s/identitybackend/
 	synced.CRDResourceName(v2.CLRPName):          {start, k8sAPIGroupCiliumLocalRedirectPolicyV2},
 	synced.CRDResourceName(v2.CEWName):           {skip, ""}, // Handled in clustermesh-apiserver/
-- 
2.39.1

