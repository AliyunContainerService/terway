From 9586087dd445d5fd4652df9211ddd0bfd42df2a6 Mon Sep 17 00:00:00 2001
From: l1b0k <libokang.dev@gmail.com>
Date: Mon, 6 Sep 2021 19:59:03 +0800
Subject: [PATCH] adapt CNI for IPv6 addr

Signed-off-by: l1b0k <libokang.dev@gmail.com>
---
 bpf/lib/icmp6.h                              |  2 +-
 plugins/cilium-cni/chaining/terway/terway.go | 57 ++++++++++----------
 2 files changed, 30 insertions(+), 29 deletions(-)

diff --git a/bpf/lib/icmp6.h b/bpf/lib/icmp6.h
index 2401132e9d..5534599c8b 100644
--- a/bpf/lib/icmp6.h
+++ b/bpf/lib/icmp6.h
@@ -394,7 +394,7 @@ static __always_inline int __icmp6_handle_ns(struct __ctx_buff *ctx, int nh_off)
 	}

 	/* Unknown target address, drop */
-	return ACTION_UNKNOWN_ICMP6_NS;
+	return 0;
 }

 #ifndef SKIP_ICMPV6_NS_HANDLING
diff --git a/plugins/cilium-cni/chaining/terway/terway.go b/plugins/cilium-cni/chaining/terway/terway.go
index 7c5752bc15..05d700f403 100644
--- a/plugins/cilium-cni/chaining/terway/terway.go
+++ b/plugins/cilium-cni/chaining/terway/terway.go
@@ -75,39 +75,39 @@ func (f *TerwayChainer) Add(ctx context.Context, pluginCtx chainingapi.PluginCon
 	defer netNs.Close()

 	var (
-		ifName                    = ""
-		disabled                  = false
-		containerIP, containerMac string
-		containerIfIndex          int
-		hostMac                   = vpcNetGatewayMac
+		ifName                                     = ""
+		disabled                                   = false
+		containerIPv4, containerIPv6, containerMac string
+		containerIfIndex                           int
+		hostMac                                    = vpcNetGatewayMac
 	)

+	if len(prevRes.Interfaces) == 0 {
+		err = fmt.Errorf("unable to get previous network interface: %v", prevRes)
+		return
+	}
+	ifName = prevRes.Interfaces[0].Name
+
+	for _, ip := range prevRes.IPs {
+		if ip == nil {
+			continue
+		}
+		if ip.Version == "4" {
+			containerIPv4 = ip.Address.IP.String()
+		}
+		if ip.Version == "6" {
+			containerIPv6 = ip.Address.IP.String()
+		}
+	}
+
 	if err = netNs.Do(func(_ ns.NetNS) error {
-		links, err := netlink.LinkList()
+		link, err := netlink.LinkByName(ifName)
 		if err != nil {
 			return fmt.Errorf("failed to list link %s", pluginCtx.Args.Netns)
 		}
-		for _, link := range links {
-			if link.Type() != "ipvlan" {
-				continue
-			}
-
-			ifName = link.Attrs().Name
-			containerMac = link.Attrs().HardwareAddr.String()
-
-			addrs, err := netlink.AddrList(link, netlink.FAMILY_V4)
-			if err != nil {
-				return fmt.Errorf("unable to list addresses for link %s: %s", link.Attrs().Name, err)
-			}
-			if len(addrs) < 1 {
-				return fmt.Errorf("no address configured inside container")
-			}
-
-			containerIP = addrs[0].IPNet.IP.String()
-			return nil
-		}
-
-		return fmt.Errorf("no link found inside container")
+		containerMac = link.Attrs().HardwareAddr.String()
+		containerIfIndex = link.Attrs().Index
+		return nil
 	}); err != nil {
 		return
 	}
@@ -126,7 +126,8 @@ func (f *TerwayChainer) Add(ctx context.Context, pluginCtx chainingapi.PluginCon
 	// create endpoint
 	ep := &models.EndpointChangeRequest{
 		Addressing: &models.AddressPair{
-			IPV4: containerIP,
+			IPV4: containerIPv4,
+			IPV6: containerIPv6,
 		},
 		ContainerID:       pluginCtx.Args.ContainerID,
 		State:             models.EndpointStateWaitingForIdentity,
--
2.30.1 (Apple Git-130)

