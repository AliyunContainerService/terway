From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: l1b0k <libokang.dev@gmail.com>
Date: Wed, 9 Jun 2021 16:55:20 +0800
Subject: [PATCH] cilium terway datapath

Signed-off-by: l1b0k <libokang.dev@gmail.com>
---
 daemon/cmd/endpoint.go                       |   6 +
 pkg/datapath/endpoint.go                     |   1 +
 pkg/datapath/loader/loader.go                |  57 ++++
 pkg/datapath/maps/map.go                     |   2 +
 pkg/endpoint/api.go                          |   1 +
 pkg/endpoint/bpf.go                          |  31 +-
 pkg/endpoint/cache.go                        |  12 +
 pkg/endpoint/endpoint.go                     |  45 +++
 pkg/endpoint/restore.go                      |   5 +
 plugins/cilium-cni/chaining/terway/terway.go | 328 +++++++++++++++++++
 plugins/cilium-cni/cilium-cni.go             |   1 +
 11 files changed, 482 insertions(+), 7 deletions(-)
 create mode 100644 plugins/cilium-cni/chaining/terway/terway.go

diff --git a/daemon/cmd/endpoint.go b/daemon/cmd/endpoint.go
index 9c5caf0288..9700af0b3a 100644
--- a/daemon/cmd/endpoint.go
+++ b/daemon/cmd/endpoint.go
@@ -442,6 +442,12 @@ func (d *Daemon) createEndpoint(ctx context.Context, owner regeneration.Owner, e
 		return d.errorDuringCreation(ep, fmt.Errorf("unable to insert endpoint into manager: %s", err))
 	}
 
+	// Now that we have ep.ID we can pin the map from this point. This
+	// also has to happen before the first build takes place.
+	if err = ep.PinDatapathMap(); err != nil {
+		return d.errorDuringCreation(ep, fmt.Errorf("unable to pin datapath maps: %s", err))
+	}
+
 	// We need to update the the visibility policy after adding the endpoint in
 	// the endpoint manager because the endpoint manager create the endpoint
 	// queue of the endpoint. If we execute this function before the endpoint
diff --git a/pkg/datapath/endpoint.go b/pkg/datapath/endpoint.go
index df10247172..d792464b59 100644
--- a/pkg/datapath/endpoint.go
+++ b/pkg/datapath/endpoint.go
@@ -12,4 +12,5 @@ type Endpoint interface {
 	InterfaceName() string
 	Logger(subsystem string) *logrus.Entry
 	StateDir() string
+	MapPath() string
 }
diff --git a/pkg/datapath/loader/loader.go b/pkg/datapath/loader/loader.go
index 1767cba662..1dba925080 100644
--- a/pkg/datapath/loader/loader.go
+++ b/pkg/datapath/loader/loader.go
@@ -9,8 +9,10 @@ import (
 	"net"
 	"os"
 	"path"
+	"strconv"
 	"sync"
 
+	"github.com/cilium/cilium/pkg/command/exec"
 	"github.com/sirupsen/logrus"
 	"github.com/vishvananda/netlink"
 
@@ -281,6 +283,33 @@ func (l *Loader) reloadDatapath(ctx context.Context, ep datapath.Endpoint, dirs
 		if err := l.reloadHostDatapath(ctx, ep, objPath); err != nil {
 			return err
 		}
+	} else if true {
+		if err := graftDatapath(ctx, ep.MapPath(), objPath, symbolFromEndpoint, 0); err != nil {
+			scopedLog := ep.Logger(Subsystem).WithFields(logrus.Fields{
+				logfields.Path: objPath,
+			})
+			// Don't log an error here if the context was canceled or timed out;
+			// this log message should only represent failures with respect to
+			// loading the program.
+			if ctx.Err() == nil {
+				scopedLog.WithError(err).Warn("JoinEP: Failed to load program")
+			}
+			return err
+		}
+		if ep.RequireEgressProg() {
+			if err := graftDatapath(ctx, ep.MapPath(), objPath, symbolToEndpoint, 1); err != nil {
+				scopedLog := ep.Logger(Subsystem).WithFields(logrus.Fields{
+					logfields.Path: objPath,
+				})
+				// Don't log an error here if the context was canceled or timed out;
+				// this log message should only represent failures with respect to
+				// loading the program.
+				if ctx.Err() == nil {
+					scopedLog.WithError(err).Warn("JoinEP: Failed to load program")
+				}
+				return err
+			}
+		}
 	} else {
 		finalize, err := replaceDatapath(ctx, ep.InterfaceName(), objPath, symbolFromEndpoint, dirIngress, false, "")
 		if err != nil {
@@ -496,3 +525,31 @@ func (l *Loader) CallsMapPath(id uint16) string {
 func (l *Loader) CustomCallsMapPath(id uint16) string {
 	return bpf.LocalMapPath(callsmap.CustomCallsMapName, id)
 }
+
+// graftDatapath replaces obj in tail call map
+func graftDatapath(ctx context.Context, mapPath, objPath, progSec string, key int) error {
+	if err := bpf.StartBPFFSMigration(bpf.MapPrefixPath(), objPath); err != nil {
+		return fmt.Errorf("Failed to start bpffs map migration: %w", err)
+	}
+
+	var revert bool
+	defer func() {
+		if err := bpf.FinalizeBPFFSMigration(bpf.MapPrefixPath(), objPath, revert); err != nil {
+			log.WithError(err).WithFields(logrus.Fields{logfields.BPFMapPath: mapPath, "objPath": objPath}).
+				Error("Could not finalize bpffs map migration")
+		}
+	}()
+
+	// FIXME: replace exec with native call
+	// FIXME: only key 0 right now, could be made more flexible
+	args := []string{"exec", "bpf", "graft", mapPath, "key", strconv.FormatInt(int64(key), 10),
+		"obj", objPath, "sec", progSec,
+	}
+	cmd := exec.CommandContext(ctx, "tc", args...).WithFilters(libbpfFixupMsg)
+	if _, err := cmd.CombinedOutput(log, true); err != nil {
+		revert = true
+		return fmt.Errorf("Failed to graft tc object: %s", err)
+	}
+
+	return nil
+}
diff --git a/pkg/datapath/maps/map.go b/pkg/datapath/maps/map.go
index 75693c531e..b2566751ab 100644
--- a/pkg/datapath/maps/map.go
+++ b/pkg/datapath/maps/map.go
@@ -11,6 +11,7 @@ import (
 	"strings"
 
 	"github.com/cilium/cilium/pkg/bpf"
+	"github.com/cilium/cilium/pkg/endpoint"
 	"github.com/cilium/cilium/pkg/logging"
 	"github.com/cilium/cilium/pkg/logging/logfields"
 	"github.com/cilium/cilium/pkg/maps/callsmap"
@@ -94,6 +95,7 @@ func (ms *MapSweeper) walk(path string, _ os.FileInfo, _ error) error {
 		ctmap.MapNameAny4,
 		callsmap.MapName,
 		callsmap.CustomCallsMapName,
+		endpoint.IpvlanMapName,
 	}
 
 	ms.checkStaleGlobalMap(path, filename)
diff --git a/pkg/endpoint/api.go b/pkg/endpoint/api.go
index 180885b270..f6c622470f 100644
--- a/pkg/endpoint/api.go
+++ b/pkg/endpoint/api.go
@@ -62,6 +62,7 @@ func NewEndpointFromChangeModel(ctx context.Context, owner regeneration.Owner, p
 	ep.dockerEndpointID = base.DockerEndpointID
 	ep.K8sPodName = base.K8sPodName
 	ep.K8sNamespace = base.K8sNamespace
+	ep.datapathMapID = int(base.DatapathMapID)
 
 	if base.Mac != "" {
 		m, err := mac.ParseMAC(base.Mac)
diff --git a/pkg/endpoint/bpf.go b/pkg/endpoint/bpf.go
index 6094bb40ea..084cd82c0e 100644
--- a/pkg/endpoint/bpf.go
+++ b/pkg/endpoint/bpf.go
@@ -75,6 +75,11 @@ func (e *Endpoint) customCallsMapPath() string {
 	return e.owner.Datapath().Loader().CustomCallsMapPath(e.ID)
 }
 
+// BPFIpvlanMapPath returns the path to the ipvlan tail call map of an endpoint.
+func (e *Endpoint) BPFIpvlanMapPath() string {
+	return bpf.LocalMapPath(IpvlanMapName, e.ID)
+}
+
 // writeInformationalComments writes annotations to the specified writer,
 // including a base64 encoding of the endpoint object, and human-readable
 // strings describing the configuration of the datapath.
@@ -954,6 +959,7 @@ func (e *Endpoint) deleteMaps() []error {
 	maps := map[string]string{
 		"policy": e.policyMapPath(),
 		"calls":  e.callsMapPath(),
+		"egress": e.BPFIpvlanMapPath(),
 	}
 	if !e.isHost {
 		maps["custom"] = e.customCallsMapPath()
@@ -1494,14 +1500,25 @@ func (e *Endpoint) GetPolicyVerdictLogFilter() uint32 {
 
 type linkCheckerFunc func(string) error
 
-// ValidateConnectorPlumbing checks whether the endpoint is correctly plumbed.
+// ValidateConnectorPlumbing checks whether the endpoint is correctly plumbed
+// depending on if it is connected via veth or IPVLAN.
 func (e *Endpoint) ValidateConnectorPlumbing(linkChecker linkCheckerFunc) error {
-	if linkChecker == nil {
-		return fmt.Errorf("cannot check state of datapath; link checker is nil")
-	}
-	err := linkChecker(e.ifName)
-	if err != nil {
-		return fmt.Errorf("interface %s could not be found", e.ifName)
+	if e.HasIpvlanDataPath() {
+		// FIXME: We cannot check whether ipvlan slave netdev exists,
+		// because it requires entering container netns which is not
+		// always accessible (e.g. in k8s case "/proc" has to be bind
+		// mounted). Instead, we check whether the tail call map exists.
+		if _, err := os.Stat(e.BPFIpvlanMapPath()); err != nil {
+			return fmt.Errorf("tail call map for IPvlan unavailable: %s", err)
+		}
+	} else {
+		if linkChecker == nil {
+			return fmt.Errorf("cannot check state of datapath; link checker is nil")
+		}
+		err := linkChecker(e.ifName)
+		if err != nil {
+			return fmt.Errorf("interface %s could not be found", e.ifName)
+		}
 	}
 	return nil
 }
diff --git a/pkg/endpoint/cache.go b/pkg/endpoint/cache.go
index f39d064078..0865a8451d 100644
--- a/pkg/endpoint/cache.go
+++ b/pkg/endpoint/cache.go
@@ -27,6 +27,7 @@ type epInfoCache struct {
 	epdir  string
 	id     uint64
 	ifName string
+	ipvlan bool
 
 	// For datapath.EndpointConfiguration
 	identity                               identity.NumericIdentity
@@ -64,6 +65,7 @@ func (e *Endpoint) createEpInfoCache(epdir string) *epInfoCache {
 		epdir:                  epdir,
 		id:                     e.GetID(),
 		ifName:                 e.ifName,
+		ipvlan:                 e.HasIpvlanDataPath(),
 		identity:               e.getIdentity(),
 		mac:                    e.GetNodeMAC(),
 		ipv4:                   e.IPv4Address(),
@@ -100,6 +102,11 @@ func (ep *epInfoCache) InterfaceName() string {
 	return ep.ifName
 }
 
+// MapPath returns tail call map path
+func (ep *epInfoCache) MapPath() string {
+	return ep.endpoint.BPFIpvlanMapPath()
+}
+
 // GetID returns the endpoint's ID.
 func (ep *epInfoCache) GetID() uint64 {
 	return ep.id
@@ -125,6 +132,11 @@ func (ep *epInfoCache) Logger(subsystem string) *logrus.Entry {
 	return ep.endpoint.Logger(subsystem)
 }
 
+// HasIpvlanDataPath returns whether the endpoint's datapath is implemented via ipvlan.
+func (ep *epInfoCache) HasIpvlanDataPath() bool {
+	return ep.ipvlan
+}
+
 // IPv4Address returns the cached IPv4 address for the endpoint.
 func (ep *epInfoCache) IPv4Address() addressing.CiliumIPv4 {
 	return ep.ipv4
diff --git a/pkg/endpoint/endpoint.go b/pkg/endpoint/endpoint.go
index 605d178beb..916c3f72b7 100644
--- a/pkg/endpoint/endpoint.go
+++ b/pkg/endpoint/endpoint.go
@@ -19,6 +19,7 @@ import (
 	"unsafe"
 
 	"github.com/sirupsen/logrus"
+	"golang.org/x/sys/unix"
 
 	"k8s.io/apimachinery/pkg/types"
 
@@ -26,6 +27,7 @@ import (
 	"github.com/cilium/cilium/pkg/addressing"
 	"github.com/cilium/cilium/pkg/annotation"
 	"github.com/cilium/cilium/pkg/bandwidth"
+	"github.com/cilium/cilium/pkg/bpf"
 	"github.com/cilium/cilium/pkg/completion"
 	"github.com/cilium/cilium/pkg/controller"
 	"github.com/cilium/cilium/pkg/datapath/link"
@@ -96,6 +98,9 @@ const (
 	// StateInvalid is used when an endpoint failed during creation due to
 	// invalid data.
 	StateInvalid = State(models.EndpointStateInvalid)
+
+	// IpvlanMapName specifies the tail call map for EP on egress used with ipvlan.
+	IpvlanMapName = "cilium_lxc_ipve_"
 )
 
 // compile time interface check
@@ -140,6 +145,9 @@ type Endpoint struct {
 	// libnetwork
 	dockerEndpointID string
 
+	// Corresponding BPF map identifier for tail call map of ipvlan datapath
+	datapathMapID int
+
 	// ifName is the name of the host facing interface (veth pair) which
 	// connects into the endpoint
 	ifName string
@@ -405,6 +413,14 @@ func (e *Endpoint) bpfProgramInstalled() bool {
 	}
 }
 
+// HasIpvlanDataPath returns whether the daemon is running in ipvlan mode.
+func (e *Endpoint) HasIpvlanDataPath() bool {
+	if e.datapathMapID > 0 {
+		return true
+	}
+	return false
+}
+
 // waitForProxyCompletions blocks until all proxy changes have been completed.
 // Called with buildMutex held.
 func (e *Endpoint) waitForProxyCompletions(proxyWaitGroup *completion.WaitGroup) error {
@@ -545,6 +561,9 @@ func (e *Endpoint) GetID16() uint16 {
 // In some datapath modes, it may return an empty string as there is no unique
 // host netns network interface for this endpoint.
 func (e *Endpoint) HostInterface() string {
+	if e.HasIpvlanDataPath() {
+		return ""
+	}
 	return e.ifName
 }
 
@@ -2100,6 +2119,32 @@ func (e *Endpoint) IsDisconnecting() bool {
 	return e.state == StateDisconnected || e.state == StateDisconnecting
 }
 
+// PinDatapathMap retrieves a file descriptor from the map ID from the API call
+// and pins the corresponding map into the BPF file system.
+func (e *Endpoint) PinDatapathMap() error {
+	if err := e.lockAlive(); err != nil {
+		return err
+	}
+	defer e.unlock()
+	return e.pinDatapathMap()
+}
+
+// PinDatapathMap retrieves a file descriptor from the map ID from the API call
+// and pins the corresponding map into the BPF file system.
+func (e *Endpoint) pinDatapathMap() error {
+	if e.datapathMapID == 0 {
+		return nil
+	}
+
+	mapFd, err := bpf.MapFdFromID(e.datapathMapID)
+	if err != nil {
+		return err
+	}
+	defer unix.Close(mapFd)
+
+	return bpf.ObjPin(mapFd, e.BPFIpvlanMapPath())
+}
+
 func (e *Endpoint) syncEndpointHeaderFile(reasons []string) {
 	e.buildMutex.Lock()
 	defer e.buildMutex.Unlock()
diff --git a/pkg/endpoint/restore.go b/pkg/endpoint/restore.go
index 099b363f2d..21124db6fb 100644
--- a/pkg/endpoint/restore.go
+++ b/pkg/endpoint/restore.go
@@ -384,6 +384,7 @@ func (e *Endpoint) toSerializedEndpoint() *serializableEndpoint {
 		ContainerID:           e.containerID,
 		DockerNetworkID:       e.dockerNetworkID,
 		DockerEndpointID:      e.dockerEndpointID,
+		DatapathMapID:         e.datapathMapID,
 		IfName:                e.ifName,
 		IfIndex:               e.ifIndex,
 		OpLabels:              e.OpLabels,
@@ -433,6 +434,9 @@ type serializableEndpoint struct {
 	// libnetwork
 	DockerEndpointID string
 
+	// Corresponding BPF map identifier for tail call map of ipvlan datapath
+	DatapathMapID int
+
 	// ifName is the name of the host facing interface (veth pair) which
 	// connects into the endpoint
 	IfName string
@@ -526,6 +530,7 @@ func (ep *Endpoint) fromSerializedEndpoint(r *serializableEndpoint) {
 	ep.containerID = r.ContainerID
 	ep.dockerNetworkID = r.DockerNetworkID
 	ep.dockerEndpointID = r.DockerEndpointID
+	ep.datapathMapID = r.DatapathMapID
 	ep.ifName = r.IfName
 	ep.ifIndex = r.IfIndex
 	ep.OpLabels = r.OpLabels
diff --git a/plugins/cilium-cni/chaining/terway/terway.go b/plugins/cilium-cni/chaining/terway/terway.go
new file mode 100644
index 0000000000..d85bba9285
--- /dev/null
+++ b/plugins/cilium-cni/chaining/terway/terway.go
@@ -0,0 +1,328 @@
+// Copyright 2019 Authors of Cilium
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package terway
+
+import (
+	"context"
+	"fmt"
+
+	"github.com/cilium/cilium/api/v1/models"
+	"github.com/cilium/cilium/pkg/datapath/link"
+	endpointid "github.com/cilium/cilium/pkg/endpoint/id"
+	"github.com/cilium/cilium/pkg/logging"
+	"github.com/cilium/cilium/pkg/logging/logfields"
+	chainingapi "github.com/cilium/cilium/plugins/cilium-cni/chaining/api"
+	"github.com/cilium/ebpf"
+	"github.com/cilium/ebpf/asm"
+	"github.com/cilium/ebpf/rlimit"
+	cniTypesVer "github.com/containernetworking/cni/pkg/types/100"
+	cniVersion "github.com/containernetworking/cni/pkg/version"
+	"github.com/containernetworking/plugins/pkg/ns"
+	"github.com/sirupsen/logrus"
+	"github.com/vishvananda/netlink"
+)
+
+var (
+	name = "terway-chainer"
+	log  = logging.DefaultLogger.WithField(logfields.LogSubsys, name)
+)
+
+// TerwayChainer is terway chain object
+type TerwayChainer struct{}
+
+// ImplementsAdd returns true if method 'add' is available
+func (f *TerwayChainer) ImplementsAdd() bool {
+	return true
+}
+
+// Add setups the ipvlan port's tc-bpf
+func (f *TerwayChainer) Add(ctx context.Context, pluginCtx chainingapi.PluginContext) (res *cniTypesVer.Result, err error) {
+	err = cniVersion.ParsePrevResult(&pluginCtx.NetConf.NetConf)
+	if err != nil {
+		err = fmt.Errorf("unable to understand network config: %s", err)
+		return
+	}
+
+	var prevRes *cniTypesVer.Result
+	prevRes, err = cniTypesVer.NewResultFromResult(pluginCtx.NetConf.PrevResult)
+	if err != nil {
+		err = fmt.Errorf("unable to get previous network result: %s", err)
+		return
+	}
+	defer func() {
+		if err != nil {
+			pluginCtx.Logger.WithError(err).
+				WithFields(logrus.Fields{"cni-pre-result": pluginCtx.NetConf.PrevResult}).
+				Errorf("Unable to create endpoint")
+		}
+	}()
+
+	netNs, err := ns.GetNS(pluginCtx.Args.Netns)
+	if err != nil {
+		err = fmt.Errorf("failed to open netns %q: %s", pluginCtx.Args.Netns, err)
+		return
+	}
+	defer netNs.Close()
+
+	var (
+		ifName                                     = ""
+		disabled                                   = false
+		containerIPv4, containerIPv6, containerMac string
+		containerIfIndex                           int
+	)
+
+	if len(prevRes.Interfaces) == 0 {
+		err = fmt.Errorf("unable to get previous network interface: %v", prevRes)
+		return
+	}
+	ifName = prevRes.Interfaces[0].Name
+
+	for _, ip := range prevRes.IPs {
+		if ip == nil {
+			continue
+		}
+		if ip.Address.IP.To4() != nil {
+			containerIPv4 = ip.Address.IP.String()
+		} else {
+			containerIPv6 = ip.Address.IP.String()
+		}
+	}
+
+	if err = netNs.Do(func(_ ns.NetNS) error {
+		link, err := netlink.LinkByName(ifName)
+		if err != nil {
+			return fmt.Errorf("failed to list link %s", pluginCtx.Args.Netns)
+		}
+		containerMac = link.Attrs().HardwareAddr.String()
+		containerIfIndex = link.Attrs().Index
+		return nil
+	}); err != nil {
+		return
+	}
+
+	// set bpf
+	m, err := setupIpvlanInRemoteNs(netNs, ifName, ifName, true, true)
+	if err != nil {
+		pluginCtx.Logger.WithError(err).Warn("Unable to set ipvlan ebpf")
+		return
+	}
+	defer m.Close()
+	info, err := m.Info()
+	if err != nil {
+		return nil, fmt.Errorf("failed to get map info: %w", err)
+	}
+
+	mapID, ok := info.ID()
+	if !ok {
+		return nil, fmt.Errorf("failed to get map ID: %w", err)
+	}
+	// create endpoint
+	ep := &models.EndpointChangeRequest{
+		Addressing: &models.AddressPair{
+			IPV4: containerIPv4,
+			IPV6: containerIPv6,
+		},
+		ContainerID:       pluginCtx.Args.ContainerID,
+		State:             models.EndpointStateWaitingForIdentity,
+		HostMac:           containerMac,
+		InterfaceIndex:    int64(containerIfIndex),
+		Mac:               containerMac,
+		InterfaceName:     ifName,
+		K8sPodName:        string(pluginCtx.CniArgs.K8S_POD_NAME),
+		K8sNamespace:      string(pluginCtx.CniArgs.K8S_POD_NAMESPACE),
+		SyncBuildEndpoint: true,
+		DatapathMapID:     int64(mapID),
+		DatapathConfiguration: &models.EndpointDatapathConfiguration{
+			RequireArpPassthrough: true,
+			RequireEgressProg:     true,
+			ExternalIpam:          true,
+			RequireRouting:        &disabled,
+		},
+	}
+
+	err = pluginCtx.Client.EndpointCreate(ep)
+	if err != nil {
+		pluginCtx.Logger.WithError(err).WithFields(logrus.Fields{
+			logfields.ContainerID: ep.ContainerID}).Warn("Unable to create endpoint")
+		err = fmt.Errorf("unable to create endpoint: %s", err)
+		return
+	}
+
+	pluginCtx.Logger.WithFields(logrus.Fields{
+		logfields.ContainerID: ep.ContainerID}).Debug("Endpoint successfully created")
+
+	res = prevRes
+	return
+}
+
+// ImplementsDelete return true if method 'delete' is available
+func (f *TerwayChainer) ImplementsDelete() bool {
+	return true
+}
+
+// Delete deletes cilium endpoint
+func (f *TerwayChainer) Delete(ctx context.Context, pluginCtx chainingapi.PluginContext) (err error) {
+	id := endpointid.NewID(endpointid.ContainerIdPrefix, pluginCtx.Args.ContainerID)
+	if err := pluginCtx.Client.EndpointDelete(id); err != nil {
+		log.WithError(err).Warning("Errors encountered while deleting endpoint")
+	}
+	return nil
+}
+
+func init() {
+	chainingapi.Register(name, &TerwayChainer{})
+}
+
+// setupIpvlanInRemoteNs creates a tail call map, renames the netdevice inside
+// the target netns and attaches a BPF program to it on egress path which
+// then jumps into the tail call map index 0.
+//
+// NB: Do not close the returned map before it has been pinned. Otherwise,
+// the map will be destroyed.
+func setupIpvlanInRemoteNs(netNs ns.NetNS, srcIfName, dstIfName string, ingress, egress bool) (*ebpf.Map, error) {
+	if err := rlimit.RemoveMemlock(); err != nil {
+		return nil, fmt.Errorf("unable to increase rlimit: %s", err)
+	}
+	maxEntries := uint32(0)
+	if ingress {
+		maxEntries++
+	}
+	if egress {
+		maxEntries++
+	}
+	m, err := ebpf.NewMap(&ebpf.MapSpec{
+		Type:       ebpf.ProgramArray,
+		KeySize:    4,
+		ValueSize:  4,
+		MaxEntries: maxEntries,
+	})
+	if err != nil {
+		return nil, fmt.Errorf("failed to create root BPF map for %q: %s", dstIfName, err)
+	}
+
+	err = netNs.Do(func(_ ns.NetNS) error {
+		var err error
+
+		if srcIfName != dstIfName {
+			err = link.Rename(srcIfName, dstIfName)
+			if err != nil {
+				return fmt.Errorf("failed to rename ipvlan from %q to %q: %s", srcIfName, dstIfName, err)
+			}
+		}
+
+		ipvlan, err := netlink.LinkByName(dstIfName)
+		if err != nil {
+			return fmt.Errorf("failed to lookup ipvlan device %q: %s", dstIfName, err)
+		}
+
+		qdiscAttrs := netlink.QdiscAttrs{
+			LinkIndex: ipvlan.Attrs().Index,
+			Handle:    netlink.MakeHandle(0xffff, 0),
+			Parent:    netlink.HANDLE_CLSACT,
+		}
+		qdisc := &netlink.GenericQdisc{
+			QdiscAttrs: qdiscAttrs,
+			QdiscType:  "clsact",
+		}
+		if err = netlink.QdiscAdd(qdisc); err != nil {
+			return fmt.Errorf("failed to create clsact qdisc on %q: %s", dstIfName, err)
+		}
+
+		if egress {
+			prog, err := ebpf.NewProgram(&ebpf.ProgramSpec{
+				Type:         ebpf.SchedCLS,
+				Instructions: getEntryProgInstructions(m.FD()),
+				License:      "ASL2",
+			})
+			if err != nil {
+				return fmt.Errorf("failed to load root BPF prog for %q: %s", dstIfName, err)
+			}
+
+			filterAttrs := netlink.FilterAttrs{
+				LinkIndex: ipvlan.Attrs().Index,
+				Parent:    netlink.HANDLE_MIN_EGRESS,
+				Handle:    netlink.MakeHandle(0, 1),
+				Protocol:  3,
+				Priority:  1,
+			}
+			filter := &netlink.BpfFilter{
+				FilterAttrs:  filterAttrs,
+				Fd:           prog.FD(),
+				Name:         "polEntry",
+				DirectAction: true,
+			}
+			if err = netlink.FilterAdd(filter); err != nil {
+				prog.Close()
+				return fmt.Errorf("failed to create cls_bpf filter on %q: %s", dstIfName, err)
+			}
+		}
+
+		if ingress {
+			prog, err := ebpf.NewProgram(&ebpf.ProgramSpec{
+				Type:         ebpf.SchedCLS,
+				Instructions: getIngressEntryProgInstructions(m.FD()),
+				License:      "ASL2",
+			})
+			if err != nil {
+				return fmt.Errorf("failed to load root BPF prog for %q: %s", dstIfName, err)
+			}
+
+			filterAttrs := netlink.FilterAttrs{
+				LinkIndex: ipvlan.Attrs().Index,
+				Parent:    netlink.HANDLE_MIN_INGRESS,
+				Handle:    netlink.MakeHandle(0, 1),
+				Protocol:  3,
+				Priority:  1,
+			}
+			filter := &netlink.BpfFilter{
+				FilterAttrs:  filterAttrs,
+				Fd:           prog.FD(),
+				Name:         "ingressPolEntry",
+				DirectAction: true,
+			}
+			if err = netlink.FilterAdd(filter); err != nil {
+				prog.Close()
+				return fmt.Errorf("failed to create cls_bpf filter on %q: %s", dstIfName, err)
+			}
+		}
+
+		return nil
+	})
+	if err != nil {
+		m.Close()
+		return nil, err
+	}
+	return m, nil
+}
+
+func getEntryProgInstructions(fd int) asm.Instructions {
+	return asm.Instructions{
+		asm.LoadMapPtr(asm.R2, fd),
+		asm.Mov.Imm(asm.R3, 0),
+		asm.FnTailCall.Call(),
+		asm.Mov.Imm(asm.R0, 0),
+		asm.Return(),
+	}
+}
+
+func getIngressEntryProgInstructions(fd int) asm.Instructions {
+	return asm.Instructions{
+		asm.LoadMapPtr(asm.R2, fd),
+		asm.Mov.Imm(asm.R3, 1),
+		asm.FnTailCall.Call(),
+		asm.Mov.Imm(asm.R0, 0),
+		asm.Return(),
+	}
+}
diff --git a/plugins/cilium-cni/cilium-cni.go b/plugins/cilium-cni/cilium-cni.go
index 5eca17daeb..1ee2227373 100644
--- a/plugins/cilium-cni/cilium-cni.go
+++ b/plugins/cilium-cni/cilium-cni.go
@@ -48,6 +48,7 @@ import (
 	_ "github.com/cilium/cilium/plugins/cilium-cni/chaining/flannel"
 	_ "github.com/cilium/cilium/plugins/cilium-cni/chaining/generic-veth"
 	_ "github.com/cilium/cilium/plugins/cilium-cni/chaining/portmap"
+	_ "github.com/cilium/cilium/plugins/cilium-cni/chaining/terway"
 	"github.com/cilium/cilium/plugins/cilium-cni/types"
 )
 
-- 
2.39.1

