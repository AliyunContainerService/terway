From 7115da2ae662be190f37f3f42a57df209bbcddc6 Mon Sep 17 00:00:00 2001
From: l1b0k <libokang.dev@gmail.com>
Date: Wed, 9 Jun 2021 16:32:33 +0800
Subject: [PATCH 3/5] period gc cilium identity

Signed-off-by: l1b0k <libokang.dev@gmail.com>
---
 daemon/cmd/daemon_main.go                     |   6 +
 daemon/cmd/gc.go                              | 156 ++++++++++++++++++
 .../k8s.io/apimachinery/pkg/util/uuid/uuid.go |  27 +++
 vendor/modules.txt                            |   1 +
 4 files changed, 190 insertions(+)
 create mode 100644 daemon/cmd/gc.go
 create mode 100644 vendor/k8s.io/apimachinery/pkg/util/uuid/uuid.go

diff --git a/daemon/cmd/daemon_main.go b/daemon/cmd/daemon_main.go
index ee513ba736..52a19868c3 100644
--- a/daemon/cmd/daemon_main.go
+++ b/daemon/cmd/daemon_main.go
@@ -52,6 +52,7 @@ import (
 	ipamOption "github.com/cilium/cilium/pkg/ipam/option"
 	"github.com/cilium/cilium/pkg/ipmasq"
 	"github.com/cilium/cilium/pkg/k8s"
+	ciliumcs "github.com/cilium/cilium/pkg/k8s/client/clientset/versioned"
 	"github.com/cilium/cilium/pkg/k8s/watchers"
 	"github.com/cilium/cilium/pkg/kvstore"
 	"github.com/cilium/cilium/pkg/labels"
@@ -85,6 +86,8 @@ import (
 	"github.com/spf13/viper"
 	"github.com/vishvananda/netlink"
 	"google.golang.org/grpc"
+	"k8s.io/client-go/kubernetes"
+	"k8s.io/client-go/tools/clientcmd"
 )
 
 const (
@@ -1574,6 +1577,9 @@ func runDaemon() {
 		}
 		return
 	}
+	cfg, _ := clientcmd.BuildConfigFromFlags("", "")
+	cilium := NewCiliumService(kubernetes.NewForConfigOrDie(cfg), ciliumcs.NewForConfigOrDie(cfg))
+	go cilium.Run()
 
 	// This validation needs to be done outside of the agent until
 	// datapath.NodeAddressing is used consistently across the code base.
diff --git a/daemon/cmd/gc.go b/daemon/cmd/gc.go
new file mode 100644
index 0000000000..b8a13b44ee
--- /dev/null
+++ b/daemon/cmd/gc.go
@@ -0,0 +1,156 @@
+package cmd
+
+import (
+	"context"
+	"fmt"
+	"os"
+	"time"
+
+	"github.com/cilium/cilium/operator/identity"
+	v2 "github.com/cilium/cilium/pkg/k8s/apis/cilium.io/v2"
+	ciliumcs "github.com/cilium/cilium/pkg/k8s/client/clientset/versioned"
+	"github.com/sirupsen/logrus"
+	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
+	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
+	"k8s.io/apimachinery/pkg/util/uuid"
+	"k8s.io/apimachinery/pkg/util/wait"
+	k8scs "k8s.io/client-go/kubernetes"
+	"k8s.io/client-go/tools/leaderelection"
+	"k8s.io/client-go/tools/leaderelection/resourcelock"
+)
+
+const logFieldCilium = "cilium"
+const logFieldIdentity = "identity"
+
+type Cilium struct {
+	Client       k8scs.Interface
+	CiliumClient ciliumcs.Interface
+	GCInterval   time.Duration
+}
+
+// NewCiliumService NewCiliumService
+func NewCiliumService(client k8scs.Interface, ciliumClient ciliumcs.Interface) *Cilium {
+	return &Cilium{
+		Client:       client,
+		CiliumClient: ciliumClient,
+		GCInterval:   30 * time.Minute,
+	}
+}
+
+// Run Run
+func (c *Cilium) Run() {
+	daemonNamespace := os.Getenv("POD_NAMESPACE")
+	if len(daemonNamespace) == 0 {
+		daemonNamespace = "kube-system"
+	}
+	id := fmt.Sprintf("%s_%s_%s", daemonNamespace, os.Getenv("NODENAME"), uuid.NewUUID())
+
+	lock := &resourcelock.LeaseLock{
+		LeaseMeta: metav1.ObjectMeta{
+			Name:      "terway-cilium-lock",
+			Namespace: daemonNamespace,
+		},
+		Client: c.Client.CoordinationV1(),
+		LockConfig: resourcelock.ResourceLockConfig{
+			Identity: id,
+		},
+	}
+	// start the leader election code loop
+	go func() {
+		for {
+			leaderelection.RunOrDie(context.TODO(), leaderelection.LeaderElectionConfig{
+				Lock:            lock,
+				ReleaseOnCancel: true,
+				LeaseDuration:   170 * time.Second,
+				RenewDeadline:   80 * time.Second,
+				RetryPeriod:     60 * time.Second,
+				Callbacks: leaderelection.LeaderCallbacks{
+					OnStartedLeading: func(ctx context.Context) {
+						c.GC(ctx)
+					},
+					OnStoppedLeading: func() {
+						logrus.Infof("leader lost")
+					},
+					OnNewLeader: func(identity string) {
+						if identity == id {
+							// I just got the lock
+							return
+						}
+						logrus.Infof("new leader elected: %s", identity)
+					},
+				},
+			})
+			time.Sleep(10. * time.Second)
+		}
+	}()
+}
+
+func (c *Cilium) GC(ctx context.Context) {
+	identityHeartbeat := identity.NewIdentityHeartbeatStore(2 * c.GCInterval)
+
+	wait.JitterUntil(func() {
+		identities, err := c.CiliumClient.CiliumV2().CiliumIdentities().List(context.TODO(), v1.ListOptions{ResourceVersion: "0", TimeoutSeconds: func(t int64) *int64 { return &t }(60)})
+		if err != nil {
+			logrus.WithError(err).Error("Unable to list cilium identities")
+			return
+		}
+		eps, err := c.CiliumClient.CiliumV2().CiliumEndpoints("").List(context.TODO(), v1.ListOptions{ResourceVersion: "0", TimeoutSeconds: func(t int64) *int64 { return &t }(60)})
+		if err != nil {
+			logrus.WithError(err).Error("Unable to list cilium endpoints")
+			return
+		}
+
+		timeNow := time.Now()
+		for _, ciliumIdentity := range identities.Items {
+			for _, ep := range eps.Items {
+				if ep.Status.Identity != nil && fmt.Sprintf("%d", ep.Status.Identity.ID) == ciliumIdentity.Name {
+					// If the ciliumIdentity is alive then mark it as alive
+					identityHeartbeat.MarkAlive(ciliumIdentity.Name, timeNow)
+					logrus.WithFields(logrus.Fields{
+						logFieldIdentity: ciliumIdentity.Name,
+					}).Debugf("Mark identity in use %s", ciliumIdentity.Name)
+					continue
+				}
+			}
+
+			if !identityHeartbeat.IsAlive(ciliumIdentity.Name) {
+				logrus.WithFields(logrus.Fields{
+					logFieldIdentity: ciliumIdentity.Name,
+				}).Debug("Deleting unused identity")
+				if err := c.deleteIdentity(ctx, &ciliumIdentity); err != nil {
+					logrus.WithError(err).WithFields(logrus.Fields{
+						logFieldIdentity: ciliumIdentity.Name,
+					}).Error("Deleting unused identity")
+					// If Context was canceled we should break
+					if ctx.Err() != nil {
+						break
+					}
+				}
+			}
+		}
+
+		identityHeartbeat.GC()
+	}, c.GCInterval, 1.1, false, ctx.Done())
+	logrus.WithField(logFieldCilium, "cilium").Debugf("GC loop end")
+}
+
+// deleteIdentity deletes an identity. It includes the resource version and
+// will error if the object has since been changed.
+func (c *Cilium) deleteIdentity(ctx context.Context, identity *v2.CiliumIdentity) error {
+	err := c.CiliumClient.CiliumV2().CiliumIdentities().Delete(
+		ctx,
+		identity.Name,
+		metav1.DeleteOptions{
+			Preconditions: &metav1.Preconditions{
+				UID:             &identity.UID,
+				ResourceVersion: &identity.ResourceVersion,
+			},
+		})
+	if err != nil {
+		logrus.WithError(err).Error("Unable to delete identity")
+	} else {
+		logrus.WithField(logFieldIdentity, identity.GetName()).Info("Garbage collected identity")
+	}
+
+	return err
+}
diff --git a/vendor/k8s.io/apimachinery/pkg/util/uuid/uuid.go b/vendor/k8s.io/apimachinery/pkg/util/uuid/uuid.go
new file mode 100644
index 0000000000..1fa351aab6
--- /dev/null
+++ b/vendor/k8s.io/apimachinery/pkg/util/uuid/uuid.go
@@ -0,0 +1,27 @@
+/*
+Copyright 2014 The Kubernetes Authors.
+
+Licensed under the Apache License, Version 2.0 (the "License");
+you may not use this file except in compliance with the License.
+You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+*/
+
+package uuid
+
+import (
+	"github.com/google/uuid"
+
+	"k8s.io/apimachinery/pkg/types"
+)
+
+func NewUUID() types.UID {
+	return types.UID(uuid.New().String())
+}
diff --git a/vendor/modules.txt b/vendor/modules.txt
index 0f801cda27..57e4188442 100644
--- a/vendor/modules.txt
+++ b/vendor/modules.txt
@@ -1058,6 +1058,7 @@ k8s.io/apimachinery/pkg/util/net
 k8s.io/apimachinery/pkg/util/runtime
 k8s.io/apimachinery/pkg/util/sets
 k8s.io/apimachinery/pkg/util/strategicpatch
+k8s.io/apimachinery/pkg/util/uuid
 k8s.io/apimachinery/pkg/util/validation
 k8s.io/apimachinery/pkg/util/validation/field
 k8s.io/apimachinery/pkg/util/wait
-- 
2.32.0

