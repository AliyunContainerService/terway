From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: l1b0k <libokang.dev@gmail.com>
Date: Mon, 8 Apr 2024 15:38:11 +0800
Subject: enable bpf_routing

Signed-off-by: l1b0k <libokang.dev@gmail.com>
---
 bpf/bpf_lxc.c                        | 68 ++++++++++++++++------------
 daemon/cmd/kube_proxy_replacement.go | 13 ++++++
 pkg/datapath/linux/config/config.go  |  6 +++
 3 files changed, 59 insertions(+), 28 deletions(-)

diff --git a/bpf/bpf_lxc.c b/bpf/bpf_lxc.c
index 7698a568e2..8583abe9cd 100644
--- a/bpf/bpf_lxc.c
+++ b/bpf/bpf_lxc.c
@@ -215,9 +215,9 @@ static __always_inline int handle_ipv6_from_lxc(struct __ctx_buff *ctx, __u32 *d
 {
 	struct ct_state ct_state_on_stack __maybe_unused, *ct_state, ct_state_new = {};
 	struct ipv6_ct_tuple tuple_on_stack __maybe_unused, *tuple;
-#ifdef ENABLE_ROUTING
-	union macaddr router_mac = NODE_MAC;
-#endif
+//#ifdef ENABLE_ROUTING
+//	union macaddr router_mac = NODE_MAC;
+//#endif
 	struct ct_buffer6 *ct_buffer;
 	void *data, *data_end;
 	struct ipv6hdr *ip6;
@@ -519,6 +519,12 @@ ct_recreate6:
 	if (is_defined(ENABLE_HOST_ROUTING)) {
 		int oif;
 
+        if (unlikely(ip6->nexthdr == IPPROTO_ICMPV6))
+            goto pass_to_stack;
+
+        if (*dst_id == HOST_ID )
+            goto pass_to_stack;
+
 		ret = redirect_direct_v6(ctx, ETH_HLEN, ip6, &oif);
 		if (likely(ret == CTX_ACT_REDIRECT))
 			send_trace_notify(ctx, TRACE_TO_NETWORK, SECLABEL,
@@ -529,6 +535,12 @@ ct_recreate6:
         // for 4.19 use redirect
         int oif = CONTAINER_DIRECT_ROUTING_DEV_IFINDEX;
 
+        if (unlikely(ip6->nexthdr == IPPROTO_ICMPV6))
+            goto pass_to_stack;
+
+        if (*dst_id == HOST_ID )
+            goto pass_to_stack;
+
         return ctx_redirect(ctx, oif, 0);
     }
 
@@ -536,19 +548,19 @@ ct_recreate6:
 
 #ifdef ENABLE_ROUTING
 to_host:
-	if (is_defined(ENABLE_HOST_FIREWALL) && *dst_id == HOST_ID) {
-		send_trace_notify(ctx, TRACE_TO_HOST, SECLABEL, HOST_ID, 0,
-				  HOST_IFINDEX, trace.reason, trace.monitor);
-		return ctx_redirect(ctx, HOST_IFINDEX, BPF_F_INGRESS);
-	}
+//	if (is_defined(ENABLE_HOST_FIREWALL) && *dst_id == HOST_ID) {
+//		send_trace_notify(ctx, TRACE_TO_HOST, SECLABEL, HOST_ID, 0,
+//				  HOST_IFINDEX, trace.reason, trace.monitor);
+//		return ctx_redirect(ctx, HOST_IFINDEX, BPF_F_INGRESS);
+//	}
 #endif
 
 pass_to_stack:
-#ifdef ENABLE_ROUTING
-	ret = ipv6_l3(ctx, ETH_HLEN, NULL, (__u8 *)&router_mac.addr, METRIC_EGRESS);
-	if (unlikely(ret != CTX_ACT_OK))
-		return ret;
-#endif
+//#ifdef ENABLE_ROUTING
+//	ret = ipv6_l3(ctx, ETH_HLEN, NULL, (__u8 *)&router_mac.addr, METRIC_EGRESS);
+//	if (unlikely(ret != CTX_ACT_OK))
+//		return ret;
+//#endif
 
 	if (ipv6_store_flowlabel(ctx, ETH_HLEN, SECLABEL_NB) < 0)
 		return DROP_WRITE_ERROR;
@@ -742,9 +754,9 @@ static __always_inline int handle_ipv4_from_lxc(struct __ctx_buff *ctx, __u32 *d
 {
 	struct ct_state ct_state_on_stack __maybe_unused, *ct_state, ct_state_new = {};
 	struct ipv4_ct_tuple tuple_on_stack __maybe_unused, *tuple;
-#ifdef ENABLE_ROUTING
-	union macaddr router_mac = NODE_MAC;
-#endif
+//#ifdef ENABLE_ROUTING
+//	union macaddr router_mac = NODE_MAC;
+//#endif
 	void *data, *data_end;
 	struct iphdr *ip4;
 	int ret, verdict = 0, l4_off;
@@ -1115,7 +1127,7 @@ skip_vtep:
 	    // for 5.10 use bpf redirect neigh
 		int oif;
 
-        if (ip4->daddr == LOCAL_DNS_IP )
+        if (ip4->daddr == LOCAL_DNS_IP || *dst_id == HOST_ID )
             goto pass_to_stack;
 
 		ret = redirect_direct_v4(ctx, ETH_HLEN, ip4, &oif);
@@ -1128,7 +1140,7 @@ skip_vtep:
 	    // for 4.19 use redirect
 	    int oif = CONTAINER_DIRECT_ROUTING_DEV_IFINDEX;
 
-        if (ip4->daddr == LOCAL_DNS_IP )
+        if (ip4->daddr == LOCAL_DNS_IP || *dst_id == HOST_ID )
             goto pass_to_stack;
         return ctx_redirect(ctx, oif, 0);
 	}
@@ -1137,19 +1149,19 @@ skip_vtep:
 
 #ifdef ENABLE_ROUTING
 to_host:
-	if (is_defined(ENABLE_HOST_FIREWALL) && *dst_id == HOST_ID) {
-		send_trace_notify(ctx, TRACE_TO_HOST, SECLABEL, HOST_ID, 0,
-				  HOST_IFINDEX, trace.reason, trace.monitor);
-		return ctx_redirect(ctx, HOST_IFINDEX, BPF_F_INGRESS);
-	}
+//	if (is_defined(ENABLE_HOST_FIREWALL) && *dst_id == HOST_ID) {
+//		send_trace_notify(ctx, TRACE_TO_HOST, SECLABEL, HOST_ID, 0,
+//				  HOST_IFINDEX, trace.reason, trace.monitor);
+//		return ctx_redirect(ctx, HOST_IFINDEX, BPF_F_INGRESS);
+//	}
 #endif
 
 pass_to_stack:
-#ifdef ENABLE_ROUTING
-	ret = ipv4_l3(ctx, ETH_HLEN, NULL, (__u8 *)&router_mac.addr, ip4);
-	if (unlikely(ret != CTX_ACT_OK))
-		return ret;
-#endif
+//#ifdef ENABLE_ROUTING
+//	ret = ipv4_l3(ctx, ETH_HLEN, NULL, (__u8 *)&router_mac.addr, ip4);
+//	if (unlikely(ret != CTX_ACT_OK))
+//		return ret;
+//#endif
 
 #ifdef ENABLE_WIREGUARD
 	if (dst_remote_ep)
diff --git a/daemon/cmd/kube_proxy_replacement.go b/daemon/cmd/kube_proxy_replacement.go
index 8cb34cbaec..698b66a40f 100644
--- a/daemon/cmd/kube_proxy_replacement.go
+++ b/daemon/cmd/kube_proxy_replacement.go
@@ -517,6 +517,19 @@ func finishKubeProxyReplacementInit(isKubeProxyReplacementStrict bool) error {
 	if !option.Config.EnableNodePort {
 		// Make sure that NodePort dependencies are disabled
 		disableNodePort()
+
+		probesManager := probes.NewProbeManager()
+		foundNeigh := false
+		foundPeer := false
+		if h := probesManager.GetHelpers("sched_cls"); h != nil {
+			_, foundNeigh = h["bpf_redirect_neigh"]
+			_, foundPeer = h["bpf_redirect_peer"]
+		}
+		if !foundNeigh || !foundPeer {
+			log.Infof("BPF host routing requires kernel 5.10 or newer.")
+			option.Config.EnableHostLegacyRouting = true
+		}
+
 		return nil
 	}
 
diff --git a/pkg/datapath/linux/config/config.go b/pkg/datapath/linux/config/config.go
index 4c21ac7544..dfc5096aac 100644
--- a/pkg/datapath/linux/config/config.go
+++ b/pkg/datapath/linux/config/config.go
@@ -277,6 +277,10 @@ func (h *HeaderfileWriter) WriteNodeConfig(w io.Writer, cfg *datapath.LocalNodeC
 		}
 	}
 
+	if !option.Config.EnableHostLegacyRouting {
+		cDefinesMap["ENABLE_HOST_ROUTING"] = "1"
+	}
+
 	if option.Config.EnableNodePort {
 		if option.Config.EnableHealthDatapath {
 			cDefinesMap["ENABLE_HEALTH_CHECK"] = "1"
@@ -873,6 +877,8 @@ func (h *HeaderfileWriter) writeTemplateConfig(fw *bufio.Writer, e datapath.Endp
 		// CONTAINER_DIRECT_ROUTING_DEV_IFINDEX is used for both, but not for ipvl
 		// for veth redirect
 		fmt.Fprintf(fw, "#define ENABLE_REDIRECT 1\n")
+
+		fmt.Fprintf(fw, "#define ENABLE_ROUTING 1\n")
 	default:
 		return fmt.Errorf("unsupported datapath mode: %s", option.Config.DatapathMode)
 	}
-- 
2.39.5 (Apple Git-154)

