From 62f1eb4cc0635f6329a9c7d258da6763bd414d8f Mon Sep 17 00:00:00 2001
From: "bingshen.wbs" <bingshen.wbs@alibaba-inc.com>
Date: Wed, 9 Jun 2021 20:32:09 +0800
Subject: [PATCH 1/3] terway

---
 felix/calc/calc_graph.go                 |  4 +-
 felix/daemon/daemon.go                   | 54 ++++++++++++------------
 felix/dataplane/linux/endpoint_mgr.go    | 26 ++++++------
 felix/dataplane/linux/masq_mgr.go        |  8 +++-
 felix/environment/feature_detect.go      | 11 +++++
 felix/environment/feature_detect_test.go | 18 ++++++++
 6 files changed, 78 insertions(+), 43 deletions(-)

diff --git a/felix/calc/calc_graph.go b/felix/calc/calc_graph.go
index 42159e49d..22128aa0d 100644
--- a/felix/calc/calc_graph.go
+++ b/felix/calc/calc_graph.go
@@ -383,8 +383,8 @@ func NewCalculationGraph(callbacks PipelineCallbacks, conf *config.Config) *Calc
 	//         |
 	//      <dataplane>
 	//
-	configBatcher := NewConfigBatcher(hostname, callbacks)
-	configBatcher.RegisterWith(allUpdDispatcher)
+	//configBatcher := NewConfigBatcher(hostname, callbacks)
+	//configBatcher.RegisterWith(allUpdDispatcher)
 
 	// The profile decoder identifies objects with special dataplane significance which have
 	// been encoded as profiles by libcalico-go. At present this includes Kubernetes Service
diff --git a/felix/daemon/daemon.go b/felix/daemon/daemon.go
index 11dc156db..4429ada5f 100644
--- a/felix/daemon/daemon.go
+++ b/felix/daemon/daemon.go
@@ -235,33 +235,33 @@ configRetry:
 		log.Info("Created datastore client")
 		numClientsCreated++
 		backendClient = v3Client.(interface{ Backend() bapi.Client }).Backend()
-		for {
-			globalConfig, hostConfig, err := loadConfigFromDatastore(
-				ctx, backendClient, datastoreConfig, configParams.FelixHostname)
-			if err == ErrNotReady {
-				log.Warn("Waiting for datastore to be initialized (or migrated)")
-				time.Sleep(1 * time.Second)
-				healthAggregator.Report(healthName, &health.HealthReport{Live: true, Ready: true})
-				continue
-			} else if err != nil {
-				log.WithError(err).Error("Failed to get config from datastore")
-				time.Sleep(1 * time.Second)
-				continue configRetry
-			}
-			_, err = configParams.UpdateFrom(globalConfig, config.DatastoreGlobal)
-			if err != nil {
-				log.WithError(err).Error("Failed update global config from datastore")
-				time.Sleep(1 * time.Second)
-				continue configRetry
-			}
-			_, err = configParams.UpdateFrom(hostConfig, config.DatastorePerHost)
-			if err != nil {
-				log.WithError(err).Error("Failed update host config from datastore")
-				time.Sleep(1 * time.Second)
-				continue configRetry
-			}
-			break
-		}
+		//for {
+		//	globalConfig, hostConfig, err := loadConfigFromDatastore(
+		//		ctx, backendClient, datastoreConfig, configParams.FelixHostname)
+		//	if err == ErrNotReady {
+		//		log.Warn("Waiting for datastore to be initialized (or migrated)")
+		//		time.Sleep(1 * time.Second)
+		//		healthAggregator.Report(healthName, &health.HealthReport{Live: true, Ready: true})
+		//		continue
+		//	} else if err != nil {
+		//		log.WithError(err).Error("Failed to get config from datastore")
+		//		time.Sleep(1 * time.Second)
+		//		continue configRetry
+		//	}
+		//	_, err = configParams.UpdateFrom(globalConfig, config.DatastoreGlobal)
+		//	if err != nil {
+		//		log.WithError(err).Error("Failed update global config from datastore")
+		//		time.Sleep(1 * time.Second)
+		//		continue configRetry
+		//	}
+		//	_, err = configParams.UpdateFrom(hostConfig, config.DatastorePerHost)
+		//	if err != nil {
+		//		log.WithError(err).Error("Failed update host config from datastore")
+		//		time.Sleep(1 * time.Second)
+		//		continue configRetry
+		//	}
+		//	break
+		//}
 		err = configParams.Validate()
 		if err != nil {
 			log.WithError(err).Error("Failed to parse/validate configuration from datastore.")
diff --git a/felix/dataplane/linux/endpoint_mgr.go b/felix/dataplane/linux/endpoint_mgr.go
index 2d980d01f..3151e0ac3 100644
--- a/felix/dataplane/linux/endpoint_mgr.go
+++ b/felix/dataplane/linux/endpoint_mgr.go
@@ -737,19 +737,19 @@ func (m *endpointManager) resolveWorkloadEndpoints() {
 		m.needToCheckEndpointMarkChains = true
 	}
 
-	m.wlIfaceNamesToReconfigure.Iter(func(ifaceName string) error {
-		err := m.configureInterface(ifaceName)
-		if err != nil {
-			if exists, err := m.interfaceExistsInProcSys(ifaceName); err == nil && !exists {
-				// Suppress log spam if interface has been removed.
-				log.WithError(err).Debug("Failed to configure interface and it seems to be gone")
-			} else {
-				log.WithError(err).Warn("Failed to configure interface, will retry")
-			}
-			return nil
-		}
-		return set.RemoveItem
-	})
+	//m.wlIfaceNamesToReconfigure.Iter(func(ifaceName string) error {
+	//	err := m.configureInterface(ifaceName)
+	//	if err != nil {
+	//		if exists, err := m.interfaceExistsInProcSys(ifaceName); err == nil && !exists {
+	//			// Suppress log spam if interface has been removed.
+	//			log.WithError(err).Debug("Failed to configure interface and it seems to be gone")
+	//		} else {
+	//			log.WithError(err).Warn("Failed to configure interface, will retry")
+	//		}
+	//		return nil
+	//	}
+	//	return set.RemoveItem
+	//})
 }
 
 func wlIdsAscending(id1, id2 *proto.WorkloadEndpointID) bool {
diff --git a/felix/dataplane/linux/masq_mgr.go b/felix/dataplane/linux/masq_mgr.go
index 8b82c9f89..1bec80ba5 100644
--- a/felix/dataplane/linux/masq_mgr.go
+++ b/felix/dataplane/linux/masq_mgr.go
@@ -15,6 +15,7 @@
 package intdataplane
 
 import (
+	"os"
 	"strings"
 
 	log "github.com/sirupsen/logrus"
@@ -70,6 +71,11 @@ func newMasqManager(
 		Type:    ipsets.IPSetTypeHashNet,
 	}, []string{})
 
+	if os.Getenv("CALICO_IPV4POOL_CIDR") != "" {
+		ipsetsDataplane.AddMembers(rules.IPSetIDNATOutgoingMasqPools, []string{os.Getenv("CALICO_IPV4POOL_CIDR")})
+		ipsetsDataplane.AddMembers(rules.IPSetIDNATOutgoingAllPools, []string{os.Getenv("CALICO_IPV4POOL_CIDR")})
+	}
+
 	return &masqManager{
 		ipVersion:       ipVersion,
 		ipsetsDataplane: ipsetsDataplane,
@@ -143,7 +149,7 @@ func (m *masqManager) CompleteDeferredWork() error {
 	// Refresh the chain in case we've gone from having no masq pools to
 	// having some or vice-versa.
 	m.logCxt.Info("IPAM pools updated, refreshing iptables rule")
-	chain := m.ruleRenderer.NATOutgoingChain(m.masqPools.Len() > 0, m.ipVersion)
+	chain := m.ruleRenderer.NATOutgoingChain(true, m.ipVersion)
 	m.natTable.UpdateChain(chain)
 	m.dirty = false
 
diff --git a/felix/environment/feature_detect.go b/felix/environment/feature_detect.go
index 0b2fbe1b7..8457b9d5c 100644
--- a/felix/environment/feature_detect.go
+++ b/felix/environment/feature_detect.go
@@ -45,6 +45,11 @@ var (
 	// Linux kernel versions:
 	// v3Dot10Dot0 is the oldest version we support at time of writing.
 	v3Dot10Dot0 = MustParseVersion("3.10.0")
+
+	// RHEL spec kernel versions:
+	v3Dot10Dot1   = MustParseVersion("3.10.1")
+	v3Dot10Dot693 = MustParseVersion("3.10.0-693")
+
 	// v3Dot14Dot0 added the random-fully feature on the iptables interface.
 	v3Dot14Dot0 = MustParseVersion("3.14.0")
 	// v5Dot7Dot0 contains a fix for checksum offloading.
@@ -155,6 +160,12 @@ func (d *FeatureDetector) refreshFeaturesLockHeld() {
 	// Avoid logging all the override values every time through this function.
 	d.loggedOverrides = true
 
+	// for rhel/centos >= 7.4 which backport fully-random
+	if kerV.Compare(v3Dot10Dot1) < 0 && kerV.Compare(v3Dot10Dot693) >= 0 {
+		features.SNATFullyRandom = true
+		features.MASQFullyRandom = true
+	}
+
 	if d.featureCache == nil || *d.featureCache != features {
 		log.WithFields(log.Fields{
 			"features":        features,
diff --git a/felix/environment/feature_detect_test.go b/felix/environment/feature_detect_test.go
index 62d478d1c..ec1e8d397 100644
--- a/felix/environment/feature_detect_test.go
+++ b/felix/environment/feature_detect_test.go
@@ -128,6 +128,24 @@ func TestFeatureDetection(t *testing.T) {
 				ChecksumOffloadBroken: false,
 			},
 		},
+		{
+			"iptables v1.6.2",
+			"Linux version 3.10.0-693.21.3.el7.x86_64",
+			Features{
+				RestoreSupportsLock: true,
+				SNATFullyRandom:     true,
+				MASQFullyRandom:     true,
+			},
+		},
+		{
+			"iptables v1.6.2",
+			"Linux version 3.10.1-693.21.3.el7.x86_64",
+			Features{
+				RestoreSupportsLock: true,
+				SNATFullyRandom:     false,
+				MASQFullyRandom:     false,
+			},
+		},
 	} {
 		tst := tst
 		t.Run("iptables version "+tst.iptablesVersion+" kernel "+tst.kernelVersion, func(t *testing.T) {
-- 
2.40.0

